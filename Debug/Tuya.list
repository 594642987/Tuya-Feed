
Tuya.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071cc  080071cc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080071cc  080071cc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071cc  080071cc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080071d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000008c  08007260  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08007260  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001430a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003540  00000000  00000000  000343be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00037900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  000389c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c98  00000000  00000000  00039928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015971  00000000  00000000  0004c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000672dd  00000000  00000000  00061f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c920e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004048  00000000  00000000  000c9264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006700 	.word	0x08006700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08006700 	.word	0x08006700

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fcd2 	bl	8000bf4 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 fbfb 	bl	8000a50 <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 fa2d 	bl	80006c0 <__aeabi_fsub>
 8000266:	f000 fbf3 	bl	8000a50 <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fdiv>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	464f      	mov	r7, r9
 8000278:	4646      	mov	r6, r8
 800027a:	46d6      	mov	lr, sl
 800027c:	0245      	lsls	r5, r0, #9
 800027e:	b5c0      	push	{r6, r7, lr}
 8000280:	0047      	lsls	r7, r0, #1
 8000282:	1c0c      	adds	r4, r1, #0
 8000284:	0a6d      	lsrs	r5, r5, #9
 8000286:	0e3f      	lsrs	r7, r7, #24
 8000288:	0fc6      	lsrs	r6, r0, #31
 800028a:	2f00      	cmp	r7, #0
 800028c:	d066      	beq.n	800035c <__aeabi_fdiv+0xe8>
 800028e:	2fff      	cmp	r7, #255	; 0xff
 8000290:	d06c      	beq.n	800036c <__aeabi_fdiv+0xf8>
 8000292:	2300      	movs	r3, #0
 8000294:	00ea      	lsls	r2, r5, #3
 8000296:	2580      	movs	r5, #128	; 0x80
 8000298:	4699      	mov	r9, r3
 800029a:	469a      	mov	sl, r3
 800029c:	04ed      	lsls	r5, r5, #19
 800029e:	4315      	orrs	r5, r2
 80002a0:	3f7f      	subs	r7, #127	; 0x7f
 80002a2:	0260      	lsls	r0, r4, #9
 80002a4:	0061      	lsls	r1, r4, #1
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	0e09      	lsrs	r1, r1, #24
 80002ac:	0fe4      	lsrs	r4, r4, #31
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d048      	beq.n	8000344 <__aeabi_fdiv+0xd0>
 80002b2:	29ff      	cmp	r1, #255	; 0xff
 80002b4:	d010      	beq.n	80002d8 <__aeabi_fdiv+0x64>
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	00d8      	lsls	r0, r3, #3
 80002ba:	04d2      	lsls	r2, r2, #19
 80002bc:	4302      	orrs	r2, r0
 80002be:	4690      	mov	r8, r2
 80002c0:	2000      	movs	r0, #0
 80002c2:	397f      	subs	r1, #127	; 0x7f
 80002c4:	464a      	mov	r2, r9
 80002c6:	0033      	movs	r3, r6
 80002c8:	1a7f      	subs	r7, r7, r1
 80002ca:	4302      	orrs	r2, r0
 80002cc:	496c      	ldr	r1, [pc, #432]	; (8000480 <__aeabi_fdiv+0x20c>)
 80002ce:	0092      	lsls	r2, r2, #2
 80002d0:	588a      	ldr	r2, [r1, r2]
 80002d2:	4063      	eors	r3, r4
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4697      	mov	pc, r2
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d16d      	bne.n	80003b8 <__aeabi_fdiv+0x144>
 80002dc:	2002      	movs	r0, #2
 80002de:	3fff      	subs	r7, #255	; 0xff
 80002e0:	e033      	b.n	800034a <__aeabi_fdiv+0xd6>
 80002e2:	2300      	movs	r3, #0
 80002e4:	4698      	mov	r8, r3
 80002e6:	0026      	movs	r6, r4
 80002e8:	4645      	mov	r5, r8
 80002ea:	4682      	mov	sl, r0
 80002ec:	4653      	mov	r3, sl
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d100      	bne.n	80002f4 <__aeabi_fdiv+0x80>
 80002f2:	e07f      	b.n	80003f4 <__aeabi_fdiv+0x180>
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d100      	bne.n	80002fa <__aeabi_fdiv+0x86>
 80002f8:	e094      	b.n	8000424 <__aeabi_fdiv+0x1b0>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d017      	beq.n	800032e <__aeabi_fdiv+0xba>
 80002fe:	0038      	movs	r0, r7
 8000300:	307f      	adds	r0, #127	; 0x7f
 8000302:	2800      	cmp	r0, #0
 8000304:	dd5f      	ble.n	80003c6 <__aeabi_fdiv+0x152>
 8000306:	076b      	lsls	r3, r5, #29
 8000308:	d004      	beq.n	8000314 <__aeabi_fdiv+0xa0>
 800030a:	230f      	movs	r3, #15
 800030c:	402b      	ands	r3, r5
 800030e:	2b04      	cmp	r3, #4
 8000310:	d000      	beq.n	8000314 <__aeabi_fdiv+0xa0>
 8000312:	3504      	adds	r5, #4
 8000314:	012b      	lsls	r3, r5, #4
 8000316:	d503      	bpl.n	8000320 <__aeabi_fdiv+0xac>
 8000318:	0038      	movs	r0, r7
 800031a:	4b5a      	ldr	r3, [pc, #360]	; (8000484 <__aeabi_fdiv+0x210>)
 800031c:	3080      	adds	r0, #128	; 0x80
 800031e:	401d      	ands	r5, r3
 8000320:	28fe      	cmp	r0, #254	; 0xfe
 8000322:	dc67      	bgt.n	80003f4 <__aeabi_fdiv+0x180>
 8000324:	01ad      	lsls	r5, r5, #6
 8000326:	0a6d      	lsrs	r5, r5, #9
 8000328:	b2c0      	uxtb	r0, r0
 800032a:	e002      	b.n	8000332 <__aeabi_fdiv+0xbe>
 800032c:	001e      	movs	r6, r3
 800032e:	2000      	movs	r0, #0
 8000330:	2500      	movs	r5, #0
 8000332:	05c0      	lsls	r0, r0, #23
 8000334:	4328      	orrs	r0, r5
 8000336:	07f6      	lsls	r6, r6, #31
 8000338:	4330      	orrs	r0, r6
 800033a:	bce0      	pop	{r5, r6, r7}
 800033c:	46ba      	mov	sl, r7
 800033e:	46b1      	mov	r9, r6
 8000340:	46a8      	mov	r8, r5
 8000342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000344:	2b00      	cmp	r3, #0
 8000346:	d12b      	bne.n	80003a0 <__aeabi_fdiv+0x12c>
 8000348:	2001      	movs	r0, #1
 800034a:	464a      	mov	r2, r9
 800034c:	0033      	movs	r3, r6
 800034e:	494e      	ldr	r1, [pc, #312]	; (8000488 <__aeabi_fdiv+0x214>)
 8000350:	4302      	orrs	r2, r0
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	588a      	ldr	r2, [r1, r2]
 8000356:	4063      	eors	r3, r4
 8000358:	b2db      	uxtb	r3, r3
 800035a:	4697      	mov	pc, r2
 800035c:	2d00      	cmp	r5, #0
 800035e:	d113      	bne.n	8000388 <__aeabi_fdiv+0x114>
 8000360:	2304      	movs	r3, #4
 8000362:	4699      	mov	r9, r3
 8000364:	3b03      	subs	r3, #3
 8000366:	2700      	movs	r7, #0
 8000368:	469a      	mov	sl, r3
 800036a:	e79a      	b.n	80002a2 <__aeabi_fdiv+0x2e>
 800036c:	2d00      	cmp	r5, #0
 800036e:	d105      	bne.n	800037c <__aeabi_fdiv+0x108>
 8000370:	2308      	movs	r3, #8
 8000372:	4699      	mov	r9, r3
 8000374:	3b06      	subs	r3, #6
 8000376:	27ff      	movs	r7, #255	; 0xff
 8000378:	469a      	mov	sl, r3
 800037a:	e792      	b.n	80002a2 <__aeabi_fdiv+0x2e>
 800037c:	230c      	movs	r3, #12
 800037e:	4699      	mov	r9, r3
 8000380:	3b09      	subs	r3, #9
 8000382:	27ff      	movs	r7, #255	; 0xff
 8000384:	469a      	mov	sl, r3
 8000386:	e78c      	b.n	80002a2 <__aeabi_fdiv+0x2e>
 8000388:	0028      	movs	r0, r5
 800038a:	f000 fc3d 	bl	8000c08 <__clzsi2>
 800038e:	2776      	movs	r7, #118	; 0x76
 8000390:	1f43      	subs	r3, r0, #5
 8000392:	409d      	lsls	r5, r3
 8000394:	2300      	movs	r3, #0
 8000396:	427f      	negs	r7, r7
 8000398:	4699      	mov	r9, r3
 800039a:	469a      	mov	sl, r3
 800039c:	1a3f      	subs	r7, r7, r0
 800039e:	e780      	b.n	80002a2 <__aeabi_fdiv+0x2e>
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fc31 	bl	8000c08 <__clzsi2>
 80003a6:	4642      	mov	r2, r8
 80003a8:	1f43      	subs	r3, r0, #5
 80003aa:	2176      	movs	r1, #118	; 0x76
 80003ac:	409a      	lsls	r2, r3
 80003ae:	4249      	negs	r1, r1
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	4690      	mov	r8, r2
 80003b4:	2000      	movs	r0, #0
 80003b6:	e785      	b.n	80002c4 <__aeabi_fdiv+0x50>
 80003b8:	21ff      	movs	r1, #255	; 0xff
 80003ba:	2003      	movs	r0, #3
 80003bc:	e782      	b.n	80002c4 <__aeabi_fdiv+0x50>
 80003be:	001e      	movs	r6, r3
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	2500      	movs	r5, #0
 80003c4:	e7b5      	b.n	8000332 <__aeabi_fdiv+0xbe>
 80003c6:	2301      	movs	r3, #1
 80003c8:	1a1b      	subs	r3, r3, r0
 80003ca:	2b1b      	cmp	r3, #27
 80003cc:	dcaf      	bgt.n	800032e <__aeabi_fdiv+0xba>
 80003ce:	379e      	adds	r7, #158	; 0x9e
 80003d0:	0029      	movs	r1, r5
 80003d2:	40bd      	lsls	r5, r7
 80003d4:	40d9      	lsrs	r1, r3
 80003d6:	1e6a      	subs	r2, r5, #1
 80003d8:	4195      	sbcs	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	076b      	lsls	r3, r5, #29
 80003de:	d004      	beq.n	80003ea <__aeabi_fdiv+0x176>
 80003e0:	230f      	movs	r3, #15
 80003e2:	402b      	ands	r3, r5
 80003e4:	2b04      	cmp	r3, #4
 80003e6:	d000      	beq.n	80003ea <__aeabi_fdiv+0x176>
 80003e8:	3504      	adds	r5, #4
 80003ea:	016b      	lsls	r3, r5, #5
 80003ec:	d544      	bpl.n	8000478 <__aeabi_fdiv+0x204>
 80003ee:	2001      	movs	r0, #1
 80003f0:	2500      	movs	r5, #0
 80003f2:	e79e      	b.n	8000332 <__aeabi_fdiv+0xbe>
 80003f4:	20ff      	movs	r0, #255	; 0xff
 80003f6:	2500      	movs	r5, #0
 80003f8:	e79b      	b.n	8000332 <__aeabi_fdiv+0xbe>
 80003fa:	2580      	movs	r5, #128	; 0x80
 80003fc:	2600      	movs	r6, #0
 80003fe:	20ff      	movs	r0, #255	; 0xff
 8000400:	03ed      	lsls	r5, r5, #15
 8000402:	e796      	b.n	8000332 <__aeabi_fdiv+0xbe>
 8000404:	2300      	movs	r3, #0
 8000406:	4698      	mov	r8, r3
 8000408:	2080      	movs	r0, #128	; 0x80
 800040a:	03c0      	lsls	r0, r0, #15
 800040c:	4205      	tst	r5, r0
 800040e:	d009      	beq.n	8000424 <__aeabi_fdiv+0x1b0>
 8000410:	4643      	mov	r3, r8
 8000412:	4203      	tst	r3, r0
 8000414:	d106      	bne.n	8000424 <__aeabi_fdiv+0x1b0>
 8000416:	4645      	mov	r5, r8
 8000418:	4305      	orrs	r5, r0
 800041a:	026d      	lsls	r5, r5, #9
 800041c:	0026      	movs	r6, r4
 800041e:	20ff      	movs	r0, #255	; 0xff
 8000420:	0a6d      	lsrs	r5, r5, #9
 8000422:	e786      	b.n	8000332 <__aeabi_fdiv+0xbe>
 8000424:	2080      	movs	r0, #128	; 0x80
 8000426:	03c0      	lsls	r0, r0, #15
 8000428:	4305      	orrs	r5, r0
 800042a:	026d      	lsls	r5, r5, #9
 800042c:	20ff      	movs	r0, #255	; 0xff
 800042e:	0a6d      	lsrs	r5, r5, #9
 8000430:	e77f      	b.n	8000332 <__aeabi_fdiv+0xbe>
 8000432:	4641      	mov	r1, r8
 8000434:	016a      	lsls	r2, r5, #5
 8000436:	0148      	lsls	r0, r1, #5
 8000438:	4282      	cmp	r2, r0
 800043a:	d219      	bcs.n	8000470 <__aeabi_fdiv+0x1fc>
 800043c:	211b      	movs	r1, #27
 800043e:	2500      	movs	r5, #0
 8000440:	3f01      	subs	r7, #1
 8000442:	2601      	movs	r6, #1
 8000444:	0014      	movs	r4, r2
 8000446:	006d      	lsls	r5, r5, #1
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	2c00      	cmp	r4, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_fdiv+0x1de>
 800044e:	4290      	cmp	r0, r2
 8000450:	d801      	bhi.n	8000456 <__aeabi_fdiv+0x1e2>
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	4335      	orrs	r5, r6
 8000456:	3901      	subs	r1, #1
 8000458:	2900      	cmp	r1, #0
 800045a:	d1f3      	bne.n	8000444 <__aeabi_fdiv+0x1d0>
 800045c:	1e50      	subs	r0, r2, #1
 800045e:	4182      	sbcs	r2, r0
 8000460:	0038      	movs	r0, r7
 8000462:	307f      	adds	r0, #127	; 0x7f
 8000464:	001e      	movs	r6, r3
 8000466:	4315      	orrs	r5, r2
 8000468:	2800      	cmp	r0, #0
 800046a:	dd00      	ble.n	800046e <__aeabi_fdiv+0x1fa>
 800046c:	e74b      	b.n	8000306 <__aeabi_fdiv+0x92>
 800046e:	e7aa      	b.n	80003c6 <__aeabi_fdiv+0x152>
 8000470:	211a      	movs	r1, #26
 8000472:	2501      	movs	r5, #1
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	e7e4      	b.n	8000442 <__aeabi_fdiv+0x1ce>
 8000478:	01ad      	lsls	r5, r5, #6
 800047a:	2000      	movs	r0, #0
 800047c:	0a6d      	lsrs	r5, r5, #9
 800047e:	e758      	b.n	8000332 <__aeabi_fdiv+0xbe>
 8000480:	080067f0 	.word	0x080067f0
 8000484:	f7ffffff 	.word	0xf7ffffff
 8000488:	08006830 	.word	0x08006830

0800048c <__aeabi_fmul>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	4657      	mov	r7, sl
 8000490:	464e      	mov	r6, r9
 8000492:	4645      	mov	r5, r8
 8000494:	46de      	mov	lr, fp
 8000496:	0244      	lsls	r4, r0, #9
 8000498:	b5e0      	push	{r5, r6, r7, lr}
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	1c0f      	adds	r7, r1, #0
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	0e2d      	lsrs	r5, r5, #24
 80004a2:	0fc6      	lsrs	r6, r0, #31
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d047      	beq.n	8000538 <__aeabi_fmul+0xac>
 80004a8:	2dff      	cmp	r5, #255	; 0xff
 80004aa:	d04d      	beq.n	8000548 <__aeabi_fmul+0xbc>
 80004ac:	2300      	movs	r3, #0
 80004ae:	2080      	movs	r0, #128	; 0x80
 80004b0:	469a      	mov	sl, r3
 80004b2:	469b      	mov	fp, r3
 80004b4:	00e4      	lsls	r4, r4, #3
 80004b6:	04c0      	lsls	r0, r0, #19
 80004b8:	4304      	orrs	r4, r0
 80004ba:	3d7f      	subs	r5, #127	; 0x7f
 80004bc:	0278      	lsls	r0, r7, #9
 80004be:	0a43      	lsrs	r3, r0, #9
 80004c0:	4699      	mov	r9, r3
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	4698      	mov	r8, r3
 80004c8:	0e12      	lsrs	r2, r2, #24
 80004ca:	464b      	mov	r3, r9
 80004cc:	d044      	beq.n	8000558 <__aeabi_fmul+0xcc>
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d011      	beq.n	80004f6 <__aeabi_fmul+0x6a>
 80004d2:	00d8      	lsls	r0, r3, #3
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	4303      	orrs	r3, r0
 80004da:	4699      	mov	r9, r3
 80004dc:	2000      	movs	r0, #0
 80004de:	3a7f      	subs	r2, #127	; 0x7f
 80004e0:	18ad      	adds	r5, r5, r2
 80004e2:	4647      	mov	r7, r8
 80004e4:	4653      	mov	r3, sl
 80004e6:	4077      	eors	r7, r6
 80004e8:	1c69      	adds	r1, r5, #1
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d83f      	bhi.n	800056e <__aeabi_fmul+0xe2>
 80004ee:	4a72      	ldr	r2, [pc, #456]	; (80006b8 <__aeabi_fmul+0x22c>)
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	58d3      	ldr	r3, [r2, r3]
 80004f4:	469f      	mov	pc, r3
 80004f6:	35ff      	adds	r5, #255	; 0xff
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x72>
 80004fc:	e079      	b.n	80005f2 <__aeabi_fmul+0x166>
 80004fe:	4652      	mov	r2, sl
 8000500:	2302      	movs	r3, #2
 8000502:	431a      	orrs	r2, r3
 8000504:	4692      	mov	sl, r2
 8000506:	2002      	movs	r0, #2
 8000508:	e7eb      	b.n	80004e2 <__aeabi_fmul+0x56>
 800050a:	4647      	mov	r7, r8
 800050c:	464c      	mov	r4, r9
 800050e:	4683      	mov	fp, r0
 8000510:	465b      	mov	r3, fp
 8000512:	2b02      	cmp	r3, #2
 8000514:	d028      	beq.n	8000568 <__aeabi_fmul+0xdc>
 8000516:	2b03      	cmp	r3, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fmul+0x90>
 800051a:	e0c6      	b.n	80006aa <__aeabi_fmul+0x21e>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d14f      	bne.n	80005c0 <__aeabi_fmul+0x134>
 8000520:	2000      	movs	r0, #0
 8000522:	2400      	movs	r4, #0
 8000524:	05c0      	lsls	r0, r0, #23
 8000526:	07ff      	lsls	r7, r7, #31
 8000528:	4320      	orrs	r0, r4
 800052a:	4338      	orrs	r0, r7
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000538:	2c00      	cmp	r4, #0
 800053a:	d171      	bne.n	8000620 <__aeabi_fmul+0x194>
 800053c:	2304      	movs	r3, #4
 800053e:	469a      	mov	sl, r3
 8000540:	3b03      	subs	r3, #3
 8000542:	2500      	movs	r5, #0
 8000544:	469b      	mov	fp, r3
 8000546:	e7b9      	b.n	80004bc <__aeabi_fmul+0x30>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d163      	bne.n	8000614 <__aeabi_fmul+0x188>
 800054c:	2308      	movs	r3, #8
 800054e:	469a      	mov	sl, r3
 8000550:	3b06      	subs	r3, #6
 8000552:	25ff      	movs	r5, #255	; 0xff
 8000554:	469b      	mov	fp, r3
 8000556:	e7b1      	b.n	80004bc <__aeabi_fmul+0x30>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d150      	bne.n	80005fe <__aeabi_fmul+0x172>
 800055c:	4652      	mov	r2, sl
 800055e:	3301      	adds	r3, #1
 8000560:	431a      	orrs	r2, r3
 8000562:	4692      	mov	sl, r2
 8000564:	2001      	movs	r0, #1
 8000566:	e7bc      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000568:	20ff      	movs	r0, #255	; 0xff
 800056a:	2400      	movs	r4, #0
 800056c:	e7da      	b.n	8000524 <__aeabi_fmul+0x98>
 800056e:	4648      	mov	r0, r9
 8000570:	0c26      	lsrs	r6, r4, #16
 8000572:	0424      	lsls	r4, r4, #16
 8000574:	0c22      	lsrs	r2, r4, #16
 8000576:	0404      	lsls	r4, r0, #16
 8000578:	0c24      	lsrs	r4, r4, #16
 800057a:	464b      	mov	r3, r9
 800057c:	0020      	movs	r0, r4
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	4350      	muls	r0, r2
 8000582:	4374      	muls	r4, r6
 8000584:	435a      	muls	r2, r3
 8000586:	435e      	muls	r6, r3
 8000588:	1912      	adds	r2, r2, r4
 800058a:	0c03      	lsrs	r3, r0, #16
 800058c:	189b      	adds	r3, r3, r2
 800058e:	429c      	cmp	r4, r3
 8000590:	d903      	bls.n	800059a <__aeabi_fmul+0x10e>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0252      	lsls	r2, r2, #9
 8000596:	4694      	mov	ip, r2
 8000598:	4466      	add	r6, ip
 800059a:	0400      	lsls	r0, r0, #16
 800059c:	041a      	lsls	r2, r3, #16
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	1812      	adds	r2, r2, r0
 80005a2:	0194      	lsls	r4, r2, #6
 80005a4:	1e60      	subs	r0, r4, #1
 80005a6:	4184      	sbcs	r4, r0
 80005a8:	0c1b      	lsrs	r3, r3, #16
 80005aa:	0e92      	lsrs	r2, r2, #26
 80005ac:	199b      	adds	r3, r3, r6
 80005ae:	4314      	orrs	r4, r2
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	431c      	orrs	r4, r3
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	d572      	bpl.n	800069e <__aeabi_fmul+0x212>
 80005b8:	2001      	movs	r0, #1
 80005ba:	0863      	lsrs	r3, r4, #1
 80005bc:	4004      	ands	r4, r0
 80005be:	431c      	orrs	r4, r3
 80005c0:	0008      	movs	r0, r1
 80005c2:	307f      	adds	r0, #127	; 0x7f
 80005c4:	2800      	cmp	r0, #0
 80005c6:	dd3c      	ble.n	8000642 <__aeabi_fmul+0x1b6>
 80005c8:	0763      	lsls	r3, r4, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4023      	ands	r3, r4
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005d4:	3404      	adds	r4, #4
 80005d6:	0123      	lsls	r3, r4, #4
 80005d8:	d503      	bpl.n	80005e2 <__aeabi_fmul+0x156>
 80005da:	3180      	adds	r1, #128	; 0x80
 80005dc:	0008      	movs	r0, r1
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <__aeabi_fmul+0x230>)
 80005e0:	401c      	ands	r4, r3
 80005e2:	28fe      	cmp	r0, #254	; 0xfe
 80005e4:	dcc0      	bgt.n	8000568 <__aeabi_fmul+0xdc>
 80005e6:	01a4      	lsls	r4, r4, #6
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	b2c0      	uxtb	r0, r0
 80005ec:	e79a      	b.n	8000524 <__aeabi_fmul+0x98>
 80005ee:	0037      	movs	r7, r6
 80005f0:	e78e      	b.n	8000510 <__aeabi_fmul+0x84>
 80005f2:	4652      	mov	r2, sl
 80005f4:	2303      	movs	r3, #3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4692      	mov	sl, r2
 80005fa:	2003      	movs	r0, #3
 80005fc:	e771      	b.n	80004e2 <__aeabi_fmul+0x56>
 80005fe:	4648      	mov	r0, r9
 8000600:	f000 fb02 	bl	8000c08 <__clzsi2>
 8000604:	464a      	mov	r2, r9
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409a      	lsls	r2, r3
 800060a:	1a2d      	subs	r5, r5, r0
 800060c:	4691      	mov	r9, r2
 800060e:	2000      	movs	r0, #0
 8000610:	3d76      	subs	r5, #118	; 0x76
 8000612:	e766      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000614:	230c      	movs	r3, #12
 8000616:	469a      	mov	sl, r3
 8000618:	3b09      	subs	r3, #9
 800061a:	25ff      	movs	r5, #255	; 0xff
 800061c:	469b      	mov	fp, r3
 800061e:	e74d      	b.n	80004bc <__aeabi_fmul+0x30>
 8000620:	0020      	movs	r0, r4
 8000622:	f000 faf1 	bl	8000c08 <__clzsi2>
 8000626:	2576      	movs	r5, #118	; 0x76
 8000628:	1f43      	subs	r3, r0, #5
 800062a:	409c      	lsls	r4, r3
 800062c:	2300      	movs	r3, #0
 800062e:	426d      	negs	r5, r5
 8000630:	469a      	mov	sl, r3
 8000632:	469b      	mov	fp, r3
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	e741      	b.n	80004bc <__aeabi_fmul+0x30>
 8000638:	2480      	movs	r4, #128	; 0x80
 800063a:	2700      	movs	r7, #0
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	03e4      	lsls	r4, r4, #15
 8000640:	e770      	b.n	8000524 <__aeabi_fmul+0x98>
 8000642:	2301      	movs	r3, #1
 8000644:	1a1b      	subs	r3, r3, r0
 8000646:	2b1b      	cmp	r3, #27
 8000648:	dd00      	ble.n	800064c <__aeabi_fmul+0x1c0>
 800064a:	e769      	b.n	8000520 <__aeabi_fmul+0x94>
 800064c:	319e      	adds	r1, #158	; 0x9e
 800064e:	0020      	movs	r0, r4
 8000650:	408c      	lsls	r4, r1
 8000652:	40d8      	lsrs	r0, r3
 8000654:	1e63      	subs	r3, r4, #1
 8000656:	419c      	sbcs	r4, r3
 8000658:	4304      	orrs	r4, r0
 800065a:	0763      	lsls	r3, r4, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 800065e:	230f      	movs	r3, #15
 8000660:	4023      	ands	r3, r4
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 8000666:	3404      	adds	r4, #4
 8000668:	0163      	lsls	r3, r4, #5
 800066a:	d51a      	bpl.n	80006a2 <__aeabi_fmul+0x216>
 800066c:	2001      	movs	r0, #1
 800066e:	2400      	movs	r4, #0
 8000670:	e758      	b.n	8000524 <__aeabi_fmul+0x98>
 8000672:	2080      	movs	r0, #128	; 0x80
 8000674:	03c0      	lsls	r0, r0, #15
 8000676:	4204      	tst	r4, r0
 8000678:	d009      	beq.n	800068e <__aeabi_fmul+0x202>
 800067a:	464b      	mov	r3, r9
 800067c:	4203      	tst	r3, r0
 800067e:	d106      	bne.n	800068e <__aeabi_fmul+0x202>
 8000680:	464c      	mov	r4, r9
 8000682:	4304      	orrs	r4, r0
 8000684:	0264      	lsls	r4, r4, #9
 8000686:	4647      	mov	r7, r8
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	e74a      	b.n	8000524 <__aeabi_fmul+0x98>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4304      	orrs	r4, r0
 8000694:	0264      	lsls	r4, r4, #9
 8000696:	0037      	movs	r7, r6
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	0a64      	lsrs	r4, r4, #9
 800069c:	e742      	b.n	8000524 <__aeabi_fmul+0x98>
 800069e:	0029      	movs	r1, r5
 80006a0:	e78e      	b.n	80005c0 <__aeabi_fmul+0x134>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	2000      	movs	r0, #0
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	e73c      	b.n	8000524 <__aeabi_fmul+0x98>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4304      	orrs	r4, r0
 80006b0:	0264      	lsls	r4, r4, #9
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	e735      	b.n	8000524 <__aeabi_fmul+0x98>
 80006b8:	08006870 	.word	0x08006870
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_fsub>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	4646      	mov	r6, r8
 80006c4:	46d6      	mov	lr, sl
 80006c6:	464f      	mov	r7, r9
 80006c8:	0243      	lsls	r3, r0, #9
 80006ca:	0a5b      	lsrs	r3, r3, #9
 80006cc:	00da      	lsls	r2, r3, #3
 80006ce:	4694      	mov	ip, r2
 80006d0:	024a      	lsls	r2, r1, #9
 80006d2:	b5c0      	push	{r6, r7, lr}
 80006d4:	0044      	lsls	r4, r0, #1
 80006d6:	0a56      	lsrs	r6, r2, #9
 80006d8:	1c05      	adds	r5, r0, #0
 80006da:	46b0      	mov	r8, r6
 80006dc:	0e24      	lsrs	r4, r4, #24
 80006de:	004e      	lsls	r6, r1, #1
 80006e0:	0992      	lsrs	r2, r2, #6
 80006e2:	001f      	movs	r7, r3
 80006e4:	0020      	movs	r0, r4
 80006e6:	4692      	mov	sl, r2
 80006e8:	0fed      	lsrs	r5, r5, #31
 80006ea:	0e36      	lsrs	r6, r6, #24
 80006ec:	0fc9      	lsrs	r1, r1, #31
 80006ee:	2eff      	cmp	r6, #255	; 0xff
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fsub+0x34>
 80006f2:	e07f      	b.n	80007f4 <__aeabi_fsub+0x134>
 80006f4:	2201      	movs	r2, #1
 80006f6:	4051      	eors	r1, r2
 80006f8:	428d      	cmp	r5, r1
 80006fa:	d051      	beq.n	80007a0 <__aeabi_fsub+0xe0>
 80006fc:	1ba2      	subs	r2, r4, r6
 80006fe:	4691      	mov	r9, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_fsub+0x46>
 8000704:	e07e      	b.n	8000804 <__aeabi_fsub+0x144>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fsub+0x4c>
 800070a:	e099      	b.n	8000840 <__aeabi_fsub+0x180>
 800070c:	2cff      	cmp	r4, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fsub+0x52>
 8000710:	e08c      	b.n	800082c <__aeabi_fsub+0x16c>
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	4652      	mov	r2, sl
 8000716:	04db      	lsls	r3, r3, #19
 8000718:	431a      	orrs	r2, r3
 800071a:	4692      	mov	sl, r2
 800071c:	464a      	mov	r2, r9
 800071e:	2301      	movs	r3, #1
 8000720:	2a1b      	cmp	r2, #27
 8000722:	dc08      	bgt.n	8000736 <__aeabi_fsub+0x76>
 8000724:	4653      	mov	r3, sl
 8000726:	2120      	movs	r1, #32
 8000728:	40d3      	lsrs	r3, r2
 800072a:	1a89      	subs	r1, r1, r2
 800072c:	4652      	mov	r2, sl
 800072e:	408a      	lsls	r2, r1
 8000730:	1e51      	subs	r1, r2, #1
 8000732:	418a      	sbcs	r2, r1
 8000734:	4313      	orrs	r3, r2
 8000736:	4662      	mov	r2, ip
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	015a      	lsls	r2, r3, #5
 800073c:	d400      	bmi.n	8000740 <__aeabi_fsub+0x80>
 800073e:	e0f3      	b.n	8000928 <__aeabi_fsub+0x268>
 8000740:	019b      	lsls	r3, r3, #6
 8000742:	099e      	lsrs	r6, r3, #6
 8000744:	0030      	movs	r0, r6
 8000746:	f000 fa5f 	bl	8000c08 <__clzsi2>
 800074a:	3805      	subs	r0, #5
 800074c:	4086      	lsls	r6, r0
 800074e:	4284      	cmp	r4, r0
 8000750:	dd00      	ble.n	8000754 <__aeabi_fsub+0x94>
 8000752:	e0f7      	b.n	8000944 <__aeabi_fsub+0x284>
 8000754:	0032      	movs	r2, r6
 8000756:	1b04      	subs	r4, r0, r4
 8000758:	2020      	movs	r0, #32
 800075a:	3401      	adds	r4, #1
 800075c:	40e2      	lsrs	r2, r4
 800075e:	1b04      	subs	r4, r0, r4
 8000760:	40a6      	lsls	r6, r4
 8000762:	0033      	movs	r3, r6
 8000764:	1e5e      	subs	r6, r3, #1
 8000766:	41b3      	sbcs	r3, r6
 8000768:	2400      	movs	r4, #0
 800076a:	4313      	orrs	r3, r2
 800076c:	075a      	lsls	r2, r3, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fsub+0xba>
 8000770:	220f      	movs	r2, #15
 8000772:	401a      	ands	r2, r3
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fsub+0xba>
 8000778:	3304      	adds	r3, #4
 800077a:	015a      	lsls	r2, r3, #5
 800077c:	d400      	bmi.n	8000780 <__aeabi_fsub+0xc0>
 800077e:	e0d6      	b.n	800092e <__aeabi_fsub+0x26e>
 8000780:	1c62      	adds	r2, r4, #1
 8000782:	2cfe      	cmp	r4, #254	; 0xfe
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0xc8>
 8000786:	e0da      	b.n	800093e <__aeabi_fsub+0x27e>
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	0a5f      	lsrs	r7, r3, #9
 800078c:	b2d0      	uxtb	r0, r2
 800078e:	05c0      	lsls	r0, r0, #23
 8000790:	4338      	orrs	r0, r7
 8000792:	07ed      	lsls	r5, r5, #31
 8000794:	4328      	orrs	r0, r5
 8000796:	bce0      	pop	{r5, r6, r7}
 8000798:	46ba      	mov	sl, r7
 800079a:	46b1      	mov	r9, r6
 800079c:	46a8      	mov	r8, r5
 800079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a0:	1ba2      	subs	r2, r4, r6
 80007a2:	4691      	mov	r9, r2
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	dd63      	ble.n	8000870 <__aeabi_fsub+0x1b0>
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fsub+0xee>
 80007ac:	e099      	b.n	80008e2 <__aeabi_fsub+0x222>
 80007ae:	2cff      	cmp	r4, #255	; 0xff
 80007b0:	d03c      	beq.n	800082c <__aeabi_fsub+0x16c>
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	4652      	mov	r2, sl
 80007b6:	04db      	lsls	r3, r3, #19
 80007b8:	431a      	orrs	r2, r3
 80007ba:	4692      	mov	sl, r2
 80007bc:	464a      	mov	r2, r9
 80007be:	2301      	movs	r3, #1
 80007c0:	2a1b      	cmp	r2, #27
 80007c2:	dc08      	bgt.n	80007d6 <__aeabi_fsub+0x116>
 80007c4:	4653      	mov	r3, sl
 80007c6:	2120      	movs	r1, #32
 80007c8:	40d3      	lsrs	r3, r2
 80007ca:	1a89      	subs	r1, r1, r2
 80007cc:	4652      	mov	r2, sl
 80007ce:	408a      	lsls	r2, r1
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	418a      	sbcs	r2, r1
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	d400      	bmi.n	80007de <__aeabi_fsub+0x11e>
 80007dc:	e0a4      	b.n	8000928 <__aeabi_fsub+0x268>
 80007de:	3401      	adds	r4, #1
 80007e0:	2cff      	cmp	r4, #255	; 0xff
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fsub+0x126>
 80007e4:	e0ab      	b.n	800093e <__aeabi_fsub+0x27e>
 80007e6:	2201      	movs	r2, #1
 80007e8:	4997      	ldr	r1, [pc, #604]	; (8000a48 <__aeabi_fsub+0x388>)
 80007ea:	401a      	ands	r2, r3
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	400b      	ands	r3, r1
 80007f0:	4313      	orrs	r3, r2
 80007f2:	e7bb      	b.n	800076c <__aeabi_fsub+0xac>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d032      	beq.n	800085e <__aeabi_fsub+0x19e>
 80007f8:	428d      	cmp	r5, r1
 80007fa:	d035      	beq.n	8000868 <__aeabi_fsub+0x1a8>
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	4252      	negs	r2, r2
 8000800:	4691      	mov	r9, r2
 8000802:	44a1      	add	r9, r4
 8000804:	464a      	mov	r2, r9
 8000806:	2a00      	cmp	r2, #0
 8000808:	d051      	beq.n	80008ae <__aeabi_fsub+0x1ee>
 800080a:	1b30      	subs	r0, r6, r4
 800080c:	2c00      	cmp	r4, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fsub+0x152>
 8000810:	e09c      	b.n	800094c <__aeabi_fsub+0x28c>
 8000812:	4663      	mov	r3, ip
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <__aeabi_fsub+0x15a>
 8000818:	e0df      	b.n	80009da <__aeabi_fsub+0x31a>
 800081a:	3801      	subs	r0, #1
 800081c:	2800      	cmp	r0, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0x162>
 8000820:	e0f7      	b.n	8000a12 <__aeabi_fsub+0x352>
 8000822:	2eff      	cmp	r6, #255	; 0xff
 8000824:	d000      	beq.n	8000828 <__aeabi_fsub+0x168>
 8000826:	e099      	b.n	800095c <__aeabi_fsub+0x29c>
 8000828:	000d      	movs	r5, r1
 800082a:	4643      	mov	r3, r8
 800082c:	2b00      	cmp	r3, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fsub+0x172>
 8000830:	e085      	b.n	800093e <__aeabi_fsub+0x27e>
 8000832:	2780      	movs	r7, #128	; 0x80
 8000834:	03ff      	lsls	r7, r7, #15
 8000836:	431f      	orrs	r7, r3
 8000838:	027f      	lsls	r7, r7, #9
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	0a7f      	lsrs	r7, r7, #9
 800083e:	e7a6      	b.n	800078e <__aeabi_fsub+0xce>
 8000840:	4652      	mov	r2, sl
 8000842:	2a00      	cmp	r2, #0
 8000844:	d074      	beq.n	8000930 <__aeabi_fsub+0x270>
 8000846:	2201      	movs	r2, #1
 8000848:	4252      	negs	r2, r2
 800084a:	4690      	mov	r8, r2
 800084c:	44c1      	add	r9, r8
 800084e:	464a      	mov	r2, r9
 8000850:	2a00      	cmp	r2, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x196>
 8000854:	e0c8      	b.n	80009e8 <__aeabi_fsub+0x328>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d000      	beq.n	800085c <__aeabi_fsub+0x19c>
 800085a:	e75f      	b.n	800071c <__aeabi_fsub+0x5c>
 800085c:	e7e6      	b.n	800082c <__aeabi_fsub+0x16c>
 800085e:	2201      	movs	r2, #1
 8000860:	4051      	eors	r1, r2
 8000862:	42a9      	cmp	r1, r5
 8000864:	d000      	beq.n	8000868 <__aeabi_fsub+0x1a8>
 8000866:	e749      	b.n	80006fc <__aeabi_fsub+0x3c>
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	4252      	negs	r2, r2
 800086c:	4691      	mov	r9, r2
 800086e:	44a1      	add	r9, r4
 8000870:	464a      	mov	r2, r9
 8000872:	2a00      	cmp	r2, #0
 8000874:	d043      	beq.n	80008fe <__aeabi_fsub+0x23e>
 8000876:	1b31      	subs	r1, r6, r4
 8000878:	2c00      	cmp	r4, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x1be>
 800087c:	e08c      	b.n	8000998 <__aeabi_fsub+0x2d8>
 800087e:	2eff      	cmp	r6, #255	; 0xff
 8000880:	d100      	bne.n	8000884 <__aeabi_fsub+0x1c4>
 8000882:	e092      	b.n	80009aa <__aeabi_fsub+0x2ea>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	4662      	mov	r2, ip
 8000888:	04db      	lsls	r3, r3, #19
 800088a:	431a      	orrs	r2, r3
 800088c:	4694      	mov	ip, r2
 800088e:	2301      	movs	r3, #1
 8000890:	291b      	cmp	r1, #27
 8000892:	dc09      	bgt.n	80008a8 <__aeabi_fsub+0x1e8>
 8000894:	2020      	movs	r0, #32
 8000896:	4663      	mov	r3, ip
 8000898:	4662      	mov	r2, ip
 800089a:	40cb      	lsrs	r3, r1
 800089c:	1a41      	subs	r1, r0, r1
 800089e:	408a      	lsls	r2, r1
 80008a0:	0011      	movs	r1, r2
 80008a2:	1e48      	subs	r0, r1, #1
 80008a4:	4181      	sbcs	r1, r0
 80008a6:	430b      	orrs	r3, r1
 80008a8:	0034      	movs	r4, r6
 80008aa:	4453      	add	r3, sl
 80008ac:	e794      	b.n	80007d8 <__aeabi_fsub+0x118>
 80008ae:	22fe      	movs	r2, #254	; 0xfe
 80008b0:	1c66      	adds	r6, r4, #1
 80008b2:	4232      	tst	r2, r6
 80008b4:	d164      	bne.n	8000980 <__aeabi_fsub+0x2c0>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fsub+0x1fc>
 80008ba:	e082      	b.n	80009c2 <__aeabi_fsub+0x302>
 80008bc:	4663      	mov	r3, ip
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0x204>
 80008c2:	e0ab      	b.n	8000a1c <__aeabi_fsub+0x35c>
 80008c4:	4653      	mov	r3, sl
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x20c>
 80008ca:	e760      	b.n	800078e <__aeabi_fsub+0xce>
 80008cc:	4663      	mov	r3, ip
 80008ce:	4652      	mov	r2, sl
 80008d0:	1a9b      	subs	r3, r3, r2
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_fsub+0x218>
 80008d6:	e0aa      	b.n	8000a2e <__aeabi_fsub+0x36e>
 80008d8:	4663      	mov	r3, ip
 80008da:	4652      	mov	r2, sl
 80008dc:	000d      	movs	r5, r1
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	e744      	b.n	800076c <__aeabi_fsub+0xac>
 80008e2:	4652      	mov	r2, sl
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d023      	beq.n	8000930 <__aeabi_fsub+0x270>
 80008e8:	2201      	movs	r2, #1
 80008ea:	4252      	negs	r2, r2
 80008ec:	4690      	mov	r8, r2
 80008ee:	44c1      	add	r9, r8
 80008f0:	464a      	mov	r2, r9
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d075      	beq.n	80009e2 <__aeabi_fsub+0x322>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x23c>
 80008fa:	e75f      	b.n	80007bc <__aeabi_fsub+0xfc>
 80008fc:	e796      	b.n	800082c <__aeabi_fsub+0x16c>
 80008fe:	26fe      	movs	r6, #254	; 0xfe
 8000900:	3401      	adds	r4, #1
 8000902:	4226      	tst	r6, r4
 8000904:	d153      	bne.n	80009ae <__aeabi_fsub+0x2ee>
 8000906:	2800      	cmp	r0, #0
 8000908:	d172      	bne.n	80009f0 <__aeabi_fsub+0x330>
 800090a:	4663      	mov	r3, ip
 800090c:	2b00      	cmp	r3, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_fsub+0x252>
 8000910:	e093      	b.n	8000a3a <__aeabi_fsub+0x37a>
 8000912:	4653      	mov	r3, sl
 8000914:	2b00      	cmp	r3, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x25a>
 8000918:	e739      	b.n	800078e <__aeabi_fsub+0xce>
 800091a:	4463      	add	r3, ip
 800091c:	2400      	movs	r4, #0
 800091e:	015a      	lsls	r2, r3, #5
 8000920:	d502      	bpl.n	8000928 <__aeabi_fsub+0x268>
 8000922:	4a4a      	ldr	r2, [pc, #296]	; (8000a4c <__aeabi_fsub+0x38c>)
 8000924:	3401      	adds	r4, #1
 8000926:	4013      	ands	r3, r2
 8000928:	075a      	lsls	r2, r3, #29
 800092a:	d000      	beq.n	800092e <__aeabi_fsub+0x26e>
 800092c:	e720      	b.n	8000770 <__aeabi_fsub+0xb0>
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	2cff      	cmp	r4, #255	; 0xff
 8000932:	d100      	bne.n	8000936 <__aeabi_fsub+0x276>
 8000934:	e77a      	b.n	800082c <__aeabi_fsub+0x16c>
 8000936:	025b      	lsls	r3, r3, #9
 8000938:	0a5f      	lsrs	r7, r3, #9
 800093a:	b2e0      	uxtb	r0, r4
 800093c:	e727      	b.n	800078e <__aeabi_fsub+0xce>
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	2700      	movs	r7, #0
 8000942:	e724      	b.n	800078e <__aeabi_fsub+0xce>
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <__aeabi_fsub+0x38c>)
 8000946:	1a24      	subs	r4, r4, r0
 8000948:	4033      	ands	r3, r6
 800094a:	e70f      	b.n	800076c <__aeabi_fsub+0xac>
 800094c:	2eff      	cmp	r6, #255	; 0xff
 800094e:	d100      	bne.n	8000952 <__aeabi_fsub+0x292>
 8000950:	e76a      	b.n	8000828 <__aeabi_fsub+0x168>
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	4662      	mov	r2, ip
 8000956:	04db      	lsls	r3, r3, #19
 8000958:	431a      	orrs	r2, r3
 800095a:	4694      	mov	ip, r2
 800095c:	2301      	movs	r3, #1
 800095e:	281b      	cmp	r0, #27
 8000960:	dc09      	bgt.n	8000976 <__aeabi_fsub+0x2b6>
 8000962:	2420      	movs	r4, #32
 8000964:	4663      	mov	r3, ip
 8000966:	4662      	mov	r2, ip
 8000968:	40c3      	lsrs	r3, r0
 800096a:	1a20      	subs	r0, r4, r0
 800096c:	4082      	lsls	r2, r0
 800096e:	0010      	movs	r0, r2
 8000970:	1e44      	subs	r4, r0, #1
 8000972:	41a0      	sbcs	r0, r4
 8000974:	4303      	orrs	r3, r0
 8000976:	4652      	mov	r2, sl
 8000978:	000d      	movs	r5, r1
 800097a:	0034      	movs	r4, r6
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	e6dc      	b.n	800073a <__aeabi_fsub+0x7a>
 8000980:	4663      	mov	r3, ip
 8000982:	4652      	mov	r2, sl
 8000984:	1a9e      	subs	r6, r3, r2
 8000986:	0173      	lsls	r3, r6, #5
 8000988:	d417      	bmi.n	80009ba <__aeabi_fsub+0x2fa>
 800098a:	2e00      	cmp	r6, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_fsub+0x2d0>
 800098e:	e6d9      	b.n	8000744 <__aeabi_fsub+0x84>
 8000990:	2500      	movs	r5, #0
 8000992:	2000      	movs	r0, #0
 8000994:	2700      	movs	r7, #0
 8000996:	e6fa      	b.n	800078e <__aeabi_fsub+0xce>
 8000998:	4663      	mov	r3, ip
 800099a:	2b00      	cmp	r3, #0
 800099c:	d044      	beq.n	8000a28 <__aeabi_fsub+0x368>
 800099e:	3901      	subs	r1, #1
 80009a0:	2900      	cmp	r1, #0
 80009a2:	d04c      	beq.n	8000a3e <__aeabi_fsub+0x37e>
 80009a4:	2eff      	cmp	r6, #255	; 0xff
 80009a6:	d000      	beq.n	80009aa <__aeabi_fsub+0x2ea>
 80009a8:	e771      	b.n	800088e <__aeabi_fsub+0x1ce>
 80009aa:	4643      	mov	r3, r8
 80009ac:	e73e      	b.n	800082c <__aeabi_fsub+0x16c>
 80009ae:	2cff      	cmp	r4, #255	; 0xff
 80009b0:	d0c5      	beq.n	800093e <__aeabi_fsub+0x27e>
 80009b2:	4652      	mov	r2, sl
 80009b4:	4462      	add	r2, ip
 80009b6:	0853      	lsrs	r3, r2, #1
 80009b8:	e7b6      	b.n	8000928 <__aeabi_fsub+0x268>
 80009ba:	4663      	mov	r3, ip
 80009bc:	000d      	movs	r5, r1
 80009be:	1ad6      	subs	r6, r2, r3
 80009c0:	e6c0      	b.n	8000744 <__aeabi_fsub+0x84>
 80009c2:	4662      	mov	r2, ip
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d116      	bne.n	80009f6 <__aeabi_fsub+0x336>
 80009c8:	4653      	mov	r3, sl
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fsub+0x310>
 80009ce:	e72b      	b.n	8000828 <__aeabi_fsub+0x168>
 80009d0:	2780      	movs	r7, #128	; 0x80
 80009d2:	2500      	movs	r5, #0
 80009d4:	20ff      	movs	r0, #255	; 0xff
 80009d6:	03ff      	lsls	r7, r7, #15
 80009d8:	e6d9      	b.n	800078e <__aeabi_fsub+0xce>
 80009da:	000d      	movs	r5, r1
 80009dc:	4643      	mov	r3, r8
 80009de:	0034      	movs	r4, r6
 80009e0:	e7a6      	b.n	8000930 <__aeabi_fsub+0x270>
 80009e2:	4653      	mov	r3, sl
 80009e4:	4463      	add	r3, ip
 80009e6:	e6f7      	b.n	80007d8 <__aeabi_fsub+0x118>
 80009e8:	4663      	mov	r3, ip
 80009ea:	4652      	mov	r2, sl
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	e6a4      	b.n	800073a <__aeabi_fsub+0x7a>
 80009f0:	4662      	mov	r2, ip
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d0d9      	beq.n	80009aa <__aeabi_fsub+0x2ea>
 80009f6:	4652      	mov	r2, sl
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x33e>
 80009fc:	e716      	b.n	800082c <__aeabi_fsub+0x16c>
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	03d2      	lsls	r2, r2, #15
 8000a02:	4213      	tst	r3, r2
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x348>
 8000a06:	e711      	b.n	800082c <__aeabi_fsub+0x16c>
 8000a08:	4640      	mov	r0, r8
 8000a0a:	4210      	tst	r0, r2
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fsub+0x350>
 8000a0e:	e70d      	b.n	800082c <__aeabi_fsub+0x16c>
 8000a10:	e70a      	b.n	8000828 <__aeabi_fsub+0x168>
 8000a12:	4652      	mov	r2, sl
 8000a14:	000d      	movs	r5, r1
 8000a16:	0034      	movs	r4, r6
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	e68e      	b.n	800073a <__aeabi_fsub+0x7a>
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <__aeabi_fsub+0x374>
 8000a22:	000d      	movs	r5, r1
 8000a24:	4647      	mov	r7, r8
 8000a26:	e6b2      	b.n	800078e <__aeabi_fsub+0xce>
 8000a28:	4643      	mov	r3, r8
 8000a2a:	0034      	movs	r4, r6
 8000a2c:	e780      	b.n	8000930 <__aeabi_fsub+0x270>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x374>
 8000a32:	e779      	b.n	8000928 <__aeabi_fsub+0x268>
 8000a34:	2500      	movs	r5, #0
 8000a36:	2700      	movs	r7, #0
 8000a38:	e6a9      	b.n	800078e <__aeabi_fsub+0xce>
 8000a3a:	4647      	mov	r7, r8
 8000a3c:	e6a7      	b.n	800078e <__aeabi_fsub+0xce>
 8000a3e:	4653      	mov	r3, sl
 8000a40:	0034      	movs	r4, r6
 8000a42:	4463      	add	r3, ip
 8000a44:	e6c8      	b.n	80007d8 <__aeabi_fsub+0x118>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	7dffffff 	.word	0x7dffffff
 8000a4c:	fbffffff 	.word	0xfbffffff

08000a50 <__aeabi_f2iz>:
 8000a50:	0241      	lsls	r1, r0, #9
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0fc3      	lsrs	r3, r0, #31
 8000a56:	0a49      	lsrs	r1, r1, #9
 8000a58:	2000      	movs	r0, #0
 8000a5a:	0e12      	lsrs	r2, r2, #24
 8000a5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a5e:	d903      	bls.n	8000a68 <__aeabi_f2iz+0x18>
 8000a60:	2a9d      	cmp	r2, #157	; 0x9d
 8000a62:	d902      	bls.n	8000a6a <__aeabi_f2iz+0x1a>
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <__aeabi_f2iz+0x3c>)
 8000a66:	1898      	adds	r0, r3, r2
 8000a68:	4770      	bx	lr
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	0400      	lsls	r0, r0, #16
 8000a6e:	4301      	orrs	r1, r0
 8000a70:	2a95      	cmp	r2, #149	; 0x95
 8000a72:	dc07      	bgt.n	8000a84 <__aeabi_f2iz+0x34>
 8000a74:	2096      	movs	r0, #150	; 0x96
 8000a76:	1a82      	subs	r2, r0, r2
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	4248      	negs	r0, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f3      	bne.n	8000a68 <__aeabi_f2iz+0x18>
 8000a80:	0008      	movs	r0, r1
 8000a82:	e7f1      	b.n	8000a68 <__aeabi_f2iz+0x18>
 8000a84:	3a96      	subs	r2, #150	; 0x96
 8000a86:	4091      	lsls	r1, r2
 8000a88:	e7f7      	b.n	8000a7a <__aeabi_f2iz+0x2a>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	7fffffff 	.word	0x7fffffff

08000a90 <__aeabi_i2f>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d013      	beq.n	8000abe <__aeabi_i2f+0x2e>
 8000a96:	17c3      	asrs	r3, r0, #31
 8000a98:	18c5      	adds	r5, r0, r3
 8000a9a:	405d      	eors	r5, r3
 8000a9c:	0fc4      	lsrs	r4, r0, #31
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f000 f8b2 	bl	8000c08 <__clzsi2>
 8000aa4:	239e      	movs	r3, #158	; 0x9e
 8000aa6:	0001      	movs	r1, r0
 8000aa8:	1a1b      	subs	r3, r3, r0
 8000aaa:	2b96      	cmp	r3, #150	; 0x96
 8000aac:	dc0f      	bgt.n	8000ace <__aeabi_i2f+0x3e>
 8000aae:	2808      	cmp	r0, #8
 8000ab0:	dd01      	ble.n	8000ab6 <__aeabi_i2f+0x26>
 8000ab2:	3908      	subs	r1, #8
 8000ab4:	408d      	lsls	r5, r1
 8000ab6:	026d      	lsls	r5, r5, #9
 8000ab8:	0a6d      	lsrs	r5, r5, #9
 8000aba:	b2d8      	uxtb	r0, r3
 8000abc:	e002      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	05c0      	lsls	r0, r0, #23
 8000ac6:	4328      	orrs	r0, r5
 8000ac8:	07e4      	lsls	r4, r4, #31
 8000aca:	4320      	orrs	r0, r4
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	2b99      	cmp	r3, #153	; 0x99
 8000ad0:	dd0b      	ble.n	8000aea <__aeabi_i2f+0x5a>
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	002e      	movs	r6, r5
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	40d6      	lsrs	r6, r2
 8000ada:	0002      	movs	r2, r0
 8000adc:	321b      	adds	r2, #27
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	1e45      	subs	r5, r0, #1
 8000ae4:	41a8      	sbcs	r0, r5
 8000ae6:	0035      	movs	r5, r6
 8000ae8:	4305      	orrs	r5, r0
 8000aea:	2905      	cmp	r1, #5
 8000aec:	dd01      	ble.n	8000af2 <__aeabi_i2f+0x62>
 8000aee:	1f4a      	subs	r2, r1, #5
 8000af0:	4095      	lsls	r5, r2
 8000af2:	002a      	movs	r2, r5
 8000af4:	4e08      	ldr	r6, [pc, #32]	; (8000b18 <__aeabi_i2f+0x88>)
 8000af6:	4032      	ands	r2, r6
 8000af8:	0768      	lsls	r0, r5, #29
 8000afa:	d009      	beq.n	8000b10 <__aeabi_i2f+0x80>
 8000afc:	200f      	movs	r0, #15
 8000afe:	4028      	ands	r0, r5
 8000b00:	2804      	cmp	r0, #4
 8000b02:	d005      	beq.n	8000b10 <__aeabi_i2f+0x80>
 8000b04:	3204      	adds	r2, #4
 8000b06:	0150      	lsls	r0, r2, #5
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_i2f+0x80>
 8000b0a:	239f      	movs	r3, #159	; 0x9f
 8000b0c:	4032      	ands	r2, r6
 8000b0e:	1a5b      	subs	r3, r3, r1
 8000b10:	0192      	lsls	r2, r2, #6
 8000b12:	0a55      	lsrs	r5, r2, #9
 8000b14:	b2d8      	uxtb	r0, r3
 8000b16:	e7d5      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000b18:	fbffffff 	.word	0xfbffffff

08000b1c <__aeabi_ui2f>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	1e05      	subs	r5, r0, #0
 8000b20:	d00e      	beq.n	8000b40 <__aeabi_ui2f+0x24>
 8000b22:	f000 f871 	bl	8000c08 <__clzsi2>
 8000b26:	239e      	movs	r3, #158	; 0x9e
 8000b28:	0004      	movs	r4, r0
 8000b2a:	1a1b      	subs	r3, r3, r0
 8000b2c:	2b96      	cmp	r3, #150	; 0x96
 8000b2e:	dc0c      	bgt.n	8000b4a <__aeabi_ui2f+0x2e>
 8000b30:	2808      	cmp	r0, #8
 8000b32:	dd01      	ble.n	8000b38 <__aeabi_ui2f+0x1c>
 8000b34:	3c08      	subs	r4, #8
 8000b36:	40a5      	lsls	r5, r4
 8000b38:	026d      	lsls	r5, r5, #9
 8000b3a:	0a6d      	lsrs	r5, r5, #9
 8000b3c:	b2d8      	uxtb	r0, r3
 8000b3e:	e001      	b.n	8000b44 <__aeabi_ui2f+0x28>
 8000b40:	2000      	movs	r0, #0
 8000b42:	2500      	movs	r5, #0
 8000b44:	05c0      	lsls	r0, r0, #23
 8000b46:	4328      	orrs	r0, r5
 8000b48:	bd70      	pop	{r4, r5, r6, pc}
 8000b4a:	2b99      	cmp	r3, #153	; 0x99
 8000b4c:	dd09      	ble.n	8000b62 <__aeabi_ui2f+0x46>
 8000b4e:	0002      	movs	r2, r0
 8000b50:	0029      	movs	r1, r5
 8000b52:	321b      	adds	r2, #27
 8000b54:	4091      	lsls	r1, r2
 8000b56:	1e4a      	subs	r2, r1, #1
 8000b58:	4191      	sbcs	r1, r2
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	1a12      	subs	r2, r2, r0
 8000b5e:	40d5      	lsrs	r5, r2
 8000b60:	430d      	orrs	r5, r1
 8000b62:	2c05      	cmp	r4, #5
 8000b64:	dd01      	ble.n	8000b6a <__aeabi_ui2f+0x4e>
 8000b66:	1f62      	subs	r2, r4, #5
 8000b68:	4095      	lsls	r5, r2
 8000b6a:	0029      	movs	r1, r5
 8000b6c:	4e08      	ldr	r6, [pc, #32]	; (8000b90 <__aeabi_ui2f+0x74>)
 8000b6e:	4031      	ands	r1, r6
 8000b70:	076a      	lsls	r2, r5, #29
 8000b72:	d009      	beq.n	8000b88 <__aeabi_ui2f+0x6c>
 8000b74:	200f      	movs	r0, #15
 8000b76:	4028      	ands	r0, r5
 8000b78:	2804      	cmp	r0, #4
 8000b7a:	d005      	beq.n	8000b88 <__aeabi_ui2f+0x6c>
 8000b7c:	3104      	adds	r1, #4
 8000b7e:	014a      	lsls	r2, r1, #5
 8000b80:	d502      	bpl.n	8000b88 <__aeabi_ui2f+0x6c>
 8000b82:	239f      	movs	r3, #159	; 0x9f
 8000b84:	4031      	ands	r1, r6
 8000b86:	1b1b      	subs	r3, r3, r4
 8000b88:	0189      	lsls	r1, r1, #6
 8000b8a:	0a4d      	lsrs	r5, r1, #9
 8000b8c:	b2d8      	uxtb	r0, r3
 8000b8e:	e7d9      	b.n	8000b44 <__aeabi_ui2f+0x28>
 8000b90:	fbffffff 	.word	0xfbffffff

08000b94 <__aeabi_cfrcmple>:
 8000b94:	4684      	mov	ip, r0
 8000b96:	1c08      	adds	r0, r1, #0
 8000b98:	4661      	mov	r1, ip
 8000b9a:	e7ff      	b.n	8000b9c <__aeabi_cfcmpeq>

08000b9c <__aeabi_cfcmpeq>:
 8000b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b9e:	f000 f8c5 	bl	8000d2c <__lesf2>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d401      	bmi.n	8000baa <__aeabi_cfcmpeq+0xe>
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	42c8      	cmn	r0, r1
 8000baa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000bac <__aeabi_fcmpeq>:
 8000bac:	b510      	push	{r4, lr}
 8000bae:	f000 f849 	bl	8000c44 <__eqsf2>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	bd10      	pop	{r4, pc}

08000bb8 <__aeabi_fcmplt>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	f000 f8b7 	bl	8000d2c <__lesf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	db01      	blt.n	8000bc6 <__aeabi_fcmplt+0xe>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	bd10      	pop	{r4, pc}
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <__aeabi_fcmple>:
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	f000 f8ad 	bl	8000d2c <__lesf2>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	dd01      	ble.n	8000bda <__aeabi_fcmple+0xe>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	2001      	movs	r0, #1
 8000bdc:	bd10      	pop	{r4, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)

08000be0 <__aeabi_fcmpgt>:
 8000be0:	b510      	push	{r4, lr}
 8000be2:	f000 f857 	bl	8000c94 <__gesf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	dc01      	bgt.n	8000bee <__aeabi_fcmpgt+0xe>
 8000bea:	2000      	movs	r0, #0
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	2001      	movs	r0, #1
 8000bf0:	bd10      	pop	{r4, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)

08000bf4 <__aeabi_fcmpge>:
 8000bf4:	b510      	push	{r4, lr}
 8000bf6:	f000 f84d 	bl	8000c94 <__gesf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	da01      	bge.n	8000c02 <__aeabi_fcmpge+0xe>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	bd10      	pop	{r4, pc}
 8000c02:	2001      	movs	r0, #1
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)

08000c08 <__clzsi2>:
 8000c08:	211c      	movs	r1, #28
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d301      	bcc.n	8000c16 <__clzsi2+0xe>
 8000c12:	0c00      	lsrs	r0, r0, #16
 8000c14:	3910      	subs	r1, #16
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	d301      	bcc.n	8000c20 <__clzsi2+0x18>
 8000c1c:	0a00      	lsrs	r0, r0, #8
 8000c1e:	3908      	subs	r1, #8
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d301      	bcc.n	8000c2a <__clzsi2+0x22>
 8000c26:	0900      	lsrs	r0, r0, #4
 8000c28:	3904      	subs	r1, #4
 8000c2a:	a202      	add	r2, pc, #8	; (adr r2, 8000c34 <__clzsi2+0x2c>)
 8000c2c:	5c10      	ldrb	r0, [r2, r0]
 8000c2e:	1840      	adds	r0, r0, r1
 8000c30:	4770      	bx	lr
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	02020304 	.word	0x02020304
 8000c38:	01010101 	.word	0x01010101
	...

08000c44 <__eqsf2>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	0042      	lsls	r2, r0, #1
 8000c48:	024e      	lsls	r6, r1, #9
 8000c4a:	004c      	lsls	r4, r1, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	0a6d      	lsrs	r5, r5, #9
 8000c50:	0e12      	lsrs	r2, r2, #24
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a76      	lsrs	r6, r6, #9
 8000c56:	0e24      	lsrs	r4, r4, #24
 8000c58:	0fc9      	lsrs	r1, r1, #31
 8000c5a:	2aff      	cmp	r2, #255	; 0xff
 8000c5c:	d00f      	beq.n	8000c7e <__eqsf2+0x3a>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d011      	beq.n	8000c86 <__eqsf2+0x42>
 8000c62:	2001      	movs	r0, #1
 8000c64:	42a2      	cmp	r2, r4
 8000c66:	d000      	beq.n	8000c6a <__eqsf2+0x26>
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	42b5      	cmp	r5, r6
 8000c6c:	d1fc      	bne.n	8000c68 <__eqsf2+0x24>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d00d      	beq.n	8000c8e <__eqsf2+0x4a>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d1f8      	bne.n	8000c68 <__eqsf2+0x24>
 8000c76:	0028      	movs	r0, r5
 8000c78:	1e45      	subs	r5, r0, #1
 8000c7a:	41a8      	sbcs	r0, r5
 8000c7c:	e7f4      	b.n	8000c68 <__eqsf2+0x24>
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d1f1      	bne.n	8000c68 <__eqsf2+0x24>
 8000c84:	e7eb      	b.n	8000c5e <__eqsf2+0x1a>
 8000c86:	2001      	movs	r0, #1
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d1ed      	bne.n	8000c68 <__eqsf2+0x24>
 8000c8c:	e7e9      	b.n	8000c62 <__eqsf2+0x1e>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e7ea      	b.n	8000c68 <__eqsf2+0x24>
 8000c92:	46c0      	nop			; (mov r8, r8)

08000c94 <__gesf2>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0246      	lsls	r6, r0, #9
 8000c9a:	024d      	lsls	r5, r1, #9
 8000c9c:	004c      	lsls	r4, r1, #1
 8000c9e:	0fc3      	lsrs	r3, r0, #31
 8000ca0:	0a76      	lsrs	r6, r6, #9
 8000ca2:	0e12      	lsrs	r2, r2, #24
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc8      	lsrs	r0, r1, #31
 8000caa:	2aff      	cmp	r2, #255	; 0xff
 8000cac:	d01f      	beq.n	8000cee <__gesf2+0x5a>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d010      	beq.n	8000cd4 <__gesf2+0x40>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d11f      	bne.n	8000cf6 <__gesf2+0x62>
 8000cb6:	4271      	negs	r1, r6
 8000cb8:	4171      	adcs	r1, r6
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d101      	bne.n	8000cc2 <__gesf2+0x2e>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d01e      	beq.n	8000d00 <__gesf2+0x6c>
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d10e      	bne.n	8000ce4 <__gesf2+0x50>
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	d01e      	beq.n	8000d08 <__gesf2+0x74>
 8000cca:	2102      	movs	r1, #2
 8000ccc:	1e58      	subs	r0, r3, #1
 8000cce:	4008      	ands	r0, r1
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d126      	bne.n	8000d26 <__gesf2+0x92>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1f4      	bne.n	8000cc6 <__gesf2+0x32>
 8000cdc:	4271      	negs	r1, r6
 8000cde:	4171      	adcs	r1, r6
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <__gesf2+0x32>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d1f4      	bne.n	8000cd2 <__gesf2+0x3e>
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4240      	negs	r0, r0
 8000cec:	e7f1      	b.n	8000cd2 <__gesf2+0x3e>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d119      	bne.n	8000d26 <__gesf2+0x92>
 8000cf2:	2cff      	cmp	r4, #255	; 0xff
 8000cf4:	d0ee      	beq.n	8000cd4 <__gesf2+0x40>
 8000cf6:	2c00      	cmp	r4, #0
 8000cf8:	d1e5      	bne.n	8000cc6 <__gesf2+0x32>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d1e3      	bne.n	8000cc6 <__gesf2+0x32>
 8000cfe:	e7e4      	b.n	8000cca <__gesf2+0x36>
 8000d00:	2000      	movs	r0, #0
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e5      	beq.n	8000cd2 <__gesf2+0x3e>
 8000d06:	e7e0      	b.n	8000cca <__gesf2+0x36>
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	dc05      	bgt.n	8000d18 <__gesf2+0x84>
 8000d0c:	dbea      	blt.n	8000ce4 <__gesf2+0x50>
 8000d0e:	42ae      	cmp	r6, r5
 8000d10:	d802      	bhi.n	8000d18 <__gesf2+0x84>
 8000d12:	d3e7      	bcc.n	8000ce4 <__gesf2+0x50>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e7dc      	b.n	8000cd2 <__gesf2+0x3e>
 8000d18:	4241      	negs	r1, r0
 8000d1a:	4141      	adcs	r1, r0
 8000d1c:	4248      	negs	r0, r1
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4008      	ands	r0, r1
 8000d22:	3801      	subs	r0, #1
 8000d24:	e7d5      	b.n	8000cd2 <__gesf2+0x3e>
 8000d26:	2002      	movs	r0, #2
 8000d28:	4240      	negs	r0, r0
 8000d2a:	e7d2      	b.n	8000cd2 <__gesf2+0x3e>

08000d2c <__lesf2>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	0042      	lsls	r2, r0, #1
 8000d30:	0246      	lsls	r6, r0, #9
 8000d32:	024d      	lsls	r5, r1, #9
 8000d34:	004c      	lsls	r4, r1, #1
 8000d36:	0fc3      	lsrs	r3, r0, #31
 8000d38:	0a76      	lsrs	r6, r6, #9
 8000d3a:	0e12      	lsrs	r2, r2, #24
 8000d3c:	0a6d      	lsrs	r5, r5, #9
 8000d3e:	0e24      	lsrs	r4, r4, #24
 8000d40:	0fc8      	lsrs	r0, r1, #31
 8000d42:	2aff      	cmp	r2, #255	; 0xff
 8000d44:	d00d      	beq.n	8000d62 <__lesf2+0x36>
 8000d46:	2cff      	cmp	r4, #255	; 0xff
 8000d48:	d00f      	beq.n	8000d6a <__lesf2+0x3e>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d123      	bne.n	8000d96 <__lesf2+0x6a>
 8000d4e:	4271      	negs	r1, r6
 8000d50:	4171      	adcs	r1, r6
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d10f      	bne.n	8000d76 <__lesf2+0x4a>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d10d      	bne.n	8000d76 <__lesf2+0x4a>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d014      	beq.n	8000d8a <__lesf2+0x5e>
 8000d60:	e00d      	b.n	8000d7e <__lesf2+0x52>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d110      	bne.n	8000d88 <__lesf2+0x5c>
 8000d66:	2cff      	cmp	r4, #255	; 0xff
 8000d68:	d115      	bne.n	8000d96 <__lesf2+0x6a>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d10c      	bne.n	8000d88 <__lesf2+0x5c>
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d103      	bne.n	8000d7a <__lesf2+0x4e>
 8000d72:	4271      	negs	r1, r6
 8000d74:	4171      	adcs	r1, r6
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d108      	bne.n	8000d8c <__lesf2+0x60>
 8000d7a:	4283      	cmp	r3, r0
 8000d7c:	d010      	beq.n	8000da0 <__lesf2+0x74>
 8000d7e:	2102      	movs	r1, #2
 8000d80:	1e58      	subs	r0, r3, #1
 8000d82:	4008      	ands	r0, r1
 8000d84:	3801      	subs	r0, #1
 8000d86:	e000      	b.n	8000d8a <__lesf2+0x5e>
 8000d88:	2002      	movs	r0, #2
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d1fc      	bne.n	8000d8a <__lesf2+0x5e>
 8000d90:	2001      	movs	r0, #1
 8000d92:	4240      	negs	r0, r0
 8000d94:	e7f9      	b.n	8000d8a <__lesf2+0x5e>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d1ef      	bne.n	8000d7a <__lesf2+0x4e>
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d1ed      	bne.n	8000d7a <__lesf2+0x4e>
 8000d9e:	e7ee      	b.n	8000d7e <__lesf2+0x52>
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	dc05      	bgt.n	8000db0 <__lesf2+0x84>
 8000da4:	dbf2      	blt.n	8000d8c <__lesf2+0x60>
 8000da6:	42ae      	cmp	r6, r5
 8000da8:	d802      	bhi.n	8000db0 <__lesf2+0x84>
 8000daa:	d3ef      	bcc.n	8000d8c <__lesf2+0x60>
 8000dac:	2000      	movs	r0, #0
 8000dae:	e7ec      	b.n	8000d8a <__lesf2+0x5e>
 8000db0:	4241      	negs	r1, r0
 8000db2:	4141      	adcs	r1, r0
 8000db4:	4248      	negs	r0, r1
 8000db6:	2102      	movs	r1, #2
 8000db8:	4008      	ands	r0, r1
 8000dba:	3801      	subs	r0, #1
 8000dbc:	e7e5      	b.n	8000d8a <__lesf2+0x5e>
 8000dbe:	46c0      	nop			; (mov r8, r8)

08000dc0 <ReadWeigh>:
uint32_t Weight_Maopi=0;
int32_t Pre_Weight = 0;
int32_t Weight=0;
int Cnt = 0;

uint32_t ReadWeigh(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t i;

	HAL_GPIO_WritePin(DT, DT_Pin, GPIO_PIN_SET);
 8000dc6:	2390      	movs	r3, #144	; 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fbab 	bl	800252a <HAL_GPIO_WritePin>
	Delay_us(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 ff5b 	bl	8001c90 <Delay_us>
	HAL_GPIO_WritePin(SCK, SCK_Pin, GPIO_PIN_RESET);
 8000dda:	2390      	movs	r3, #144	; 0x90
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fba1 	bl	800252a <HAL_GPIO_WritePin>

	uint32_t value = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]

	while(HAL_GPIO_ReadPin(DT, DT_Pin));
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	2390      	movs	r3, #144	; 0x90
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 fb7b 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d1f7      	bne.n	8000dee <ReadWeigh+0x2e>
	
	for(i=0; i<24; i++){
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e027      	b.n	8000e56 <ReadWeigh+0x96>
		HAL_GPIO_WritePin(SCK, SCK_Pin, GPIO_PIN_SET);
 8000e06:	2390      	movs	r3, #144	; 0x90
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fb8b 	bl	800252a <HAL_GPIO_WritePin>
		value = value << 1;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	603b      	str	r3, [r7, #0]
		Delay_us(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 ff38 	bl	8001c90 <Delay_us>
		HAL_GPIO_WritePin(SCK, SCK_Pin, GPIO_PIN_RESET);
 8000e20:	2390      	movs	r3, #144	; 0x90
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fb7e 	bl	800252a <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(DT, DT_Pin) == GPIO_PIN_SET){
 8000e2e:	2390      	movs	r3, #144	; 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fb5b 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d102      	bne.n	8000e46 <ReadWeigh+0x86>
			value++;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	603b      	str	r3, [r7, #0]
		}
		Delay_us(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 ff22 	bl	8001c90 <Delay_us>
	for(i=0; i<24; i++){
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	3201      	adds	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b17      	cmp	r3, #23
 8000e5c:	d9d3      	bls.n	8000e06 <ReadWeigh+0x46>
	}

	HAL_GPIO_WritePin(SCK, SCK_Pin, GPIO_PIN_SET);
 8000e5e:	2390      	movs	r3, #144	; 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fb5f 	bl	800252a <HAL_GPIO_WritePin>
	value = value^0x800000;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	0412      	lsls	r2, r2, #16
 8000e72:	4053      	eors	r3, r2
 8000e74:	603b      	str	r3, [r7, #0]
	Delay_us(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 ff0a 	bl	8001c90 <Delay_us>
	HAL_GPIO_WritePin(SCK, SCK_Pin,GPIO_PIN_RESET);
 8000e7c:	2390      	movs	r3, #144	; 0x90
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fb50 	bl	800252a <HAL_GPIO_WritePin>
	return value;
 8000e8a:	683b      	ldr	r3, [r7, #0]
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <Get_Maopi>:

void Get_Maopi(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	Weight_Maopi = ReadWeigh();
 8000e98:	f7ff ff92 	bl	8000dc0 <ReadWeigh>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <Get_Maopi+0x14>)
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000a8 	.word	0x200000a8

08000eac <Get_Weight>:


void Get_Weight(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HX711_Buffer = ReadWeigh();
 8000eb0:	f7ff ff86 	bl	8000dc0 <ReadWeigh>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <Get_Weight+0x60>)
 8000eb8:	601a      	str	r2, [r3, #0]
	if(HX711_Buffer > Weight_Maopi){
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <Get_Weight+0x60>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <Get_Weight+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d91e      	bls.n	8000f04 <Get_Weight+0x58>
		Weight = HX711_Buffer;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <Get_Weight+0x60>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <Get_Weight+0x68>)
 8000ece:	601a      	str	r2, [r3, #0]
		Weight = Weight - Weight_Maopi;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <Get_Weight+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <Get_Weight+0x64>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	001a      	movs	r2, r3
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <Get_Weight+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
		Weight = (int32_t)((float)Weight/GapValue);
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <Get_Weight+0x68>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff fdd2 	bl	8000a90 <__aeabi_i2f>
 8000eec:	1c03      	adds	r3, r0, #0
 8000eee:	490a      	ldr	r1, [pc, #40]	; (8000f18 <Get_Weight+0x6c>)
 8000ef0:	1c18      	adds	r0, r3, #0
 8000ef2:	f7ff f9bf 	bl	8000274 <__aeabi_fdiv>
 8000ef6:	1c03      	adds	r3, r0, #0
 8000ef8:	1c18      	adds	r0, r3, #0
 8000efa:	f7ff fda9 	bl	8000a50 <__aeabi_f2iz>
 8000efe:	0002      	movs	r2, r0
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <Get_Weight+0x68>)
 8000f02:	601a      	str	r2, [r3, #0]
	}
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	200000cc 	.word	0x200000cc
 8000f10:	200000a8 	.word	0x200000a8
 8000f14:	200000b0 	.word	0x200000b0
 8000f18:	43550000 	.word	0x43550000

08000f1c <Weight_Init>:

void Weight_Init(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	Get_Maopi();
 8000f20:	f7ff ffb8 	bl	8000e94 <Get_Maopi>
	HAL_Delay(1000);
 8000f24:	23fa      	movs	r3, #250	; 0xfa
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fff1 	bl	8001f10 <HAL_Delay>
	Get_Maopi();
 8000f2e:	f7ff ffb1 	bl	8000e94 <Get_Maopi>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <Weight_Update>:
void Weight_Update(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	Pre_Weight = Weight;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <Weight_Update+0x20>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <Weight_Update+0x24>)
 8000f42:	601a      	str	r2, [r3, #0]
	mcu_dp_value_update(DPID_WEIGHT,(unsigned long)Weight);
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <Weight_Update+0x20>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0019      	movs	r1, r3
 8000f4a:	2011      	movs	r0, #17
 8000f4c:	f003 ffb0 	bl	8004eb0 <mcu_dp_value_update>
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	200000b0 	.word	0x200000b0
 8000f5c:	200000ac 	.word	0x200000ac

08000f60 <My_abs>:
int My_abs(int k){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	return k>=0? k:-k;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	17da      	asrs	r2, r3, #31
 8000f6c:	189b      	adds	r3, r3, r2
 8000f6e:	4053      	eors	r3, r2
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Weight_Handle>:
void Weight_Handle(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(My_abs((int)(Weight-Pre_Weight))>=10){
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <Weight_Handle+0x48>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <Weight_Handle+0x4c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff ffea 	bl	8000f60 <My_abs>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	2b09      	cmp	r3, #9
 8000f90:	dd05      	ble.n	8000f9e <Weight_Handle+0x26>
		Weight_Update();
 8000f92:	f7ff ffd1 	bl	8000f38 <Weight_Update>
		Cnt = 0;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <Weight_Handle+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
		if(Cnt>=Cnt_Limit){
			Weight_Update();
			Cnt = 0;
		}
	}
}
 8000f9c:	e00d      	b.n	8000fba <Weight_Handle+0x42>
		Cnt++;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <Weight_Handle+0x50>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <Weight_Handle+0x50>)
 8000fa6:	601a      	str	r2, [r3, #0]
		if(Cnt>=Cnt_Limit){
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <Weight_Handle+0x50>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2bc7      	cmp	r3, #199	; 0xc7
 8000fae:	dd04      	ble.n	8000fba <Weight_Handle+0x42>
			Weight_Update();
 8000fb0:	f7ff ffc2 	bl	8000f38 <Weight_Update>
			Cnt = 0;
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <Weight_Handle+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000b0 	.word	0x200000b0
 8000fc4:	200000ac 	.word	0x200000ac
 8000fc8:	200000b4 	.word	0x200000b4

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	; 0x2c
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	2414      	movs	r4, #20
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2314      	movs	r3, #20
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f004 ff61 	bl	8005ea4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <MX_GPIO_Init+0x118>)
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <MX_GPIO_Init+0x118>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0309      	lsls	r1, r1, #12
 8000fec:	430a      	orrs	r2, r1
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_GPIO_Init+0x118>)
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	031b      	lsls	r3, r3, #12
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <MX_GPIO_Init+0x118>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <MX_GPIO_Init+0x118>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	03c9      	lsls	r1, r1, #15
 8001008:	430a      	orrs	r2, r1
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <MX_GPIO_Init+0x118>)
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	03db      	lsls	r3, r3, #15
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <MX_GPIO_Init+0x118>)
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <MX_GPIO_Init+0x118>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0289      	lsls	r1, r1, #10
 8001024:	430a      	orrs	r2, r1
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_GPIO_Init+0x118>)
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_GPIO_Init+0x118>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <MX_GPIO_Init+0x118>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	02c9      	lsls	r1, r1, #11
 8001040:	430a      	orrs	r2, r1
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_GPIO_Init+0x118>)
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	4013      	ands	r3, r2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001052:	2390      	movs	r3, #144	; 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2200      	movs	r2, #0
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0018      	movs	r0, r3
 800105c:	f001 fa65 	bl	800252a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <MX_GPIO_Init+0x11c>)
 8001066:	2201      	movs	r2, #1
 8001068:	0019      	movs	r1, r3
 800106a:	f001 fa5e 	bl	800252a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DT_Pin;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DT_GPIO_Port, &GPIO_InitStruct);
 8001080:	193a      	adds	r2, r7, r4
 8001082:	2390      	movs	r3, #144	; 0x90
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f001 f8c1 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCK_Pin;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2201      	movs	r2, #1
 8001098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2201      	movs	r2, #1
 80010a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80010a6:	193a      	adds	r2, r7, r4
 80010a8:	2390      	movs	r3, #144	; 0x90
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f8ae 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010b4:	0021      	movs	r1, r4
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	01d2      	lsls	r2, r2, #7
 80010bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2201      	movs	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x11c>)
 80010d4:	0019      	movs	r1, r3
 80010d6:	0010      	movs	r0, r2
 80010d8:	f001 f89a 	bl	8002210 <HAL_GPIO_Init>

}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b00b      	add	sp, #44	; 0x2c
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_I2C1_Init+0x80>)
 80010f2:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <MX_I2C1_Init+0x84>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_I2C1_Init+0x80>)
 80010f8:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <MX_I2C1_Init+0x88>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C1_Init+0x80>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C1_Init+0x80>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C1_Init+0x80>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_I2C1_Init+0x80>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C1_Init+0x80>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_I2C1_Init+0x80>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C1_Init+0x80>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C1_Init+0x80>)
 8001128:	0018      	movs	r0, r3
 800112a:	f001 fa1b 	bl	8002564 <HAL_I2C_Init>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 f9af 	bl	8001494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_I2C1_Init+0x80>)
 8001138:	2100      	movs	r1, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f002 f82e 	bl	800319c <HAL_I2CEx_ConfigAnalogFilter>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 f9a6 	bl	8001494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_I2C1_Init+0x80>)
 800114a:	2100      	movs	r1, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f002 f871 	bl	8003234 <HAL_I2CEx_ConfigDigitalFilter>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 f99d 	bl	8001494 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_I2C1_Init+0x8c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_I2C1_Init+0x8c>)
 8001160:	4906      	ldr	r1, [pc, #24]	; (800117c <MX_I2C1_Init+0x90>)
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000d0 	.word	0x200000d0
 8001170:	40005400 	.word	0x40005400
 8001174:	20000209 	.word	0x20000209
 8001178:	40010000 	.word	0x40010000
 800117c:	aaaa0100 	.word	0xaaaa0100

08001180 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	2414      	movs	r4, #20
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	2314      	movs	r3, #20
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f004 fe86 	bl	8005ea4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_I2C_MspInit+0x90>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d131      	bne.n	8001206 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	02c9      	lsls	r1, r1, #11
 80011ac:	430a      	orrs	r2, r1
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	02db      	lsls	r3, r3, #11
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011be:	0021      	movs	r1, r4
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	22c0      	movs	r2, #192	; 0xc0
 80011c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2212      	movs	r2, #18
 80011ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2201      	movs	r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2203      	movs	r2, #3
 80011d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2201      	movs	r2, #1
 80011dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_I2C_MspInit+0x98>)
 80011e2:	0019      	movs	r1, r3
 80011e4:	0010      	movs	r0, r2
 80011e6:	f001 f813 	bl	8002210 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0389      	lsls	r1, r1, #14
 80011f4:	430a      	orrs	r2, r1
 80011f6:	61da      	str	r2, [r3, #28]
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_I2C_MspInit+0x94>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	039b      	lsls	r3, r3, #14
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b00b      	add	sp, #44	; 0x2c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40005400 	.word	0x40005400
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b093      	sub	sp, #76	; 0x4c
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t recv_dat[6] = {0};
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	809a      	strh	r2, [r3, #4]
	float temperature = 0.0;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
	float humidity = 0.0;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
	char ch[50] = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	3304      	adds	r3, #4
 800123e:	222e      	movs	r2, #46	; 0x2e
 8001240:	2100      	movs	r1, #0
 8001242:	0018      	movs	r0, r3
 8001244:	f004 fe2e 	bl	8005ea4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fdfe 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f8be 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f7ff febc 	bl	8000fcc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001254:	f7ff ff4a 	bl	80010ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001258:	f000 fd46 	bl	8001ce8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800125c:	f000 fcd8 	bl	8001c10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  wifi_protocol_init();
 8001260:	f004 f820 	bl	80052a4 <wifi_protocol_init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <main+0x190>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <main+0x190>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2120      	movs	r1, #32
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

	OLED_Init();
 8001274:	f000 f974 	bl	8001560 <OLED_Init>
	OLED_Display_On();
 8001278:	f000 f9af 	bl	80015da <OLED_Display_On>
	OLED_Clear();
 800127c:	f000 f97a 	bl	8001574 <OLED_Clear>
  Weight_Init();
 8001280:	f7ff fe4c 	bl	8000f1c <Weight_Init>
  
	SHT30_Reset();
 8001284:	f000 fb22 	bl	80018cc <SHT30_Reset>

	if(SHT30_Init() == HAL_OK){
 8001288:	f000 fb2e 	bl	80018e8 <SHT30_Init>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d106      	bne.n	800129e <main+0x82>
	  OLED_ShowString(0, 0, "sht30 init ok", sizeof("sht30 init ok"));
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <main+0x194>)
 8001292:	230e      	movs	r3, #14
 8001294:	2100      	movs	r1, #0
 8001296:	2000      	movs	r0, #0
 8001298:	f000 fa80 	bl	800179c <OLED_ShowString>
 800129c:	e005      	b.n	80012aa <main+0x8e>
	}else{
	  OLED_ShowString(0, 0, "sht30 init fail", sizeof("sht30 init fail"));
 800129e:	4a45      	ldr	r2, [pc, #276]	; (80013b4 <main+0x198>)
 80012a0:	2310      	movs	r3, #16
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 fa79 	bl	800179c <OLED_ShowString>
	}
	OLED_Clear();
 80012aa:	f000 f963 	bl	8001574 <OLED_Clear>
	mcu_dp_bool_update(DPID_LIGHT,1);
 80012ae:	2101      	movs	r1, #1
 80012b0:	2013      	movs	r0, #19
 80012b2:	f003 fd9b 	bl	8004dec <mcu_dp_bool_update>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  wifi_uart_service();
 80012b6:	f003 ff27 	bl	8005108 <wifi_uart_service>
	  if (SHT30_Read_Dat(recv_dat) == HAL_OK) {
 80012ba:	2440      	movs	r4, #64	; 0x40
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fb1e 	bl	8001900 <SHT30_Read_Dat>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d136      	bne.n	8001336 <main+0x11a>
	 	 if (SHT30_Dat_To_Float(recv_dat, &temperature, &humidity) == 0) {
 80012c8:	2338      	movs	r3, #56	; 0x38
 80012ca:	18fa      	adds	r2, r7, r3
 80012cc:	233c      	movs	r3, #60	; 0x3c
 80012ce:	18f9      	adds	r1, r7, r3
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fb8a 	bl	80019ec <SHT30_Dat_To_Float>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d11a      	bne.n	8001312 <main+0xf6>
	 		 sprintf(ch, "temperature = %d, humidity = %d", (uint32_t) temperature, (uint32_t) humidity);
 80012dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012de:	1c18      	adds	r0, r3, #0
 80012e0:	f7fe ffb0 	bl	8000244 <__aeabi_f2uiz>
 80012e4:	0004      	movs	r4, r0
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	1c18      	adds	r0, r3, #0
 80012ea:	f7fe ffab 	bl	8000244 <__aeabi_f2uiz>
 80012ee:	0003      	movs	r3, r0
 80012f0:	4931      	ldr	r1, [pc, #196]	; (80013b8 <main+0x19c>)
 80012f2:	1d38      	adds	r0, r7, #4
 80012f4:	0022      	movs	r2, r4
 80012f6:	f004 fddd 	bl	8005eb4 <siprintf>
	 		 OLED_ShowString(0, 0, ch, strlen(ch));
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7fe ff03 	bl	8000108 <strlen>
 8001302:	0003      	movs	r3, r0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	1d3a      	adds	r2, r7, #4
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fa46 	bl	800179c <OLED_ShowString>
 8001310:	e022      	b.n	8001358 <main+0x13c>
	 	 } else {
	 		 sprintf(ch, "crc check fail.");
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <main+0x1a0>)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f004 fdcb 	bl	8005eb4 <siprintf>
	 		 OLED_ShowString(0, 0, ch, strlen(ch));
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	0018      	movs	r0, r3
 8001322:	f7fe fef1 	bl	8000108 <strlen>
 8001326:	0003      	movs	r3, r0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	1d3a      	adds	r2, r7, #4
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fa34 	bl	800179c <OLED_ShowString>
 8001334:	e010      	b.n	8001358 <main+0x13c>
	 	 }
	  } else {
	 	 sprintf(ch, "read data from sht30 fail.");
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <main+0x1a4>)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f004 fdb9 	bl	8005eb4 <siprintf>
	 	 OLED_ShowString(0, 0, ch, strlen(ch));
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	0018      	movs	r0, r3
 8001346:	f7fe fedf 	bl	8000108 <strlen>
 800134a:	0003      	movs	r3, r0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	1d3a      	adds	r2, r7, #4
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f000 fa22 	bl	800179c <OLED_ShowString>
	  }
    HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f000 fdd9 	bl	8001f10 <HAL_Delay>
    OLED_Update(temperature,humidity);
 800135e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001362:	1c11      	adds	r1, r2, #0
 8001364:	1c18      	adds	r0, r3, #0
 8001366:	f000 fa61 	bl	800182c <OLED_Update>
    HAL_Delay(60);
 800136a:	203c      	movs	r0, #60	; 0x3c
 800136c:	f000 fdd0 	bl	8001f10 <HAL_Delay>
     Get_Weight();
 8001370:	f7ff fd9c 	bl	8000eac <Get_Weight>
     HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fdcb 	bl	8001f10 <HAL_Delay>
     sprintf(ch,"Weight = %3d(g)",(int)Weight);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <main+0x1a8>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4912      	ldr	r1, [pc, #72]	; (80013c8 <main+0x1ac>)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	0018      	movs	r0, r3
 8001384:	f004 fd96 	bl	8005eb4 <siprintf>
     //OLED_Clearrow(0);
     OLED_ShowString(3, 0, ch, strlen(ch));
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe febc 	bl	8000108 <strlen>
 8001390:	0003      	movs	r3, r0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	1d3a      	adds	r2, r7, #4
 8001396:	2100      	movs	r1, #0
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f9ff 	bl	800179c <OLED_ShowString>
     HAL_Delay(50);
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f000 fdb6 	bl	8001f10 <HAL_Delay>
     Weight_Handle();
 80013a4:	f7ff fde8 	bl	8000f78 <Weight_Handle>
  {
 80013a8:	e785      	b.n	80012b6 <main+0x9a>
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20000164 	.word	0x20000164
 80013b0:	08006718 	.word	0x08006718
 80013b4:	08006728 	.word	0x08006728
 80013b8:	08006738 	.word	0x08006738
 80013bc:	08006758 	.word	0x08006758
 80013c0:	08006768 	.word	0x08006768
 80013c4:	200000b0 	.word	0x200000b0
 80013c8:	08006784 	.word	0x08006784

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b095      	sub	sp, #84	; 0x54
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	2420      	movs	r4, #32
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	0018      	movs	r0, r3
 80013d8:	2330      	movs	r3, #48	; 0x30
 80013da:	001a      	movs	r2, r3
 80013dc:	2100      	movs	r1, #0
 80013de:	f004 fd61 	bl	8005ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e2:	2310      	movs	r3, #16
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	0018      	movs	r0, r3
 80013e8:	2310      	movs	r3, #16
 80013ea:	001a      	movs	r2, r3
 80013ec:	2100      	movs	r1, #0
 80013ee:	f004 fd59 	bl	8005ea4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f2:	003b      	movs	r3, r7
 80013f4:	0018      	movs	r0, r3
 80013f6:	2310      	movs	r3, #16
 80013f8:	001a      	movs	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f004 fd52 	bl	8005ea4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001400:	0021      	movs	r1, r4
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2201      	movs	r2, #1
 800140c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2210      	movs	r2, #16
 8001412:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2202      	movs	r2, #2
 8001418:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	22a0      	movs	r2, #160	; 0xa0
 8001424:	0392      	lsls	r2, r2, #14
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	187b      	adds	r3, r7, r1
 8001430:	0018      	movs	r0, r3
 8001432:	f001 ff4b 	bl	80032cc <HAL_RCC_OscConfig>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800143a:	f000 f82b 	bl	8001494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143e:	2110      	movs	r1, #16
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2207      	movs	r2, #7
 8001444:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2202      	movs	r2, #2
 800144a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2101      	movs	r1, #1
 800145c:	0018      	movs	r0, r3
 800145e:	f002 fa4f 	bl	8003900 <HAL_RCC_ClockConfig>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001466:	f000 f815 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800146a:	003b      	movs	r3, r7
 800146c:	2221      	movs	r2, #33	; 0x21
 800146e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001470:	003b      	movs	r3, r7
 8001472:	2201      	movs	r2, #1
 8001474:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001476:	003b      	movs	r3, r7
 8001478:	2210      	movs	r2, #16
 800147a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	003b      	movs	r3, r7
 800147e:	0018      	movs	r0, r3
 8001480:	f002 fb90 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001488:	f000 f804 	bl	8001494 <Error_Handler>
  }
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b015      	add	sp, #84	; 0x54
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <WriteCmd>:
					
0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,
					
0xD8, 0x30, 0x8D, 0x14, 0xAF};
void WriteCmd()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
	for(i=0; i<27; i++){
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e014      	b.n	80014de <WriteCmd+0x3e>
		HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <WriteCmd+0x50>)
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <WriteCmd+0x54>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	0052      	lsls	r2, r2, #1
 80014c2:	9202      	str	r2, [sp, #8]
 80014c4:	2201      	movs	r2, #1
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	2200      	movs	r2, #0
 80014ce:	2178      	movs	r1, #120	; 0x78
 80014d0:	f001 faee 	bl	8002ab0 <HAL_I2C_Mem_Write>
	for(i=0; i<27; i++){
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	3201      	adds	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b1a      	cmp	r3, #26
 80014e4:	d9e6      	bls.n	80014b4 <WriteCmd+0x14>
	}
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	200000d0 	.word	0x200000d0

080014f8 <OLED_WR_CMD>:
//向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	0002      	movs	r2, r0
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <OLED_WR_CMD+0x30>)
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	2200      	movs	r2, #0
 8001518:	2178      	movs	r1, #120	; 0x78
 800151a:	f001 fac9 	bl	8002ab0 <HAL_I2C_Mem_Write>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	200000d0 	.word	0x200000d0

0800152c <OLED_WR_DATA>:
//向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af04      	add	r7, sp, #16
 8001532:	0002      	movs	r2, r0
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <OLED_WR_DATA+0x30>)
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	2178      	movs	r1, #120	; 0x78
 800154e:	f001 faaf 	bl	8002ab0 <HAL_I2C_Mem_Write>
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	200000d0 	.word	0x200000d0

08001560 <OLED_Init>:
//初始化oled屏幕
void OLED_Init(void)
{ 	
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8001564:	20c8      	movs	r0, #200	; 0xc8
 8001566:	f000 fcd3 	bl	8001f10 <HAL_Delay>
	WriteCmd();
 800156a:	f7ff ff99 	bl	80014a0 <WriteCmd>
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <OLED_Clear>:
//清屏size12 size16要清两行，其他函数有类似情况
void OLED_Clear()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e022      	b.n	80015c8 <OLED_Clear+0x54>
	{  
		OLED_WR_CMD(0xb0+i);
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3b50      	subs	r3, #80	; 0x50
 8001588:	b2db      	uxtb	r3, r3
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff ffb4 	bl	80014f8 <OLED_WR_CMD>
		OLED_WR_CMD (0x00); 
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff ffb1 	bl	80014f8 <OLED_WR_CMD>
		OLED_WR_CMD (0x10); 
 8001596:	2010      	movs	r0, #16
 8001598:	f7ff ffae 	bl	80014f8 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <OLED_Clear+0x40>
			OLED_WR_DATA(0);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff ffc1 	bl	800152c <OLED_WR_DATA>
		for(n=0;n<128;n++)
 80015aa:	1dbb      	adds	r3, r7, #6
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	1dbb      	adds	r3, r7, #6
 80015b0:	3201      	adds	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	1dbb      	adds	r3, r7, #6
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	daf2      	bge.n	80015a4 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	3201      	adds	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d9d8      	bls.n	8001582 <OLED_Clear+0xe>
	} 
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}

080015da <OLED_Display_On>:
		for(n=0;n<128;n++)
			OLED_WR_DATA(0);
}
//开启OLED显示    
void OLED_Display_On(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
	OLED_WR_CMD(0X8D);  //SET DCDC命令
 80015de:	208d      	movs	r0, #141	; 0x8d
 80015e0:	f7ff ff8a 	bl	80014f8 <OLED_WR_CMD>
	OLED_WR_CMD(0X14);  //DCDC ON
 80015e4:	2014      	movs	r0, #20
 80015e6:	f7ff ff87 	bl	80014f8 <OLED_WR_CMD>
	OLED_WR_CMD(0XAF);  //DISPLAY ON
 80015ea:	20af      	movs	r0, #175	; 0xaf
 80015ec:	f7ff ff84 	bl	80014f8 <OLED_WR_CMD>
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <OLED_Set_Pos>:
	OLED_WR_CMD(0X8D);  //SET DCDC命令
	OLED_WR_CMD(0X10);  //DCDC OFF
	OLED_WR_CMD(0XAE);  //DISPLAY OFF
}		   			 
void OLED_Set_Pos(uint8_t x, uint8_t y) 
{ 	
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	0002      	movs	r2, r0
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	1dbb      	adds	r3, r7, #6
 8001604:	1c0a      	adds	r2, r1, #0
 8001606:	701a      	strb	r2, [r3, #0]
	OLED_WR_CMD(0xb0+y);
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3b50      	subs	r3, #80	; 0x50
 800160e:	b2db      	uxtb	r3, r3
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ff71 	bl	80014f8 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10);
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2210      	movs	r2, #16
 8001620:	4313      	orrs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ff67 	bl	80014f8 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	220f      	movs	r2, #15
 8001630:	4013      	ands	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <OLED_WR_CMD>
} 
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示				 
//size:选择字体 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	0005      	movs	r5, r0
 800164c:	000c      	movs	r4, r1
 800164e:	0010      	movs	r0, r2
 8001650:	0019      	movs	r1, r3
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	1c2a      	adds	r2, r5, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	1dbb      	adds	r3, r7, #6
 800165a:	1c22      	adds	r2, r4, #0
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	1d7b      	adds	r3, r7, #5
 8001660:	1c02      	adds	r2, r0, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	1c0a      	adds	r2, r1, #0
 8001668:	701a      	strb	r2, [r3, #0]
	unsigned char c=0,i=0;	
 800166a:	210e      	movs	r1, #14
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	230f      	movs	r3, #15
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		c=chr-' ';//得到偏移后的值			
 800167a:	187b      	adds	r3, r7, r1
 800167c:	1d7a      	adds	r2, r7, #5
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	3a20      	subs	r2, #32
 8001682:	701a      	strb	r2, [r3, #0]
		if(x>128-1){x=0;y=y+2;}
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	da07      	bge.n	800169e <OLED_ShowChar+0x5a>
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	1dba      	adds	r2, r7, #6
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	3202      	adds	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
		if(Char_Size ==16)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d14a      	bne.n	800173c <OLED_ShowChar+0xf8>
			{
			OLED_Set_Pos(x,y);	
 80016a6:	1dbb      	adds	r3, r7, #6
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ffa0 	bl	80015f6 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80016b6:	230f      	movs	r3, #15
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e011      	b.n	80016e4 <OLED_ShowChar+0xa0>
			OLED_WR_DATA(F8x16[c*16+i]);
 80016c0:	230e      	movs	r3, #14
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	011a      	lsls	r2, r3, #4
 80016c8:	240f      	movs	r4, #15
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <OLED_ShowChar+0x150>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ff29 	bl	800152c <OLED_WR_DATA>
			for(i=0;i<8;i++)
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	3201      	adds	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	240f      	movs	r4, #15
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d9e8      	bls.n	80016c0 <OLED_ShowChar+0x7c>
			OLED_Set_Pos(x,y+1);
 80016ee:	1dbb      	adds	r3, r7, #6
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff7a 	bl	80015f6 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e012      	b.n	8001730 <OLED_ShowChar+0xec>
			OLED_WR_DATA(F8x16[c*16+i+8]);
 800170a:	230e      	movs	r3, #14
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	011a      	lsls	r2, r3, #4
 8001712:	240f      	movs	r4, #15
 8001714:	193b      	adds	r3, r7, r4
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	3308      	adds	r3, #8
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <OLED_ShowChar+0x150>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff ff03 	bl	800152c <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8001726:	193b      	adds	r3, r7, r4
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	193b      	adds	r3, r7, r4
 800172c:	3201      	adds	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	230f      	movs	r3, #15
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d9e7      	bls.n	800170a <OLED_ShowChar+0xc6>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_DATA(F6x8[c][i]);
				
			}
}
 800173a:	e026      	b.n	800178a <OLED_ShowChar+0x146>
				OLED_Set_Pos(x,y);
 800173c:	1dbb      	adds	r3, r7, #6
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff55 	bl	80015f6 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e014      	b.n	8001780 <OLED_ShowChar+0x13c>
				OLED_WR_DATA(F6x8[c][i]);
 8001756:	230e      	movs	r3, #14
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	240f      	movs	r4, #15
 800175e:	193b      	adds	r3, r7, r4
 8001760:	7819      	ldrb	r1, [r3, #0]
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <OLED_ShowChar+0x154>)
 8001764:	0013      	movs	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	189b      	adds	r3, r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	18c3      	adds	r3, r0, r3
 800176e:	5c5b      	ldrb	r3, [r3, r1]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fedb 	bl	800152c <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8001776:	193b      	adds	r3, r7, r4
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	193b      	adds	r3, r7, r4
 800177c:	3201      	adds	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d9e5      	bls.n	8001756 <OLED_ShowChar+0x112>
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b004      	add	sp, #16
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	08006ad8 	.word	0x08006ad8
 8001798:	080068b0 	.word	0x080068b0

0800179c <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//显示一个字符号串
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0004      	movs	r4, r0
 80017a4:	0008      	movs	r0, r1
 80017a6:	603a      	str	r2, [r7, #0]
 80017a8:	0019      	movs	r1, r3
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	1c22      	adds	r2, r4, #0
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	1c02      	adds	r2, r0, #0
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	1d7b      	adds	r3, r7, #5
 80017b8:	1c0a      	adds	r2, r1, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	unsigned char j=0;
 80017bc:	230f      	movs	r3, #15
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 80017c4:	e025      	b.n	8001812 <OLED_ShowString+0x76>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	1d7b      	adds	r3, r7, #5
 80017d4:	781c      	ldrb	r4, [r3, #0]
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	7819      	ldrb	r1, [r3, #0]
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	7818      	ldrb	r0, [r3, #0]
 80017de:	0023      	movs	r3, r4
 80017e0:	f7ff ff30 	bl	8001644 <OLED_ShowChar>
			x+=8;
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	1dfa      	adds	r2, r7, #7
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	3208      	adds	r2, #8
 80017ec:	701a      	strb	r2, [r3, #0]
		if(x>120){x=0;y+=2;}
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b78      	cmp	r3, #120	; 0x78
 80017f4:	d907      	bls.n	8001806 <OLED_ShowString+0x6a>
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	1dba      	adds	r2, r7, #6
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	3202      	adds	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
			j++;
 8001806:	210f      	movs	r1, #15
 8001808:	187b      	adds	r3, r7, r1
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	187b      	adds	r3, r7, r1
 800180e:	3201      	adds	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
	while (chr[j]!='\0')
 8001812:	230f      	movs	r3, #15
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1d1      	bne.n	80017c6 <OLED_ShowString+0x2a>
	}
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b005      	add	sp, #20
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <OLED_Update>:
				OLED_WR_DATA(Hzk[2*no+1][t]);
				adder+=1;
      }					
}

void OLED_Update(float temperature, float humidity){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	if(count >= Limit){
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <OLED_Update+0x50>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2bc7      	cmp	r3, #199	; 0xc7
 800183c:	d914      	bls.n	8001868 <OLED_Update+0x3c>
		mcu_dp_value_update(DPID_TEMPERATURE, (uint32_t) (temperature * 10));
 800183e:	4910      	ldr	r1, [pc, #64]	; (8001880 <OLED_Update+0x54>)
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7fe fe23 	bl	800048c <__aeabi_fmul>
 8001846:	1c03      	adds	r3, r0, #0
 8001848:	1c18      	adds	r0, r3, #0
 800184a:	f7fe fcfb 	bl	8000244 <__aeabi_f2uiz>
 800184e:	0003      	movs	r3, r0
 8001850:	0019      	movs	r1, r3
 8001852:	2065      	movs	r0, #101	; 0x65
 8001854:	f003 fb2c 	bl	8004eb0 <mcu_dp_value_update>
    	mcu_dp_value_update(DPID_HUMIDITY, (uint32_t) (humidity));
 8001858:	6838      	ldr	r0, [r7, #0]
 800185a:	f7fe fcf3 	bl	8000244 <__aeabi_f2uiz>
 800185e:	0003      	movs	r3, r0
 8001860:	0019      	movs	r1, r3
 8001862:	2066      	movs	r0, #102	; 0x66
 8001864:	f003 fb24 	bl	8004eb0 <mcu_dp_value_update>
	}
	count++;
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <OLED_Update+0x50>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <OLED_Update+0x50>)
 8001872:	701a      	strb	r2, [r3, #0]
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000b8 	.word	0x200000b8
 8001880:	41200000 	.word	0x41200000

08001884 <SHT30_Send_Cmd>:
/**
 * @brief    向SHT30发送一条指令(16bit)
 * @param    cmd —— SHT30指令（在SHT30_MODE中枚举定义）
 * @retval    成功返回HAL_OK
*/
static uint8_t SHT30_Send_Cmd(SHT30_CMD cmd) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	0002      	movs	r2, r0
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	801a      	strh	r2, [r3, #0]
    uint8_t cmd_buffer[2];
    cmd_buffer[0] = cmd >> 8;
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2da      	uxtb	r2, r3
 800189a:	210c      	movs	r1, #12
 800189c:	187b      	adds	r3, r7, r1
 800189e:	701a      	strb	r2, [r3, #0]
    cmd_buffer[1] = cmd;
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	705a      	strb	r2, [r3, #1]
    return HAL_I2C_Master_Transmit(&hi2c1, SHT30_ADDR_WRITE, (uint8_t *) cmd_buffer, 2, 0xFFFF);
 80018aa:	187a      	adds	r2, r7, r1
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <SHT30_Send_Cmd+0x40>)
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SHT30_Send_Cmd+0x44>)
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	2188      	movs	r1, #136	; 0x88
 80018b6:	f000 feeb 	bl	8002690 <HAL_I2C_Master_Transmit>
 80018ba:	0003      	movs	r3, r0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000d0 	.word	0x200000d0
 80018c8:	0000ffff 	.word	0x0000ffff

080018cc <SHT30_Reset>:
/**
 * @brief    复位SHT30
 * @param    none
 * @retval    none
*/
void SHT30_Reset(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    SHT30_Send_Cmd(SOFT_RESET_CMD);
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SHT30_Reset+0x18>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff ffd6 	bl	8001884 <SHT30_Send_Cmd>
    HAL_Delay(20);
 80018d8:	2014      	movs	r0, #20
 80018da:	f000 fb19 	bl	8001f10 <HAL_Delay>
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	000030a2 	.word	0x000030a2

080018e8 <SHT30_Init>:
 * @brief    初始化SHT30
 * @param    none
 * @retval    成功返回HAL_OK
 * @note    周期测量模式
*/
uint8_t SHT30_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    return SHT30_Send_Cmd(MEDIUM_2_CMD);
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <SHT30_Init+0x14>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff ffc8 	bl	8001884 <SHT30_Send_Cmd>
 80018f4:	0003      	movs	r3, r0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	00002220 	.word	0x00002220

08001900 <SHT30_Read_Dat>:
/**
 * @brief    从SHT30读取一次数据
 * @param    dat —— 存储读取数据的地址（6个字节数组）
 * @retval    成功 —— 返回HAL_OK
*/
uint8_t SHT30_Read_Dat(uint8_t *dat) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
    SHT30_Send_Cmd(READOUT_FOR_PERIODIC_MODE);
 8001908:	23e0      	movs	r3, #224	; 0xe0
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff ffb9 	bl	8001884 <SHT30_Send_Cmd>
    return HAL_I2C_Master_Receive(&hi2c1, SHT30_ADDR_READ, dat, 6, 0xFFFF);
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <SHT30_Read_Dat+0x2c>)
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SHT30_Read_Dat+0x30>)
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2306      	movs	r3, #6
 800191c:	2189      	movs	r1, #137	; 0x89
 800191e:	f000 ffbf 	bl	80028a0 <HAL_I2C_Master_Receive>
 8001922:	0003      	movs	r3, r0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200000d0 	.word	0x200000d0
 8001930:	0000ffff 	.word	0x0000ffff

08001934 <CheckCrc8>:

uint8_t CheckCrc8(uint8_t *const message, uint8_t initial_value) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	000a      	movs	r2, r1
 800193e:	1cfb      	adds	r3, r7, #3
 8001940:	701a      	strb	r2, [r3, #0]
    uint8_t remainder;        //余数
    uint8_t i = 0, j = 0;  //循环变量
 8001942:	230e      	movs	r3, #14
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	210d      	movs	r1, #13
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]

    /* 初始化 */
    remainder = initial_value;
 8001952:	230f      	movs	r3, #15
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	1cfa      	adds	r2, r7, #3
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	701a      	strb	r2, [r3, #0]

    for (j = 0; j < 2; j++) {
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e037      	b.n	80019d4 <CheckCrc8+0xa0>
        remainder ^= message[j];
 8001964:	230d      	movs	r3, #13
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	7819      	ldrb	r1, [r3, #0]
 8001970:	220f      	movs	r2, #15
 8001972:	18bb      	adds	r3, r7, r2
 8001974:	18ba      	adds	r2, r7, r2
 8001976:	7812      	ldrb	r2, [r2, #0]
 8001978:	404a      	eors	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]

        /* 从最高位开始依次计算  */
        for (i = 0; i < 8; i++) {
 800197c:	230e      	movs	r3, #14
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e01b      	b.n	80019be <CheckCrc8+0x8a>
            if (remainder & 0x80) {
 8001986:	210f      	movs	r1, #15
 8001988:	187b      	adds	r3, r7, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b25b      	sxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	da09      	bge.n	80019a6 <CheckCrc8+0x72>
                remainder = (remainder << 1) ^ CRC8_POLYNOMIAL;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b25b      	sxtb	r3, r3
 800199a:	2231      	movs	r2, #49	; 0x31
 800199c:	4053      	eors	r3, r2
 800199e:	b25a      	sxtb	r2, r3
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e005      	b.n	80019b2 <CheckCrc8+0x7e>
            } else {
                remainder = (remainder << 1);
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fa      	adds	r2, r7, r3
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	18db      	adds	r3, r3, r3
 80019b0:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < 8; i++) {
 80019b2:	210e      	movs	r1, #14
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	3201      	adds	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	230e      	movs	r3, #14
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	d9de      	bls.n	8001986 <CheckCrc8+0x52>
    for (j = 0; j < 2; j++) {
 80019c8:	210d      	movs	r1, #13
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	3201      	adds	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	230d      	movs	r3, #13
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d9c2      	bls.n	8001964 <CheckCrc8+0x30>
            }
        }
    }

    /* 返回计算的CRC码 */
    return remainder;
 80019de:	230f      	movs	r3, #15
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <SHT30_Dat_To_Float>:
 * @brief    将SHT30接收的6个字节数据进行CRC校验，并转换为温度值和湿度值
 * @param    dat  —— 存储接收数据的地址（6个字节数组）
 * @retval    校验成功  —— 返回0
 *             校验失败  —— 返回1，并设置温度值和湿度值为0
*/
uint8_t SHT30_Dat_To_Float(uint8_t *const dat, float *temperature, float *humidity) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
    uint16_t recv_temperature = 0;
 80019f8:	2316      	movs	r3, #22
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
    uint16_t recv_humidity = 0;
 8001a00:	2314      	movs	r3, #20
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]

    /* 校验温度数据和湿度数据是否接收正确 */
    if (CheckCrc8(dat, 0xFF) != dat[2] || CheckCrc8(&dat[3], 0xFF) != dat[5])
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	21ff      	movs	r1, #255	; 0xff
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff91 	bl	8001934 <CheckCrc8>
 8001a12:	0003      	movs	r3, r0
 8001a14:	001a      	movs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10c      	bne.n	8001a3a <SHT30_Dat_To_Float+0x4e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3303      	adds	r3, #3
 8001a24:	21ff      	movs	r1, #255	; 0xff
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff84 	bl	8001934 <CheckCrc8>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	001a      	movs	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3305      	adds	r3, #5
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <SHT30_Dat_To_Float+0x52>
        return 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e046      	b.n	8001acc <SHT30_Dat_To_Float+0xe0>

    /* 转换温度数据 */
    recv_temperature = ((uint16_t) dat[0] << 8) | dat[1];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	2116      	movs	r1, #22
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	801a      	strh	r2, [r3, #0]
    *temperature = -45 + 175 * ((float) recv_temperature / 65535);
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f85d 	bl	8000b1c <__aeabi_ui2f>
 8001a62:	1c03      	adds	r3, r0, #0
 8001a64:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <SHT30_Dat_To_Float+0xe8>)
 8001a66:	1c18      	adds	r0, r3, #0
 8001a68:	f7fe fc04 	bl	8000274 <__aeabi_fdiv>
 8001a6c:	1c03      	adds	r3, r0, #0
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <SHT30_Dat_To_Float+0xec>)
 8001a70:	1c18      	adds	r0, r3, #0
 8001a72:	f7fe fd0b 	bl	800048c <__aeabi_fmul>
 8001a76:	1c03      	adds	r3, r0, #0
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <SHT30_Dat_To_Float+0xf0>)
 8001a7a:	1c18      	adds	r0, r3, #0
 8001a7c:	f7fe fe20 	bl	80006c0 <__aeabi_fsub>
 8001a80:	1c03      	adds	r3, r0, #0
 8001a82:	1c1a      	adds	r2, r3, #0
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	601a      	str	r2, [r3, #0]

    /* 转换湿度数据 */
    recv_humidity = ((uint16_t) dat[3] << 8) | dat[4];
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3304      	adds	r3, #4
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	2114      	movs	r1, #20
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	801a      	strh	r2, [r3, #0]
    *humidity = 100 * ((float) recv_humidity / 65535);
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff f837 	bl	8000b1c <__aeabi_ui2f>
 8001aae:	1c03      	adds	r3, r0, #0
 8001ab0:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <SHT30_Dat_To_Float+0xe8>)
 8001ab2:	1c18      	adds	r0, r3, #0
 8001ab4:	f7fe fbde 	bl	8000274 <__aeabi_fdiv>
 8001ab8:	1c03      	adds	r3, r0, #0
 8001aba:	4909      	ldr	r1, [pc, #36]	; (8001ae0 <SHT30_Dat_To_Float+0xf4>)
 8001abc:	1c18      	adds	r0, r3, #0
 8001abe:	f7fe fce5 	bl	800048c <__aeabi_fmul>
 8001ac2:	1c03      	adds	r3, r0, #0
 8001ac4:	1c1a      	adds	r2, r3, #0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]

    return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	477fff00 	.word	0x477fff00
 8001ad8:	432f0000 	.word	0x432f0000
 8001adc:	42340000 	.word	0x42340000
 8001ae0:	42c80000 	.word	0x42c80000

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_MspInit+0x44>)
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_MspInit+0x44>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	619a      	str	r2, [r3, #24]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_MspInit+0x44>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_MspInit+0x44>)
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_MspInit+0x44>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	61da      	str	r2, [r3, #28]
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_MspInit+0x44>)
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	055b      	lsls	r3, r3, #21
 8001b18:	4013      	ands	r3, r2
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 f9c2 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
 unsigned char value;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <USART1_IRQHandler+0x34>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f002 fb19 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if((USART1->ISR & UART_FLAG_RXNE) != 0){
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <USART1_IRQHandler+0x38>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	4013      	ands	r3, r2
 8001b72:	d009      	beq.n	8001b88 <USART1_IRQHandler+0x2c>
      value = USART1->RDR;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <USART1_IRQHandler+0x38>)
 8001b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	701a      	strb	r2, [r3, #0]
      extern void uart_receive_input(unsigned char value);
      uart_receive_input(value);
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f003 fa88 	bl	8005098 <uart_receive_input>
    }
  /* USER CODE END USART1_IRQn 1 */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000164 	.word	0x20000164
 8001b94:	40013800 	.word	0x40013800

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f004 f942 	bl	8005e50 <__errno>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	425b      	negs	r3, r3
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	18d2      	adds	r2, r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <_sbrk+0x64>)
 8001be8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20002000 	.word	0x20002000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	200000bc 	.word	0x200000bc
 8001c00:	20000278 	.word	0x20000278

08001c04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <MX_TIM6_Init+0x3c>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c1c:	222f      	movs	r2, #47	; 0x2f
 8001c1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c28:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <MX_TIM6_Init+0x40>)
 8001c2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <MX_TIM6_Init+0x38>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f002 f883 	bl	8003d40 <HAL_TIM_Base_Init>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8001c3e:	f7ff fc29 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000011c 	.word	0x2000011c
 8001c4c:	40001000 	.word	0x40001000
 8001c50:	0000ffff 	.word	0x0000ffff

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_TIM_Base_MspInit+0x34>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10b      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	61da      	str	r2, [r3, #28]
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2210      	movs	r2, #16
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40001000 	.word	0x40001000
 8001c8c:	40021000 	.word	0x40021000

08001c90 <Delay_us>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Delay_us(uint16_t us){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	0002      	movs	r2, r0
 8001c98:	1dbb      	adds	r3, r7, #6
 8001c9a:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim6);
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <Delay_us+0x54>)
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f002 f89e 	bl	8003de0 <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&htim6, 0);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <Delay_us+0x54>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

  us = (us >4) ? (us-2):1;
 8001cac:	1dbb      	adds	r3, r7, #6
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d904      	bls.n	8001cbe <Delay_us+0x2e>
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	3b02      	subs	r3, #2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	e000      	b.n	8001cc0 <Delay_us+0x30>
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	801a      	strh	r2, [r3, #0]
  while(us > __HAL_TIM_GetCounter(&htim6)){};
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	1dbb      	adds	r3, r7, #6
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <Delay_us+0x54>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f8      	bhi.n	8001cc6 <Delay_us+0x36>
  HAL_TIM_Base_Stop(&htim6);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <Delay_us+0x54>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f002 f8c6 	bl	8003e68 <HAL_TIM_Base_Stop>
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000011c 	.word	0x2000011c

08001ce8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MX_USART1_UART_Init+0x5c>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001cf4:	2296      	movs	r2, #150	; 0x96
 8001cf6:	0192      	lsls	r2, r2, #6
 8001cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <MX_USART1_UART_Init+0x58>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f002 f937 	bl	8003fa0 <HAL_UART_Init>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d36:	f7ff fbad 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000164 	.word	0x20000164
 8001d44:	40013800 	.word	0x40013800

08001d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	2414      	movs	r4, #20
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	0018      	movs	r0, r3
 8001d56:	2314      	movs	r3, #20
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f004 f8a2 	bl	8005ea4 <memset>
  if(uartHandle->Instance==USART1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_UART_MspInit+0xa4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d13b      	bne.n	8001de2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	01c9      	lsls	r1, r1, #7
 8001d74:	430a      	orrs	r2, r1
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	01db      	lsls	r3, r3, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0289      	lsls	r1, r1, #10
 8001d90:	430a      	orrs	r2, r1
 8001d92:	615a      	str	r2, [r3, #20]
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_UART_MspInit+0xa8>)
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	22c0      	movs	r2, #192	; 0xc0
 8001da6:	00d2      	lsls	r2, r2, #3
 8001da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	0021      	movs	r1, r4
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2202      	movs	r2, #2
 8001db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	187a      	adds	r2, r7, r1
 8001dc6:	2390      	movs	r3, #144	; 0x90
 8001dc8:	05db      	lsls	r3, r3, #23
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fa1f 	bl	8002210 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	201b      	movs	r0, #27
 8001dd8:	f000 f96a 	bl	80020b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ddc:	201b      	movs	r0, #27
 8001dde:	f000 f97c 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b00b      	add	sp, #44	; 0x2c
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40021000 	.word	0x40021000

08001df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <LoopForever+0xe>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e10:	4c0b      	ldr	r4, [pc, #44]	; (8001e40 <LoopForever+0x16>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e1e:	f7ff fef1 	bl	8001c04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e22:	f004 f81b 	bl	8005e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7ff f9f9 	bl	800121c <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   r0, =_estack
 8001e2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e38:	080071d4 	.word	0x080071d4
  ldr r2, =_sbss
 8001e3c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e40:	20000278 	.word	0x20000278

08001e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_IRQHandler>
	...

08001e48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_Init+0x24>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_Init+0x24>)
 8001e52:	2110      	movs	r1, #16
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f809 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fe41 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_InitTick+0x5c>)
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x60>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	0019      	movs	r1, r3
 8001e82:	23fa      	movs	r3, #250	; 0xfa
 8001e84:	0098      	lsls	r0, r3, #2
 8001e86:	f7fe f951 	bl	800012c <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f7fe f94c 	bl	800012c <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f92f 	bl	80020fa <HAL_SYSTICK_Config>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00f      	b.n	8001ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d80b      	bhi.n	8001ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	2301      	movs	r3, #1
 8001eae:	425b      	negs	r3, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f8fc 	bl	80020b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_InitTick+0x64>)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	2000001c 	.word	0x2000001c
 8001ed0:	20000024 	.word	0x20000024
 8001ed4:	20000020 	.word	0x20000020

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	20000024 	.word	0x20000024
 8001ef8:	200001e8 	.word	0x200001e8

08001efc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	200001e8 	.word	0x200001e8

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	189b      	adds	r3, r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000024 	.word	0x20000024

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	0002      	movs	r2, r0
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6a:	d809      	bhi.n	8001f80 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	001a      	movs	r2, r3
 8001f72:	231f      	movs	r3, #31
 8001f74:	401a      	ands	r2, r3
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_EnableIRQ+0x30>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4091      	lsls	r1, r2
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
  }
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa0:	d828      	bhi.n	8001ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <__NVIC_SetPriority+0xd4>)
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	33c0      	adds	r3, #192	; 0xc0
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	589b      	ldr	r3, [r3, r2]
 8001fb2:	1dfa      	adds	r2, r7, #7
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	2203      	movs	r2, #3
 8001fba:	400a      	ands	r2, r1
 8001fbc:	00d2      	lsls	r2, r2, #3
 8001fbe:	21ff      	movs	r1, #255	; 0xff
 8001fc0:	4091      	lsls	r1, r2
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	22ff      	movs	r2, #255	; 0xff
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	2303      	movs	r3, #3
 8001fda:	4003      	ands	r3, r0
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <__NVIC_SetPriority+0xd4>)
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	430a      	orrs	r2, r1
 8001fec:	33c0      	adds	r3, #192	; 0xc0
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ff2:	e031      	b.n	8002058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <__NVIC_SetPriority+0xd8>)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	400b      	ands	r3, r1
 8002000:	3b08      	subs	r3, #8
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3306      	adds	r3, #6
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	3304      	adds	r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1dfa      	adds	r2, r7, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	0011      	movs	r1, r2
 8002014:	2203      	movs	r2, #3
 8002016:	400a      	ands	r2, r1
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	21ff      	movs	r1, #255	; 0xff
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	401a      	ands	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	2303      	movs	r3, #3
 8002036:	4003      	ands	r3, r0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <__NVIC_SetPriority+0xd8>)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	001c      	movs	r4, r3
 8002044:	230f      	movs	r3, #15
 8002046:	4023      	ands	r3, r4
 8002048:	3b08      	subs	r3, #8
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	430a      	orrs	r2, r1
 800204e:	3306      	adds	r3, #6
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	18c3      	adds	r3, r0, r3
 8002054:	3304      	adds	r3, #4
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b003      	add	sp, #12
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	045b      	lsls	r3, r3, #17
 8002078:	429a      	cmp	r2, r3
 800207a:	d301      	bcc.n	8002080 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207c:	2301      	movs	r3, #1
 800207e:	e010      	b.n	80020a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <SysTick_Config+0x44>)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	3a01      	subs	r2, #1
 8002086:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002088:	2301      	movs	r3, #1
 800208a:	425b      	negs	r3, r3
 800208c:	2103      	movs	r1, #3
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff7c 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x44>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x44>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b002      	add	sp, #8
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	210f      	movs	r1, #15
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	1c02      	adds	r2, r0, #0
 80020c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	0002      	movs	r2, r0
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b25b      	sxtb	r3, r3
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ff33 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ffaf 	bl	8002068 <SysTick_Config>
 800210a:	0003      	movs	r3, r0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2221      	movs	r2, #33	; 0x21
 8002120:	5c9b      	ldrb	r3, [r3, r2]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d008      	beq.n	800213a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e020      	b.n	800217c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	210e      	movs	r1, #14
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	438a      	bics	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2101      	movs	r1, #1
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2221      	movs	r2, #33	; 0x21
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	210f      	movs	r1, #15
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2221      	movs	r2, #33	; 0x21
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d006      	beq.n	80021ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e028      	b.n	8002200 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	210e      	movs	r1, #14
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2101      	movs	r1, #1
 80021d8:	4091      	lsls	r1, r2
 80021da:	000a      	movs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2221      	movs	r2, #33	; 0x21
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	0010      	movs	r0, r2
 80021fe:	4798      	blx	r3
    } 
  }
  return status;
 8002200:	230f      	movs	r3, #15
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	781b      	ldrb	r3, [r3, #0]
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e14f      	b.n	80024c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4091      	lsls	r1, r2
 800222a:	000a      	movs	r2, r1
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_GPIO_Init+0x28>
 8002236:	e140      	b.n	80024ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00b      	beq.n	8002258 <HAL_GPIO_Init+0x48>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224c:	2b11      	cmp	r3, #17
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	409a      	lsls	r2, r3
 8002266:	0013      	movs	r3, r2
 8002268:	43da      	mvns	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	0013      	movs	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	43da      	mvns	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	2201      	movs	r2, #1
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	43da      	mvns	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0xea>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2107      	movs	r1, #7
 8002326:	400b      	ands	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	055b      	lsls	r3, r3, #21
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_GPIO_Init+0x174>
 8002382:	e09a      	b.n	80024ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	619a      	str	r2, [r3, #24]
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	589b      	ldr	r3, [r3, r2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	409a      	lsls	r2, r3
 80023b6:	0013      	movs	r3, r2
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	2390      	movs	r3, #144	; 0x90
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1de>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <HAL_GPIO_Init+0x2d4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1da>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a42      	ldr	r2, [pc, #264]	; (80024e8 <HAL_GPIO_Init+0x2d8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023f2:	2300      	movs	r3, #0
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	2103      	movs	r1, #3
 80023f8:	400a      	ands	r2, r1
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4013      	ands	r3, r2
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43da      	mvns	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	4013      	ands	r3, r2
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	035b      	lsls	r3, r3, #13
 800247e:	4013      	ands	r3, r2
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_GPIO_Init+0x2dc>)
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	40da      	lsrs	r2, r3
 80024c8:	1e13      	subs	r3, r2, #0
 80024ca:	d000      	beq.n	80024ce <HAL_GPIO_Init+0x2be>
 80024cc:	e6a8      	b.n	8002220 <HAL_GPIO_Init+0x10>
  } 
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48000800 	.word	0x48000800
 80024e8:	48000c00 	.word	0x48000c00
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	000a      	movs	r2, r1
 80024fa:	1cbb      	adds	r3, r7, #2
 80024fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	1cba      	adds	r2, r7, #2
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	4013      	ands	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800250a:	230f      	movs	r3, #15
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e003      	b.n	800251c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
  }
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	0008      	movs	r0, r1
 8002534:	0011      	movs	r1, r2
 8002536:	1cbb      	adds	r3, r7, #2
 8002538:	1c02      	adds	r2, r0, #0
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	1c7b      	adds	r3, r7, #1
 800253e:	1c0a      	adds	r2, r1, #0
 8002540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002542:	1c7b      	adds	r3, r7, #1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254a:	1cbb      	adds	r3, r7, #2
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002552:	e003      	b.n	800255c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002554:	1cbb      	adds	r3, r7, #2
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e082      	b.n	800267c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2241      	movs	r2, #65	; 0x41
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe fdf7 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2241      	movs	r2, #65	; 0x41
 8002596:	2124      	movs	r1, #36	; 0x24
 8002598:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_I2C_Init+0x120>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4931      	ldr	r1, [pc, #196]	; (8002688 <HAL_I2C_Init+0x124>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0209      	lsls	r1, r1, #8
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e007      	b.n	80025f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2184      	movs	r1, #132	; 0x84
 80025ec:	0209      	lsls	r1, r1, #8
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d104      	bne.n	8002604 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	491f      	ldr	r1, [pc, #124]	; (800268c <HAL_I2C_Init+0x128>)
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	491a      	ldr	r1, [pc, #104]	; (8002688 <HAL_I2C_Init+0x124>)
 8002620:	400a      	ands	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	431a      	orrs	r2, r3
 800262e:	0011      	movs	r1, r2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69d9      	ldr	r1, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2241      	movs	r2, #65	; 0x41
 8002668:	2120      	movs	r1, #32
 800266a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2242      	movs	r2, #66	; 0x42
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	f0ffffff 	.word	0xf0ffffff
 8002688:	ffff7fff 	.word	0xffff7fff
 800268c:	02008000 	.word	0x02008000

08002690 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	0008      	movs	r0, r1
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	0019      	movs	r1, r3
 800269e:	230a      	movs	r3, #10
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	1c02      	adds	r2, r0, #0
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	2308      	movs	r3, #8
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	1c0a      	adds	r2, r1, #0
 80026ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2241      	movs	r2, #65	; 0x41
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d000      	beq.n	80026bc <HAL_I2C_Master_Transmit+0x2c>
 80026ba:	e0e7      	b.n	800288c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Master_Transmit+0x3a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e0e1      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026d2:	f7ff fc13 	bl	8001efc <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	0219      	lsls	r1, r3, #8
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2319      	movs	r3, #25
 80026e6:	2201      	movs	r2, #1
 80026e8:	f000 fb96 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2241      	movs	r2, #65	; 0x41
 80026f8:	2121      	movs	r1, #33	; 0x21
 80026fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2242      	movs	r2, #66	; 0x42
 8002700:	2110      	movs	r1, #16
 8002702:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2208      	movs	r2, #8
 8002714:	18ba      	adds	r2, r7, r2
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d911      	bls.n	800274e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	b2da      	uxtb	r2, r3
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	045c      	lsls	r4, r3, #17
 800273a:	230a      	movs	r3, #10
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	8819      	ldrh	r1, [r3, #0]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_I2C_Master_Transmit+0x208>)
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	0023      	movs	r3, r4
 8002748:	f000 fcf2 	bl	8003130 <I2C_TransferConfig>
 800274c:	e075      	b.n	800283a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	049c      	lsls	r4, r3, #18
 8002762:	230a      	movs	r3, #10
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	8819      	ldrh	r1, [r3, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_I2C_Master_Transmit+0x208>)
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	0023      	movs	r3, r4
 8002770:	f000 fcde 	bl	8003130 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002774:	e061      	b.n	800283a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fb8a 	bl	8002e96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e081      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03a      	beq.n	800283a <HAL_I2C_Master_Transmit+0x1aa>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d136      	bne.n	800283a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	0013      	movs	r3, r2
 80027d6:	2200      	movs	r2, #0
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	f000 fb1d 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e053      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2bff      	cmp	r3, #255	; 0xff
 80027ee:	d911      	bls.n	8002814 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	22ff      	movs	r2, #255	; 0xff
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	045c      	lsls	r4, r3, #17
 8002800:	230a      	movs	r3, #10
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	8819      	ldrh	r1, [r3, #0]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	2300      	movs	r3, #0
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	0023      	movs	r3, r4
 800280e:	f000 fc8f 	bl	8003130 <I2C_TransferConfig>
 8002812:	e012      	b.n	800283a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	b2da      	uxtb	r2, r3
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	049c      	lsls	r4, r3, #18
 8002828:	230a      	movs	r3, #10
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	8819      	ldrh	r1, [r3, #0]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	0023      	movs	r3, r4
 8002836:	f000 fc7b 	bl	8003130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d198      	bne.n	8002776 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 fb62 	bl	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e01a      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2220      	movs	r2, #32
 800285e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	490c      	ldr	r1, [pc, #48]	; (800289c <HAL_I2C_Master_Transmit+0x20c>)
 800286c:	400a      	ands	r2, r1
 800286e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2241      	movs	r2, #65	; 0x41
 8002874:	2120      	movs	r1, #32
 8002876:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2242      	movs	r2, #66	; 0x42
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2240      	movs	r2, #64	; 0x40
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b007      	add	sp, #28
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	80002000 	.word	0x80002000
 800289c:	fe00e800 	.word	0xfe00e800

080028a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	0008      	movs	r0, r1
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	0019      	movs	r1, r3
 80028ae:	230a      	movs	r3, #10
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	1c02      	adds	r2, r0, #0
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	2308      	movs	r3, #8
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	1c0a      	adds	r2, r1, #0
 80028bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2241      	movs	r2, #65	; 0x41
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d000      	beq.n	80028cc <HAL_I2C_Master_Receive+0x2c>
 80028ca:	e0e8      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Master_Receive+0x3a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0e2      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2240      	movs	r2, #64	; 0x40
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028e2:	f7ff fb0b 	bl	8001efc <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	0219      	lsls	r1, r3, #8
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	f000 fa8e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cd      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2241      	movs	r2, #65	; 0x41
 8002908:	2122      	movs	r1, #34	; 0x22
 800290a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2242      	movs	r2, #66	; 0x42
 8002910:	2110      	movs	r1, #16
 8002912:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2208      	movs	r2, #8
 8002924:	18ba      	adds	r2, r7, r2
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d911      	bls.n	800295e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	b2da      	uxtb	r2, r3
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	045c      	lsls	r4, r3, #17
 800294a:	230a      	movs	r3, #10
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	8819      	ldrh	r1, [r3, #0]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_I2C_Master_Receive+0x208>)
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	0023      	movs	r3, r4
 8002958:	f000 fbea 	bl	8003130 <I2C_TransferConfig>
 800295c:	e076      	b.n	8002a4c <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	b2da      	uxtb	r2, r3
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	049c      	lsls	r4, r3, #18
 8002972:	230a      	movs	r3, #10
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	8819      	ldrh	r1, [r3, #0]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <HAL_I2C_Master_Receive+0x208>)
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	0023      	movs	r3, r4
 8002980:	f000 fbd6 	bl	8003130 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002984:	e062      	b.n	8002a4c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fafd 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e082      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d03a      	beq.n	8002a4c <HAL_I2C_Master_Receive+0x1ac>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d136      	bne.n	8002a4c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	0013      	movs	r3, r2
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	f000 fa14 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e053      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2bff      	cmp	r3, #255	; 0xff
 8002a00:	d911      	bls.n	8002a26 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	045c      	lsls	r4, r3, #17
 8002a12:	230a      	movs	r3, #10
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	0023      	movs	r3, r4
 8002a20:	f000 fb86 	bl	8003130 <I2C_TransferConfig>
 8002a24:	e012      	b.n	8002a4c <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	049c      	lsls	r4, r3, #18
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	8819      	ldrh	r1, [r3, #0]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	0023      	movs	r3, r4
 8002a48:	f000 fb72 	bl	8003130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d197      	bne.n	8002986 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fa59 	bl	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e01a      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	490b      	ldr	r1, [pc, #44]	; (8002aac <HAL_I2C_Master_Receive+0x20c>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2241      	movs	r2, #65	; 0x41
 8002a86:	2120      	movs	r1, #32
 8002a88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2242      	movs	r2, #66	; 0x42
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2240      	movs	r2, #64	; 0x40
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b007      	add	sp, #28
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	80002400 	.word	0x80002400
 8002aac:	fe00e800 	.word	0xfe00e800

08002ab0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	000c      	movs	r4, r1
 8002aba:	0010      	movs	r0, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	230a      	movs	r3, #10
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	1c22      	adds	r2, r4, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	1c02      	adds	r2, r0, #0
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	1dbb      	adds	r3, r7, #6
 8002ad0:	1c0a      	adds	r2, r1, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2241      	movs	r2, #65	; 0x41
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d000      	beq.n	8002ae2 <HAL_I2C_Mem_Write+0x32>
 8002ae0:	e10c      	b.n	8002cfc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_I2C_Mem_Write+0x42>
 8002ae8:	232c      	movs	r3, #44	; 0x2c
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0ff      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	5c9b      	ldrb	r3, [r3, r2]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Mem_Write+0x5c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0f8      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2240      	movs	r2, #64	; 0x40
 8002b10:	2101      	movs	r1, #1
 8002b12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b14:	f7ff f9f2 	bl	8001efc <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	0219      	lsls	r1, r3, #8
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2319      	movs	r3, #25
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f000 f975 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e3      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2241      	movs	r2, #65	; 0x41
 8002b3a:	2121      	movs	r1, #33	; 0x21
 8002b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2242      	movs	r2, #66	; 0x42
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	222c      	movs	r2, #44	; 0x2c
 8002b56:	18ba      	adds	r2, r7, r2
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b62:	1dbb      	adds	r3, r7, #6
 8002b64:	881c      	ldrh	r4, [r3, #0]
 8002b66:	2308      	movs	r3, #8
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	8819      	ldrh	r1, [r3, #0]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	0023      	movs	r3, r4
 8002b7e:	f000 f8c5 	bl	8002d0c <I2C_RequestMemoryWrite>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0b5      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2bff      	cmp	r3, #255	; 0xff
 8002b9a:	d911      	bls.n	8002bc0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	045c      	lsls	r4, r3, #17
 8002bac:	230a      	movs	r3, #10
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	8819      	ldrh	r1, [r3, #0]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	0023      	movs	r3, r4
 8002bba:	f000 fab9 	bl	8003130 <I2C_TransferConfig>
 8002bbe:	e012      	b.n	8002be6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	049c      	lsls	r4, r3, #18
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	8819      	ldrh	r1, [r3, #0]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	0023      	movs	r3, r4
 8002be2:	f000 faa5 	bl	8003130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f952 	bl	8002e96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e081      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d03a      	beq.n	8002caa <HAL_I2C_Mem_Write+0x1fa>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d136      	bne.n	8002caa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0013      	movs	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	f000 f8e5 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e053      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2bff      	cmp	r3, #255	; 0xff
 8002c5e:	d911      	bls.n	8002c84 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	045c      	lsls	r4, r3, #17
 8002c70:	230a      	movs	r3, #10
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	8819      	ldrh	r1, [r3, #0]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	0023      	movs	r3, r4
 8002c7e:	f000 fa57 	bl	8003130 <I2C_TransferConfig>
 8002c82:	e012      	b.n	8002caa <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	049c      	lsls	r4, r3, #18
 8002c98:	230a      	movs	r3, #10
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	8819      	ldrh	r1, [r3, #0]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	0023      	movs	r3, r4
 8002ca6:	f000 fa43 	bl	8003130 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d198      	bne.n	8002be6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f92a 	bl	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01a      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	490b      	ldr	r1, [pc, #44]	; (8002d08 <HAL_I2C_Mem_Write+0x258>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2241      	movs	r2, #65	; 0x41
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2242      	movs	r2, #66	; 0x42
 8002cec:	2100      	movs	r1, #0
 8002cee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b007      	add	sp, #28
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	fe00e800 	.word	0xfe00e800

08002d0c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	000c      	movs	r4, r1
 8002d16:	0010      	movs	r0, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	250a      	movs	r5, #10
 8002d1c:	197b      	adds	r3, r7, r5
 8002d1e:	1c22      	adds	r2, r4, #0
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	2308      	movs	r3, #8
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	1c02      	adds	r2, r0, #0
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	1dbb      	adds	r3, r7, #6
 8002d2c:	1c0a      	adds	r2, r1, #0
 8002d2e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d30:	1dbb      	adds	r3, r7, #6
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	045c      	lsls	r4, r3, #17
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	8819      	ldrh	r1, [r3, #0]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <I2C_RequestMemoryWrite+0xc4>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	0023      	movs	r3, r4
 8002d46:	f000 f9f3 	bl	8003130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f8a0 	bl	8002e96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e033      	b.n	8002dc6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5e:	1dbb      	adds	r3, r7, #6
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d66:	2308      	movs	r3, #8
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
 8002d74:	e019      	b.n	8002daa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d76:	2308      	movs	r3, #8
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	6a39      	ldr	r1, [r7, #32]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f881 	bl	8002e96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d001      	beq.n	8002d9c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e014      	b.n	8002dc6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	0013      	movs	r3, r2
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	f000 f82e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b004      	add	sp, #16
 8002dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	80002000 	.word	0x80002000

08002dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d103      	bne.n	8002df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d007      	beq.n	8002e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
  }
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e021      	b.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	d01e      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7ff f864 	bl	8001efc <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2241      	movs	r2, #65	; 0x41
 8002e56:	2120      	movs	r1, #32
 8002e58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2242      	movs	r2, #66	; 0x42
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	425a      	negs	r2, r3
 8002e7e:	4153      	adcs	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	001a      	movs	r2, r3
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d0ce      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea2:	e02b      	b.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f8da 	bl	8003064 <I2C_IsAcknowledgeFailed>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e029      	b.n	8002f0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d01e      	beq.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7ff f81d 	bl	8001efc <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	2220      	movs	r2, #32
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2241      	movs	r2, #65	; 0x41
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2242      	movs	r2, #66	; 0x42
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d1cc      	bne.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f20:	e028      	b.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f89b 	bl	8003064 <I2C_IsAcknowledgeFailed>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e026      	b.n	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7fe ffe1 	bl	8001efc <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d113      	bne.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	2220      	movs	r2, #32
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2241      	movs	r2, #65	; 0x41
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2242      	movs	r2, #66	; 0x42
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d1cf      	bne.n	8002f22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f98:	e055      	b.n	8003046 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f85f 	bl	8003064 <I2C_IsAcknowledgeFailed>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e053      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d129      	bne.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d105      	bne.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e03f      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	491d      	ldr	r1, [pc, #116]	; (8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2241      	movs	r2, #65	; 0x41
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2242      	movs	r2, #66	; 0x42
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e022      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fe ff74 	bl	8001efc <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	2220      	movs	r2, #32
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2241      	movs	r2, #65	; 0x41
 8003036:	2120      	movs	r1, #32
 8003038:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2204      	movs	r2, #4
 800304e:	4013      	ands	r3, r2
 8003050:	2b04      	cmp	r3, #4
 8003052:	d1a2      	bne.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	fe00e800 	.word	0xfe00e800

08003064 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2210      	movs	r2, #16
 8003078:	4013      	ands	r3, r2
 800307a:	2b10      	cmp	r3, #16
 800307c:	d151      	bne.n	8003122 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307e:	e021      	b.n	80030c4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3301      	adds	r3, #1
 8003084:	d01e      	beq.n	80030c4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe ff39 	bl	8001efc <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_IsAcknowledgeFailed+0x38>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d113      	bne.n	80030c4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	2220      	movs	r2, #32
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2241      	movs	r2, #65	; 0x41
 80030ac:	2120      	movs	r1, #32
 80030ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2242      	movs	r2, #66	; 0x42
 80030b4:	2100      	movs	r1, #0
 80030b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02f      	b.n	8003124 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2220      	movs	r2, #32
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d1d6      	bne.n	8003080 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2220      	movs	r2, #32
 80030e0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fe75 	bl	8002dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	490d      	ldr	r1, [pc, #52]	; (800312c <I2C_IsAcknowledgeFailed+0xc8>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	2204      	movs	r2, #4
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2241      	movs	r2, #65	; 0x41
 800310a:	2120      	movs	r1, #32
 800310c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2242      	movs	r2, #66	; 0x42
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	0018      	movs	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	b004      	add	sp, #16
 800312a:	bd80      	pop	{r7, pc}
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	0008      	movs	r0, r1
 800313a:	0011      	movs	r1, r2
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	240a      	movs	r4, #10
 8003140:	193b      	adds	r3, r7, r4
 8003142:	1c02      	adds	r2, r0, #0
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	2009      	movs	r0, #9
 8003148:	183b      	adds	r3, r7, r0
 800314a:	1c0a      	adds	r2, r1, #0
 800314c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	0d51      	lsrs	r1, r2, #21
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	00d2      	lsls	r2, r2, #3
 800315c:	400a      	ands	r2, r1
 800315e:	490e      	ldr	r1, [pc, #56]	; (8003198 <I2C_TransferConfig+0x68>)
 8003160:	430a      	orrs	r2, r1
 8003162:	43d2      	mvns	r2, r2
 8003164:	401a      	ands	r2, r3
 8003166:	0011      	movs	r1, r2
 8003168:	193b      	adds	r3, r7, r4
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	059b      	lsls	r3, r3, #22
 800316e:	0d9a      	lsrs	r2, r3, #22
 8003170:	183b      	adds	r3, r7, r0
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0418      	lsls	r0, r3, #16
 8003176:	23ff      	movs	r3, #255	; 0xff
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	4003      	ands	r3, r0
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	431a      	orrs	r2, r3
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b005      	add	sp, #20
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	03ff63ff 	.word	0x03ff63ff

0800319c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2241      	movs	r2, #65	; 0x41
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d138      	bne.n	8003224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031bc:	2302      	movs	r3, #2
 80031be:	e032      	b.n	8003226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	2101      	movs	r1, #1
 80031c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2241      	movs	r2, #65	; 0x41
 80031cc:	2124      	movs	r1, #36	; 0x24
 80031ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4911      	ldr	r1, [pc, #68]	; (8003230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2101      	movs	r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2241      	movs	r2, #65	; 0x41
 8003214:	2120      	movs	r1, #32
 8003216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	ffffefff 	.word	0xffffefff

08003234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2241      	movs	r2, #65	; 0x41
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d139      	bne.n	80032be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2240      	movs	r2, #64	; 0x40
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e033      	b.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2241      	movs	r2, #65	; 0x41
 8003264:	2124      	movs	r1, #36	; 0x24
 8003266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2101      	movs	r1, #1
 8003274:	438a      	bics	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	2120      	movs	r1, #32
 80032b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b004      	add	sp, #16
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	fffff0ff 	.word	0xfffff0ff

080032cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e301      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	d100      	bne.n	80032ea <HAL_RCC_OscConfig+0x1e>
 80032e8:	e08d      	b.n	8003406 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032ea:	4bc3      	ldr	r3, [pc, #780]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	220c      	movs	r2, #12
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00e      	beq.n	8003314 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f6:	4bc0      	ldr	r3, [pc, #768]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	220c      	movs	r2, #12
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x64>
 8003302:	4bbd      	ldr	r3, [pc, #756]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	025b      	lsls	r3, r3, #9
 800330a:	401a      	ands	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	025b      	lsls	r3, r3, #9
 8003310:	429a      	cmp	r2, r3
 8003312:	d10d      	bne.n	8003330 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4bb8      	ldr	r3, [pc, #736]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	029b      	lsls	r3, r3, #10
 800331c:	4013      	ands	r3, r2
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x56>
 8003320:	e070      	b.n	8003404 <HAL_RCC_OscConfig+0x138>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d000      	beq.n	800332c <HAL_RCC_OscConfig+0x60>
 800332a:	e06b      	b.n	8003404 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e2d8      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x7c>
 8003338:	4baf      	ldr	r3, [pc, #700]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4bae      	ldr	r3, [pc, #696]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	0249      	lsls	r1, r1, #9
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e02f      	b.n	80033a8 <HAL_RCC_OscConfig+0xdc>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x9e>
 8003350:	4ba9      	ldr	r3, [pc, #676]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4ba8      	ldr	r3, [pc, #672]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003356:	49a9      	ldr	r1, [pc, #676]	; (80035fc <HAL_RCC_OscConfig+0x330>)
 8003358:	400a      	ands	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	4ba6      	ldr	r3, [pc, #664]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4ba5      	ldr	r3, [pc, #660]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003362:	49a7      	ldr	r1, [pc, #668]	; (8003600 <HAL_RCC_OscConfig+0x334>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e01e      	b.n	80033a8 <HAL_RCC_OscConfig+0xdc>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10e      	bne.n	8003390 <HAL_RCC_OscConfig+0xc4>
 8003372:	4ba1      	ldr	r3, [pc, #644]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	02c9      	lsls	r1, r1, #11
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	4b9d      	ldr	r3, [pc, #628]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b9c      	ldr	r3, [pc, #624]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0249      	lsls	r1, r1, #9
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xdc>
 8003390:	4b99      	ldr	r3, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b98      	ldr	r3, [pc, #608]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003396:	4999      	ldr	r1, [pc, #612]	; (80035fc <HAL_RCC_OscConfig+0x330>)
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b95      	ldr	r3, [pc, #596]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	4997      	ldr	r1, [pc, #604]	; (8003600 <HAL_RCC_OscConfig+0x334>)
 80033a4:	400a      	ands	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d014      	beq.n	80033da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fda4 	bl	8001efc <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ba:	f7fe fd9f 	bl	8001efc <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e28a      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	4013      	ands	r3, r2
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0xee>
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe fd8f 	bl	8001efc <HAL_GetTick>
 80033de:	0003      	movs	r3, r0
 80033e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fd8a 	bl	8001efc <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e275      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	4013      	ands	r3, r2
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x118>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2202      	movs	r2, #2
 800340c:	4013      	ands	r3, r2
 800340e:	d100      	bne.n	8003412 <HAL_RCC_OscConfig+0x146>
 8003410:	e069      	b.n	80034e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003412:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	220c      	movs	r2, #12
 8003418:	4013      	ands	r3, r2
 800341a:	d00b      	beq.n	8003434 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800341c:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	220c      	movs	r2, #12
 8003422:	4013      	ands	r3, r2
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11c      	bne.n	8003462 <HAL_RCC_OscConfig+0x196>
 8003428:	4b73      	ldr	r3, [pc, #460]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	025b      	lsls	r3, r3, #9
 8003430:	4013      	ands	r3, r2
 8003432:	d116      	bne.n	8003462 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003434:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x17e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e24b      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	22f8      	movs	r2, #248	; 0xf8
 8003450:	4393      	bics	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	00da      	lsls	r2, r3, #3
 800345a:	4b67      	ldr	r3, [pc, #412]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003460:	e041      	b.n	80034e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003470:	2101      	movs	r1, #1
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fd41 	bl	8001efc <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe fd3c 	bl	8001efc <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e227      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d0f1      	beq.n	8003480 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22f8      	movs	r2, #248	; 0xf8
 80034a2:	4393      	bics	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00da      	lsls	r2, r3, #3
 80034ac:	4b52      	ldr	r3, [pc, #328]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fd1c 	bl	8001efc <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe fd17 	bl	8001efc <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e202      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2202      	movs	r2, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	d1f1      	bne.n	80034ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2208      	movs	r2, #8
 80034ec:	4013      	ands	r3, r2
 80034ee:	d036      	beq.n	800355e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d019      	beq.n	800352c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f8:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fc:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	2101      	movs	r1, #1
 8003500:	430a      	orrs	r2, r1
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fe fcfa 	bl	8001efc <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe fcf5 	bl	8001efc <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1e0      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d0f1      	beq.n	800350e <HAL_RCC_OscConfig+0x242>
 800352a:	e018      	b.n	800355e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800352e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003532:	2101      	movs	r1, #1
 8003534:	438a      	bics	r2, r1
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe fce0 	bl	8001efc <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fcdb 	bl	8001efc <HAL_GetTick>
 8003546:	0002      	movs	r2, r0
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1c6      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2202      	movs	r2, #2
 800355a:	4013      	ands	r3, r2
 800355c:	d1f1      	bne.n	8003542 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2204      	movs	r2, #4
 8003564:	4013      	ands	r3, r2
 8003566:	d100      	bne.n	800356a <HAL_RCC_OscConfig+0x29e>
 8003568:	e0b4      	b.n	80036d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	201f      	movs	r0, #31
 800356c:	183b      	adds	r3, r7, r0
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	055b      	lsls	r3, r3, #21
 800357a:	4013      	ands	r3, r2
 800357c:	d110      	bne.n	80035a0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	0549      	lsls	r1, r1, #21
 8003588:	430a      	orrs	r2, r1
 800358a:	61da      	str	r2, [r3, #28]
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	055b      	lsls	r3, r3, #21
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800359a:	183b      	adds	r3, r7, r0
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_RCC_OscConfig+0x338>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	d11a      	bne.n	80035e2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x338>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCC_OscConfig+0x338>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0049      	lsls	r1, r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fc9f 	bl	8001efc <HAL_GetTick>
 80035be:	0003      	movs	r3, r0
 80035c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe fc9a 	bl	8001efc <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e185      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x338>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10e      	bne.n	8003608 <HAL_RCC_OscConfig+0x33c>
 80035ea:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <HAL_RCC_OscConfig+0x32c>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	e035      	b.n	8003664 <HAL_RCC_OscConfig+0x398>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	fffeffff 	.word	0xfffeffff
 8003600:	fffbffff 	.word	0xfffbffff
 8003604:	40007000 	.word	0x40007000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x35e>
 8003610:	4bb6      	ldr	r3, [pc, #728]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	4bb5      	ldr	r3, [pc, #724]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003616:	2101      	movs	r1, #1
 8003618:	438a      	bics	r2, r1
 800361a:	621a      	str	r2, [r3, #32]
 800361c:	4bb3      	ldr	r3, [pc, #716]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	4bb2      	ldr	r3, [pc, #712]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003622:	2104      	movs	r1, #4
 8003624:	438a      	bics	r2, r1
 8003626:	621a      	str	r2, [r3, #32]
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x398>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x380>
 8003632:	4bae      	ldr	r3, [pc, #696]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	4bad      	ldr	r3, [pc, #692]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003638:	2104      	movs	r1, #4
 800363a:	430a      	orrs	r2, r1
 800363c:	621a      	str	r2, [r3, #32]
 800363e:	4bab      	ldr	r3, [pc, #684]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	4baa      	ldr	r3, [pc, #680]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003644:	2101      	movs	r1, #1
 8003646:	430a      	orrs	r2, r1
 8003648:	621a      	str	r2, [r3, #32]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0x398>
 800364c:	4ba7      	ldr	r3, [pc, #668]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	4ba6      	ldr	r3, [pc, #664]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003652:	2101      	movs	r1, #1
 8003654:	438a      	bics	r2, r1
 8003656:	621a      	str	r2, [r3, #32]
 8003658:	4ba4      	ldr	r3, [pc, #656]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	4ba3      	ldr	r3, [pc, #652]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800365e:	2104      	movs	r1, #4
 8003660:	438a      	bics	r2, r1
 8003662:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d014      	beq.n	8003696 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366c:	f7fe fc46 	bl	8001efc <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	e009      	b.n	800368a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fe fc41 	bl	8001efc <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	4a9b      	ldr	r2, [pc, #620]	; (80038f0 <HAL_RCC_OscConfig+0x624>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e12b      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	4b98      	ldr	r3, [pc, #608]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x3aa>
 8003694:	e013      	b.n	80036be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fe fc31 	bl	8001efc <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	e009      	b.n	80036b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fc2c 	bl	8001efc <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	4a91      	ldr	r2, [pc, #580]	; (80038f0 <HAL_RCC_OscConfig+0x624>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e116      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036be:	231f      	movs	r3, #31
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	4b87      	ldr	r3, [pc, #540]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036ce:	4989      	ldr	r1, [pc, #548]	; (80038f4 <HAL_RCC_OscConfig+0x628>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	4013      	ands	r3, r2
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d12a      	bne.n	800373c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036e6:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ea:	4b80      	ldr	r3, [pc, #512]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036ec:	2104      	movs	r1, #4
 80036ee:	430a      	orrs	r2, r1
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80036f2:	4b7e      	ldr	r3, [pc, #504]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f6:	4b7d      	ldr	r3, [pc, #500]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80036f8:	2101      	movs	r1, #1
 80036fa:	430a      	orrs	r2, r1
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fbfd 	bl	8001efc <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003708:	f7fe fbf8 	bl	8001efc <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0e3      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800371a:	4b74      	ldr	r3, [pc, #464]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2202      	movs	r2, #2
 8003720:	4013      	ands	r3, r2
 8003722:	d0f1      	beq.n	8003708 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003724:	4b71      	ldr	r3, [pc, #452]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	22f8      	movs	r2, #248	; 0xf8
 800372a:	4393      	bics	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	00da      	lsls	r2, r3, #3
 8003734:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003736:	430a      	orrs	r2, r1
 8003738:	635a      	str	r2, [r3, #52]	; 0x34
 800373a:	e034      	b.n	80037a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	3305      	adds	r3, #5
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003744:	4b69      	ldr	r3, [pc, #420]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	4b68      	ldr	r3, [pc, #416]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800374a:	2104      	movs	r1, #4
 800374c:	438a      	bics	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003750:	4b66      	ldr	r3, [pc, #408]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	22f8      	movs	r2, #248	; 0xf8
 8003756:	4393      	bics	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	00da      	lsls	r2, r3, #3
 8003760:	4b62      	ldr	r3, [pc, #392]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003762:	430a      	orrs	r2, r1
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
 8003766:	e01e      	b.n	80037a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003768:	4b60      	ldr	r3, [pc, #384]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800376a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376c:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800376e:	2104      	movs	r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003774:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800377a:	2101      	movs	r1, #1
 800377c:	438a      	bics	r2, r1
 800377e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7fe fbbc 	bl	8001efc <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800378a:	f7fe fbb7 	bl	8001efc <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0a2      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	2202      	movs	r2, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d1f1      	bne.n	800378a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d100      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4e4>
 80037ae:	e097      	b.n	80038e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b0:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	220c      	movs	r2, #12
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d100      	bne.n	80037be <HAL_RCC_OscConfig+0x4f2>
 80037bc:	e06b      	b.n	8003896 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d14c      	bne.n	8003860 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b48      	ldr	r3, [pc, #288]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80037cc:	494a      	ldr	r1, [pc, #296]	; (80038f8 <HAL_RCC_OscConfig+0x62c>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe fb93 	bl	8001efc <HAL_GetTick>
 80037d6:	0003      	movs	r3, r0
 80037d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fb8e 	bl	8001efc <HAL_GetTick>
 80037e0:	0002      	movs	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e079      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	049b      	lsls	r3, r3, #18
 80037f6:	4013      	ands	r3, r2
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	220f      	movs	r2, #15
 8003800:	4393      	bics	r3, r2
 8003802:	0019      	movs	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800380a:	430a      	orrs	r2, r1
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4a3a      	ldr	r2, [pc, #232]	; (80038fc <HAL_RCC_OscConfig+0x630>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	431a      	orrs	r2, r3
 8003822:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003828:	4b30      	ldr	r3, [pc, #192]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0449      	lsls	r1, r1, #17
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fb61 	bl	8001efc <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fb5c 	bl	8001efc <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e047      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	049b      	lsls	r3, r3, #18
 800385a:	4013      	ands	r3, r2
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x574>
 800385e:	e03f      	b.n	80038e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x62c>)
 8003868:	400a      	ands	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fb46 	bl	8001efc <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7fe fb41 	bl	8001efc <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e02c      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	049b      	lsls	r3, r3, #18
 8003890:	4013      	ands	r3, r2
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x5aa>
 8003894:	e024      	b.n	80038e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01f      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_OscConfig+0x620>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	401a      	ands	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10e      	bne.n	80038dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	220f      	movs	r2, #15
 80038c2:	401a      	ands	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	23f0      	movs	r3, #240	; 0xf0
 80038d0:	039b      	lsls	r3, r3, #14
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b008      	add	sp, #32
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	40021000 	.word	0x40021000
 80038f0:	00001388 	.word	0x00001388
 80038f4:	efffffff 	.word	0xefffffff
 80038f8:	feffffff 	.word	0xfeffffff
 80038fc:	ffc2ffff 	.word	0xffc2ffff

08003900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b3      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003914:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d911      	bls.n	8003946 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	4393      	bics	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	4013      	ands	r3, r2
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e09a      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	d015      	beq.n	800397c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2204      	movs	r2, #4
 8003956:	4013      	ands	r3, r2
 8003958:	d006      	beq.n	8003968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800395a:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003960:	21e0      	movs	r1, #224	; 0xe0
 8003962:	00c9      	lsls	r1, r1, #3
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	22f0      	movs	r2, #240	; 0xf0
 800396e:	4393      	bics	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d040      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	4013      	ands	r3, r2
 8003998:	d114      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06e      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	049b      	lsls	r3, r3, #18
 80039ae:	4013      	ands	r3, r2
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e062      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e05b      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4393      	bics	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fa90 	bl	8001efc <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e0:	e009      	b.n	80039f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e2:	f7fe fa8b 	bl	8001efc <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_RCC_ClockConfig+0x18c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e042      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	220c      	movs	r2, #12
 80039fc:	401a      	ands	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1ec      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d211      	bcs.n	8003a3a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x184>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4013      	ands	r3, r2
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e020      	b.n	8003a7c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_RCC_ClockConfig+0x190>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a58:	f000 f820 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a5c:	0001      	movs	r1, r0
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x188>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	220f      	movs	r2, #15
 8003a66:	4013      	ands	r3, r2
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x194>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	40da      	lsrs	r2, r3
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x198>)
 8003a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fe f9fb 	bl	8001e70 <HAL_InitTick>
  
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	00001388 	.word	0x00001388
 8003a90:	fffff8ff 	.word	0xfffff8ff
 8003a94:	080070c8 	.word	0x080070c8
 8003a98:	2000001c 	.word	0x2000001c

08003a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b08f      	sub	sp, #60	; 0x3c
 8003aa0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ab6:	c313      	stmia	r3!, {r0, r1, r4}
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	220c      	movs	r2, #12
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d002      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x4a>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d003      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x50>
 8003ae4:	e02d      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aea:	e02d      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	220f      	movs	r2, #15
 8003af2:	4013      	ands	r3, r2
 8003af4:	2214      	movs	r2, #20
 8003af6:	18ba      	adds	r2, r7, r2
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	220f      	movs	r2, #15
 8003b02:	4013      	ands	r3, r2
 8003b04:	1d3a      	adds	r2, r7, #4
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	025b      	lsls	r3, r3, #9
 8003b10:	4013      	ands	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b16:	4812      	ldr	r0, [pc, #72]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b18:	f7fc fb08 	bl	800012c <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	001a      	movs	r2, r3
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	4353      	muls	r3, r2
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
 8003b26:	e009      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2a:	000a      	movs	r2, r1
 8003b2c:	0152      	lsls	r2, r2, #5
 8003b2e:	1a52      	subs	r2, r2, r1
 8003b30:	0193      	lsls	r3, r2, #6
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	185b      	adds	r3, r3, r1
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b40:	e002      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b00f      	add	sp, #60	; 0x3c
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	08006794 	.word	0x08006794
 8003b58:	080067a4 	.word	0x080067a4
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	2000001c 	.word	0x2000001c

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b7c:	f7ff fff2 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b80:	0001      	movs	r1, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	2207      	movs	r2, #7
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	40d9      	lsrs	r1, r3
 8003b92:	000b      	movs	r3, r1
}    
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	080070d8 	.word	0x080070d8

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	025b      	lsls	r3, r3, #9
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003bc0:	e08e      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2017      	movs	r0, #23
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	055b      	lsls	r3, r3, #21
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d110      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	0549      	lsls	r1, r1, #21
 8003be0:	430a      	orrs	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
 8003be4:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	055b      	lsls	r3, r3, #21
 8003bec:	4013      	ands	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	183b      	adds	r3, r7, r0
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d11a      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c04:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	0049      	lsls	r1, r1, #1
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fe f973 	bl	8001efc <HAL_GetTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1c:	f7fe f96e 	bl	8001efc <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e077      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2e:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d034      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	23c0      	movs	r3, #192	; 0xc0
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4013      	ands	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a33      	ldr	r2, [pc, #204]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c66:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	0249      	lsls	r1, r1, #9
 8003c70:	430a      	orrs	r2, r1
 8003c72:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7a:	492e      	ldr	r1, [pc, #184]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f935 	bl	8001efc <HAL_GetTick>
 8003c92:	0003      	movs	r3, r0
 8003c94:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	e009      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fe f930 	bl	8001efc <HAL_GetTick>
 8003c9c:	0002      	movs	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e038      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cca:	2317      	movs	r3, #23
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cda:	4918      	ldr	r1, [pc, #96]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	2203      	movs	r2, #3
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	4013      	ands	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	4393      	bics	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	fffffcff 	.word	0xfffffcff
 8003d34:	fffeffff 	.word	0xfffeffff
 8003d38:	00001388 	.word	0x00001388
 8003d3c:	efffffff 	.word	0xefffffff

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e042      	b.n	8003dd8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	223d      	movs	r2, #61	; 0x3d
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223c      	movs	r2, #60	; 0x3c
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fd ff73 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223d      	movs	r2, #61	; 0x3d
 8003d72:	2102      	movs	r1, #2
 8003d74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	0019      	movs	r1, r3
 8003d80:	0010      	movs	r0, r2
 8003d82:	f000 f897 	bl	8003eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2246      	movs	r2, #70	; 0x46
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223e      	movs	r2, #62	; 0x3e
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223f      	movs	r2, #63	; 0x3f
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2241      	movs	r2, #65	; 0x41
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2242      	movs	r2, #66	; 0x42
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2243      	movs	r2, #67	; 0x43
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2244      	movs	r2, #68	; 0x44
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2245      	movs	r2, #69	; 0x45
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	223d      	movs	r2, #61	; 0x3d
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223d      	movs	r2, #61	; 0x3d
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e02d      	b.n	8003e54 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	223d      	movs	r2, #61	; 0x3d
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <HAL_TIM_Base_Start+0x7c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_Base_Start+0x3e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_TIM_Base_Start+0x80>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_Base_Start+0x3e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <HAL_TIM_Base_Start+0x84>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d111      	bne.n	8003e42 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2207      	movs	r2, #7
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d010      	beq.n	8003e52 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e40:	e007      	b.n	8003e52 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b004      	add	sp, #16
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40014000 	.word	0x40014000

08003e68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <HAL_TIM_Base_Stop+0x44>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d10d      	bne.n	8003e98 <HAL_TIM_Base_Stop+0x30>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <HAL_TIM_Base_Stop+0x48>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_Base_Stop+0x30>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2101      	movs	r1, #1
 8003e94:	438a      	bics	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	223d      	movs	r2, #61	; 0x3d
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b002      	add	sp, #8
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	00001111 	.word	0x00001111
 8003eb0:	00000444 	.word	0x00000444

08003eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0xd0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x20>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <TIM_Base_SetConfig+0xd4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2270      	movs	r2, #112	; 0x70
 8003ed8:	4393      	bics	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <TIM_Base_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a25      	ldr	r2, [pc, #148]	; (8003f88 <TIM_Base_SetConfig+0xd4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <TIM_Base_SetConfig+0xd8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <TIM_Base_SetConfig+0xdc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <TIM_Base_SetConfig+0xe0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <TIM_Base_SetConfig+0xe4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <TIM_Base_SetConfig+0xe8>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	001a      	movs	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a0c      	ldr	r2, [pc, #48]	; (8003f84 <TIM_Base_SetConfig+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_Base_SetConfig+0xba>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <TIM_Base_SetConfig+0xdc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_Base_SetConfig+0xba>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <TIM_Base_SetConfig+0xe0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0xba>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <TIM_Base_SetConfig+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d103      	bne.n	8003f76 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	615a      	str	r2, [r3, #20]
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40002000 	.word	0x40002000
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800
 8003f9c:	fffffcff 	.word	0xfffffcff

08003fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e044      	b.n	800403c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2274      	movs	r2, #116	; 0x74
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fd febf 	bl	8001d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	438a      	bics	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 fae4 	bl	80045b0 <UART_SetConfig>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e024      	b.n	800403c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fc17 	bl	8004830 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	490d      	ldr	r1, [pc, #52]	; (8004044 <HAL_UART_Init+0xa4>)
 800400e:	400a      	ands	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2108      	movs	r1, #8
 800401e:	438a      	bics	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fcaf 	bl	8004998 <UART_CheckIdleState>
 800403a:	0003      	movs	r3, r0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fffff7ff 	.word	0xfffff7ff

08004048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	1dbb      	adds	r3, r7, #6
 8004056:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	2b20      	cmp	r3, #32
 800405e:	d000      	beq.n	8004062 <HAL_UART_Transmit+0x1a>
 8004060:	e096      	b.n	8004190 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_UART_Transmit+0x28>
 8004068:	1dbb      	adds	r3, r7, #6
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e08e      	b.n	8004192 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	015b      	lsls	r3, r3, #5
 800407c:	429a      	cmp	r2, r3
 800407e:	d109      	bne.n	8004094 <HAL_UART_Transmit+0x4c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d001      	beq.n	8004094 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e07e      	b.n	8004192 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2274      	movs	r2, #116	; 0x74
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Transmit+0x5a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e077      	b.n	8004192 <HAL_UART_Transmit+0x14a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2274      	movs	r2, #116	; 0x74
 80040a6:	2101      	movs	r1, #1
 80040a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	2100      	movs	r1, #0
 80040b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2221      	movs	r2, #33	; 0x21
 80040b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b8:	f7fd ff20 	bl	8001efc <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1dba      	adds	r2, r7, #6
 80040c4:	2150      	movs	r1, #80	; 0x50
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1dba      	adds	r2, r7, #6
 80040ce:	2152      	movs	r1, #82	; 0x52
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	015b      	lsls	r3, r3, #5
 80040dc:	429a      	cmp	r2, r3
 80040de:	d108      	bne.n	80040f2 <HAL_UART_Transmit+0xaa>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e003      	b.n	80040fa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2274      	movs	r2, #116	; 0x74
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004102:	e02d      	b.n	8004160 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	0013      	movs	r3, r2
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	f000 fc89 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 8004116:	1e03      	subs	r3, r0, #0
 8004118:	d001      	beq.n	800411e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e039      	b.n	8004192 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	05d2      	lsls	r2, r2, #23
 800412e:	0dd2      	lsrs	r2, r2, #23
 8004130:	b292      	uxth	r2, r2
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	3302      	adds	r3, #2
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e008      	b.n	800414e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b292      	uxth	r2, r2
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2252      	movs	r2, #82	; 0x52
 8004152:	5a9b      	ldrh	r3, [r3, r2]
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b299      	uxth	r1, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2252      	movs	r2, #82	; 0x52
 800415e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2252      	movs	r2, #82	; 0x52
 8004164:	5a9b      	ldrh	r3, [r3, r2]
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1cb      	bne.n	8004104 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	0013      	movs	r3, r2
 8004176:	2200      	movs	r2, #0
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	f000 fc55 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d001      	beq.n	8004186 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e005      	b.n	8004192 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b008      	add	sp, #32
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4ab4      	ldr	r2, [pc, #720]	; (8004490 <HAL_UART_IRQHandler+0x2f4>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d112      	bne.n	80041f0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2220      	movs	r2, #32
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2220      	movs	r2, #32
 80041d6:	4013      	ands	r3, r2
 80041d8:	d00a      	beq.n	80041f0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d100      	bne.n	80041e4 <HAL_UART_IRQHandler+0x48>
 80041e2:	e1ba      	b.n	800455a <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	0010      	movs	r0, r2
 80041ec:	4798      	blx	r3
      }
      return;
 80041ee:	e1b4      	b.n	800455a <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d100      	bne.n	80041f8 <HAL_UART_IRQHandler+0x5c>
 80041f6:	e0d9      	b.n	80043ac <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	d104      	bne.n	800420a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	4aa4      	ldr	r2, [pc, #656]	; (8004494 <HAL_UART_IRQHandler+0x2f8>)
 8004204:	4013      	ands	r3, r2
 8004206:	d100      	bne.n	800420a <HAL_UART_IRQHandler+0x6e>
 8004208:	e0d0      	b.n	80043ac <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	d010      	beq.n	8004234 <HAL_UART_IRQHandler+0x98>
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4013      	ands	r3, r2
 800421a:	d00b      	beq.n	8004234 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	589b      	ldr	r3, [r3, r2]
 800422a:	2201      	movs	r2, #1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d00f      	beq.n	800425c <HAL_UART_IRQHandler+0xc0>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2201      	movs	r2, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d00b      	beq.n	800425c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2202      	movs	r2, #2
 800424a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	589b      	ldr	r3, [r3, r2]
 8004252:	2204      	movs	r2, #4
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d00f      	beq.n	8004284 <HAL_UART_IRQHandler+0xe8>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	d00b      	beq.n	8004284 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2204      	movs	r2, #4
 8004272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	2202      	movs	r2, #2
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2208      	movs	r2, #8
 8004288:	4013      	ands	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
 8004292:	d103      	bne.n	800429c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800429a:	d00b      	beq.n	80042b4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	589b      	ldr	r3, [r3, r2]
 80042aa:	2208      	movs	r2, #8
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	4013      	ands	r3, r2
 80042bc:	d011      	beq.n	80042e2 <HAL_UART_IRQHandler+0x146>
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	04db      	lsls	r3, r3, #19
 80042c4:	4013      	ands	r3, r2
 80042c6:	d00c      	beq.n	80042e2 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	589b      	ldr	r3, [r3, r2]
 80042d8:	2220      	movs	r2, #32
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d100      	bne.n	80042ee <HAL_UART_IRQHandler+0x152>
 80042ec:	e137      	b.n	800455e <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2220      	movs	r2, #32
 80042f2:	4013      	ands	r3, r2
 80042f4:	d00c      	beq.n	8004310 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2220      	movs	r2, #32
 80042fa:	4013      	ands	r3, r2
 80042fc:	d008      	beq.n	8004310 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	0010      	movs	r0, r2
 800430e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	589b      	ldr	r3, [r3, r2]
 8004316:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	4013      	ands	r3, r2
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2228      	movs	r2, #40	; 0x28
 800432a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432c:	d033      	beq.n	8004396 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 fbf7 	bl	8004b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	4013      	ands	r3, r2
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d123      	bne.n	800438c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	438a      	bics	r2, r1
 8004352:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a4d      	ldr	r2, [pc, #308]	; (8004498 <HAL_UART_IRQHandler+0x2fc>)
 8004362:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	0018      	movs	r0, r3
 800436a:	f7fd ff0b 	bl	8002184 <HAL_DMA_Abort_IT>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d01a      	beq.n	80043a8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	0018      	movs	r0, r3
 800437e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e012      	b.n	80043a8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 f8ff 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	e00d      	b.n	80043a8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f8fa 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e008      	b.n	80043a8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 f8f5 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	2100      	movs	r1, #0
 80043a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80043a6:	e0da      	b.n	800455e <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	46c0      	nop			; (mov r8, r8)
    return;
 80043aa:	e0d8      	b.n	800455e <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d000      	beq.n	80043b6 <HAL_UART_IRQHandler+0x21a>
 80043b4:	e0b2      	b.n	800451c <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2210      	movs	r2, #16
 80043ba:	4013      	ands	r3, r2
 80043bc:	d100      	bne.n	80043c0 <HAL_UART_IRQHandler+0x224>
 80043be:	e0ad      	b.n	800451c <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2210      	movs	r2, #16
 80043c4:	4013      	ands	r3, r2
 80043c6:	d100      	bne.n	80043ca <HAL_UART_IRQHandler+0x22e>
 80043c8:	e0a8      	b.n	800451c <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4013      	ands	r3, r2
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d15f      	bne.n	80044a0 <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	2108      	movs	r1, #8
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d100      	bne.n	80043f8 <HAL_UART_IRQHandler+0x25c>
 80043f6:	e0b4      	b.n	8004562 <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2258      	movs	r2, #88	; 0x58
 80043fc:	5a9b      	ldrh	r3, [r3, r2]
 80043fe:	187a      	adds	r2, r7, r1
 8004400:	8812      	ldrh	r2, [r2, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d300      	bcc.n	8004408 <HAL_UART_IRQHandler+0x26c>
 8004406:	e0ac      	b.n	8004562 <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	187a      	adds	r2, r7, r1
 800440c:	215a      	movs	r1, #90	; 0x5a
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b20      	cmp	r3, #32
 800441a:	d02a      	beq.n	8004472 <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	491d      	ldr	r1, [pc, #116]	; (800449c <HAL_UART_IRQHandler+0x300>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2101      	movs	r1, #1
 8004438:	438a      	bics	r2, r1
 800443a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	438a      	bics	r2, r1
 800444a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2110      	movs	r1, #16
 8004464:	438a      	bics	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	0018      	movs	r0, r3
 800446e:	f7fd fe51 	bl	8002114 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2258      	movs	r2, #88	; 0x58
 8004476:	5a9a      	ldrh	r2, [r3, r2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	215a      	movs	r1, #90	; 0x5a
 800447c:	5a5b      	ldrh	r3, [r3, r1]
 800447e:	b29b      	uxth	r3, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0011      	movs	r1, r2
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f885 	bl	8004598 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800448e:	e068      	b.n	8004562 <HAL_UART_IRQHandler+0x3c6>
 8004490:	0000080f 	.word	0x0000080f
 8004494:	04000120 	.word	0x04000120
 8004498:	08004b85 	.word	0x08004b85
 800449c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2258      	movs	r2, #88	; 0x58
 80044a4:	5a99      	ldrh	r1, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	225a      	movs	r2, #90	; 0x5a
 80044aa:	5a9b      	ldrh	r3, [r3, r2]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	200a      	movs	r0, #10
 80044b0:	183b      	adds	r3, r7, r0
 80044b2:	1a8a      	subs	r2, r1, r2
 80044b4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	225a      	movs	r2, #90	; 0x5a
 80044ba:	5a9b      	ldrh	r3, [r3, r2]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d051      	beq.n	8004566 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 80044c2:	183b      	adds	r3, r7, r0
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04d      	beq.n	8004566 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4927      	ldr	r1, [pc, #156]	; (8004574 <HAL_UART_IRQHandler+0x3d8>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2101      	movs	r1, #1
 80044e6:	438a      	bics	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2110      	movs	r1, #16
 8004508:	438a      	bics	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800450c:	183b      	adds	r3, r7, r0
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	0011      	movs	r1, r2
 8004514:	0018      	movs	r0, r3
 8004516:	f000 f83f 	bl	8004598 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800451a:	e024      	b.n	8004566 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	4013      	ands	r3, r2
 8004522:	d00d      	beq.n	8004540 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	4013      	ands	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	0010      	movs	r0, r2
 800453c:	4798      	blx	r3
    }
    return;
 800453e:	e014      	b.n	800456a <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	4013      	ands	r3, r2
 8004546:	d011      	beq.n	800456c <HAL_UART_IRQHandler+0x3d0>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	4013      	ands	r3, r2
 800454e:	d00d      	beq.n	800456c <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 fb2d 	bl	8004bb2 <UART_EndTransmit_IT>
    return;
 8004558:	e008      	b.n	800456c <HAL_UART_IRQHandler+0x3d0>
      return;
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	e006      	b.n	800456c <HAL_UART_IRQHandler+0x3d0>
    return;
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	e004      	b.n	800456c <HAL_UART_IRQHandler+0x3d0>
      return;
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	e002      	b.n	800456c <HAL_UART_IRQHandler+0x3d0>
      return;
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	e000      	b.n	800456c <HAL_UART_IRQHandler+0x3d0>
    return;
 800456a:	46c0      	nop			; (mov r8, r8)
  }

}
 800456c:	46bd      	mov	sp, r7
 800456e:	b008      	add	sp, #32
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	fffffedf 	.word	0xfffffedf

08004578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	000a      	movs	r2, r1
 80045a2:	1cbb      	adds	r3, r7, #2
 80045a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b8:	231e      	movs	r3, #30
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a8d      	ldr	r2, [pc, #564]	; (8004814 <UART_SetConfig+0x264>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	0019      	movs	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a88      	ldr	r2, [pc, #544]	; (8004818 <UART_SetConfig+0x268>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a7f      	ldr	r2, [pc, #508]	; (800481c <UART_SetConfig+0x26c>)
 800461e:	4013      	ands	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7b      	ldr	r2, [pc, #492]	; (8004820 <UART_SetConfig+0x270>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d127      	bne.n	8004686 <UART_SetConfig+0xd6>
 8004636:	4b7b      	ldr	r3, [pc, #492]	; (8004824 <UART_SetConfig+0x274>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	2203      	movs	r2, #3
 800463c:	4013      	ands	r3, r2
 800463e:	2b03      	cmp	r3, #3
 8004640:	d00d      	beq.n	800465e <UART_SetConfig+0xae>
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0xcc>
 8004644:	2b02      	cmp	r3, #2
 8004646:	d014      	beq.n	8004672 <UART_SetConfig+0xc2>
 8004648:	d818      	bhi.n	800467c <UART_SetConfig+0xcc>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <UART_SetConfig+0xa4>
 800464e:	2b01      	cmp	r3, #1
 8004650:	d00a      	beq.n	8004668 <UART_SetConfig+0xb8>
 8004652:	e013      	b.n	800467c <UART_SetConfig+0xcc>
 8004654:	231f      	movs	r3, #31
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e021      	b.n	80046a2 <UART_SetConfig+0xf2>
 800465e:	231f      	movs	r3, #31
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2202      	movs	r2, #2
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e01c      	b.n	80046a2 <UART_SetConfig+0xf2>
 8004668:	231f      	movs	r3, #31
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	2204      	movs	r2, #4
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e017      	b.n	80046a2 <UART_SetConfig+0xf2>
 8004672:	231f      	movs	r3, #31
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2208      	movs	r2, #8
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e012      	b.n	80046a2 <UART_SetConfig+0xf2>
 800467c:	231f      	movs	r3, #31
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	2210      	movs	r2, #16
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e00d      	b.n	80046a2 <UART_SetConfig+0xf2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a67      	ldr	r2, [pc, #412]	; (8004828 <UART_SetConfig+0x278>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d104      	bne.n	800469a <UART_SetConfig+0xea>
 8004690:	231f      	movs	r3, #31
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e003      	b.n	80046a2 <UART_SetConfig+0xf2>
 800469a:	231f      	movs	r3, #31
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2210      	movs	r2, #16
 80046a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d15d      	bne.n	800476a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80046ae:	231f      	movs	r3, #31
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d015      	beq.n	80046e4 <UART_SetConfig+0x134>
 80046b8:	dc18      	bgt.n	80046ec <UART_SetConfig+0x13c>
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00d      	beq.n	80046da <UART_SetConfig+0x12a>
 80046be:	dc15      	bgt.n	80046ec <UART_SetConfig+0x13c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <UART_SetConfig+0x11a>
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d005      	beq.n	80046d4 <UART_SetConfig+0x124>
 80046c8:	e010      	b.n	80046ec <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ca:	f7ff fa55 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 80046ce:	0003      	movs	r3, r0
 80046d0:	61bb      	str	r3, [r7, #24]
        break;
 80046d2:	e012      	b.n	80046fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b55      	ldr	r3, [pc, #340]	; (800482c <UART_SetConfig+0x27c>)
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e00f      	b.n	80046fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7ff f9df 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 80046de:	0003      	movs	r3, r0
 80046e0:	61bb      	str	r3, [r7, #24]
        break;
 80046e2:	e00a      	b.n	80046fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	61bb      	str	r3, [r7, #24]
        break;
 80046ea:	e006      	b.n	80046fa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046f0:	231e      	movs	r3, #30
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
        break;
 80046f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d100      	bne.n	8004702 <UART_SetConfig+0x152>
 8004700:	e07b      	b.n	80047fa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	005a      	lsls	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	18d2      	adds	r2, r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0019      	movs	r1, r3
 8004714:	0010      	movs	r0, r2
 8004716:	f7fb fd09 	bl	800012c <__udivsi3>
 800471a:	0003      	movs	r3, r0
 800471c:	b29b      	uxth	r3, r3
 800471e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	d91c      	bls.n	8004760 <UART_SetConfig+0x1b0>
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	429a      	cmp	r2, r3
 800472e:	d217      	bcs.n	8004760 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	b29a      	uxth	r2, r3
 8004734:	200e      	movs	r0, #14
 8004736:	183b      	adds	r3, r7, r0
 8004738:	210f      	movs	r1, #15
 800473a:	438a      	bics	r2, r1
 800473c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	2207      	movs	r2, #7
 8004746:	4013      	ands	r3, r2
 8004748:	b299      	uxth	r1, r3
 800474a:	183b      	adds	r3, r7, r0
 800474c:	183a      	adds	r2, r7, r0
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	183a      	adds	r2, r7, r0
 800475a:	8812      	ldrh	r2, [r2, #0]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e04c      	b.n	80047fa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004760:	231e      	movs	r3, #30
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	e047      	b.n	80047fa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476a:	231f      	movs	r3, #31
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d015      	beq.n	80047a0 <UART_SetConfig+0x1f0>
 8004774:	dc18      	bgt.n	80047a8 <UART_SetConfig+0x1f8>
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00d      	beq.n	8004796 <UART_SetConfig+0x1e6>
 800477a:	dc15      	bgt.n	80047a8 <UART_SetConfig+0x1f8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <UART_SetConfig+0x1d6>
 8004780:	2b02      	cmp	r3, #2
 8004782:	d005      	beq.n	8004790 <UART_SetConfig+0x1e0>
 8004784:	e010      	b.n	80047a8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004786:	f7ff f9f7 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 800478a:	0003      	movs	r3, r0
 800478c:	61bb      	str	r3, [r7, #24]
        break;
 800478e:	e012      	b.n	80047b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <UART_SetConfig+0x27c>)
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e00f      	b.n	80047b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004796:	f7ff f981 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 800479a:	0003      	movs	r3, r0
 800479c:	61bb      	str	r3, [r7, #24]
        break;
 800479e:	e00a      	b.n	80047b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	61bb      	str	r3, [r7, #24]
        break;
 80047a6:	e006      	b.n	80047b6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ac:	231e      	movs	r3, #30
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
        break;
 80047b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	085a      	lsrs	r2, r3, #1
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	18d2      	adds	r2, r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	0019      	movs	r1, r3
 80047cc:	0010      	movs	r0, r2
 80047ce:	f7fb fcad 	bl	800012c <__udivsi3>
 80047d2:	0003      	movs	r3, r0
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d909      	bls.n	80047f2 <UART_SetConfig+0x242>
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d204      	bcs.n	80047f2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e003      	b.n	80047fa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80047f2:	231e      	movs	r3, #30
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004806:	231e      	movs	r3, #30
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b008      	add	sp, #32
 8004812:	bd80      	pop	{r7, pc}
 8004814:	ffff69f3 	.word	0xffff69f3
 8004818:	ffffcfff 	.word	0xffffcfff
 800481c:	fffff4ff 	.word	0xfffff4ff
 8004820:	40013800 	.word	0x40013800
 8004824:	40021000 	.word	0x40021000
 8004828:	40004400 	.word	0x40004400
 800482c:	007a1200 	.word	0x007a1200

08004830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2201      	movs	r2, #1
 800483e:	4013      	ands	r3, r2
 8004840:	d00b      	beq.n	800485a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a4a      	ldr	r2, [pc, #296]	; (8004974 <UART_AdvFeatureConfig+0x144>)
 800484a:	4013      	ands	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d00b      	beq.n	800487c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4a43      	ldr	r2, [pc, #268]	; (8004978 <UART_AdvFeatureConfig+0x148>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d00b      	beq.n	800489e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a3b      	ldr	r2, [pc, #236]	; (800497c <UART_AdvFeatureConfig+0x14c>)
 800488e:	4013      	ands	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2208      	movs	r2, #8
 80048a4:	4013      	ands	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a34      	ldr	r2, [pc, #208]	; (8004980 <UART_AdvFeatureConfig+0x150>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2210      	movs	r2, #16
 80048c6:	4013      	ands	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a2c      	ldr	r2, [pc, #176]	; (8004984 <UART_AdvFeatureConfig+0x154>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2220      	movs	r2, #32
 80048e8:	4013      	ands	r3, r2
 80048ea:	d00b      	beq.n	8004904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4a25      	ldr	r2, [pc, #148]	; (8004988 <UART_AdvFeatureConfig+0x158>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	4013      	ands	r3, r2
 800490c:	d01d      	beq.n	800494a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <UART_AdvFeatureConfig+0x15c>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	035b      	lsls	r3, r3, #13
 800492e:	429a      	cmp	r2, r3
 8004930:	d10b      	bne.n	800494a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a15      	ldr	r2, [pc, #84]	; (8004990 <UART_AdvFeatureConfig+0x160>)
 800493a:	4013      	ands	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	4013      	ands	r3, r2
 8004952:	d00b      	beq.n	800496c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <UART_AdvFeatureConfig+0x164>)
 800495c:	4013      	ands	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fffdffff 	.word	0xfffdffff
 8004978:	fffeffff 	.word	0xfffeffff
 800497c:	fffbffff 	.word	0xfffbffff
 8004980:	ffff7fff 	.word	0xffff7fff
 8004984:	ffffefff 	.word	0xffffefff
 8004988:	ffffdfff 	.word	0xffffdfff
 800498c:	ffefffff 	.word	0xffefffff
 8004990:	ff9fffff 	.word	0xff9fffff
 8004994:	fff7ffff 	.word	0xfff7ffff

08004998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	2100      	movs	r1, #0
 80049a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a8:	f7fd faa8 	bl	8001efc <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2208      	movs	r2, #8
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d10c      	bne.n	80049d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	0391      	lsls	r1, r2, #14
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <UART_CheckIdleState+0x8c>)
 80049c8:	9200      	str	r2, [sp, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f000 f82c 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d001      	beq.n	80049d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e021      	b.n	8004a1c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2204      	movs	r2, #4
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d10c      	bne.n	8004a00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2280      	movs	r2, #128	; 0x80
 80049ea:	03d1      	lsls	r1, r2, #15
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <UART_CheckIdleState+0x8c>)
 80049f0:	9200      	str	r2, [sp, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f000 f818 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e00d      	b.n	8004a1c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2274      	movs	r2, #116	; 0x74
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	01ffffff 	.word	0x01ffffff

08004a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a38:	e05e      	b.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	d05b      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fd fa5c 	bl	8001efc <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d11b      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	492f      	ldr	r1, [pc, #188]	; (8004b20 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	438a      	bics	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2274      	movs	r2, #116	; 0x74
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e044      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2204      	movs	r2, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	d02e      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d124      	bne.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4917      	ldr	r1, [pc, #92]	; (8004b20 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	2120      	movs	r1, #32
 8004aea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2274      	movs	r2, #116	; 0x74
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e00f      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	425a      	negs	r2, r3
 8004b08:	4153      	adcs	r3, r2
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d091      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	fffffe5f 	.word	0xfffffe5f

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4912      	ldr	r1, [pc, #72]	; (8004b80 <UART_EndRxTransfer+0x5c>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2101      	movs	r1, #1
 8004b48:	438a      	bics	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2110      	movs	r1, #16
 8004b60:	438a      	bics	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	fffffedf 	.word	0xfffffedf

08004b84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	225a      	movs	r2, #90	; 0x5a
 8004b96:	2100      	movs	r1, #0
 8004b98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2252      	movs	r2, #82	; 0x52
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7ff fcef 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2140      	movs	r1, #64	; 0x40
 8004bc6:	438a      	bics	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7ff fccd 	bl	8004578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <my_strlen>:
 * @brief  求字符串长度
 * @param[in] {str} 字符串地址
 * @return 数据长度
 */
unsigned long my_strlen(unsigned char *str)  
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
    unsigned long len = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
    if(str == NULL) { 
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <my_strlen+0x16>
        return 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e00c      	b.n	8004c16 <my_strlen+0x30>
    }
    
    for(len = 0; *str ++ != '\0'; ) {
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e002      	b.n	8004c08 <my_strlen+0x22>
        len ++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
    for(len = 0; *str ++ != '\0'; ) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f6      	bne.n	8004c02 <my_strlen+0x1c>
    }
    
    return len;
 8004c14:	68fb      	ldr	r3, [r7, #12]
}
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <my_memcpy>:
 * @param[in] {src} 源地址
 * @param[in] {count} 拷贝数据个数
 * @return 数据处理完后的源地址
 */
void *my_memcpy(void *dest, const void *src, unsigned short count)  
{  
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	801a      	strh	r2, [r3, #0]
    unsigned char *pdest = (unsigned char *)dest;  
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	61bb      	str	r3, [r7, #24]
    const unsigned char *psrc  = (const unsigned char *)src;  
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	617b      	str	r3, [r7, #20]
    unsigned short i;
    
    if(dest == NULL || src == NULL) { 
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <my_memcpy+0x22>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <my_memcpy+0x26>
        return NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e045      	b.n	8004cd0 <my_memcpy+0xb2>
    }
    
    if((pdest <= psrc) || (pdest > psrc + count)) {  
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d906      	bls.n	8004c5a <my_memcpy+0x3c>
 8004c4c:	1dbb      	adds	r3, r7, #6
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	18d3      	adds	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d91c      	bls.n	8004c94 <my_memcpy+0x76>
        for(i = 0; i < count; i ++) {  
 8004c5a:	231e      	movs	r3, #30
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	e00f      	b.n	8004c84 <my_memcpy+0x66>
            pdest[i] = psrc[i];  
 8004c64:	201e      	movs	r0, #30
 8004c66:	183b      	adds	r3, r7, r0
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	69b9      	ldr	r1, [r7, #24]
 8004c74:	18cb      	adds	r3, r1, r3
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < count; i ++) {  
 8004c7a:	183b      	adds	r3, r7, r0
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	183b      	adds	r3, r7, r0
 8004c80:	3201      	adds	r2, #1
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	231e      	movs	r3, #30
 8004c86:	18fa      	adds	r2, r7, r3
 8004c88:	1dbb      	adds	r3, r7, #6
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3e8      	bcc.n	8004c64 <my_memcpy+0x46>
    if((pdest <= psrc) || (pdest > psrc + count)) {  
 8004c92:	e01c      	b.n	8004cce <my_memcpy+0xb0>
        }  
    }else {
        for(i = count; i > 0; i --) {  
 8004c94:	231e      	movs	r3, #30
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	1dba      	adds	r2, r7, #6
 8004c9a:	8812      	ldrh	r2, [r2, #0]
 8004c9c:	801a      	strh	r2, [r3, #0]
 8004c9e:	e011      	b.n	8004cc4 <my_memcpy+0xa6>
            pdest[i - 1] = psrc[i - 1];  
 8004ca0:	201e      	movs	r0, #30
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	18d2      	adds	r2, r2, r3
 8004cac:	183b      	adds	r3, r7, r0
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	18cb      	adds	r3, r1, r3
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	701a      	strb	r2, [r3, #0]
        for(i = count; i > 0; i --) {  
 8004cba:	183b      	adds	r3, r7, r0
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	183b      	adds	r3, r7, r0
 8004cc0:	3a01      	subs	r2, #1
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	231e      	movs	r3, #30
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e8      	bne.n	8004ca0 <my_memcpy+0x82>
        }  
    }  
    
    return dest;  
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b008      	add	sp, #32
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <byte_to_int>:
 * @brief  将4字节合并为1个32bit变量
 * @param[in] {value} 4字节数组
 * @return 合并完成后的32bit变量
 */
unsigned long byte_to_int(const unsigned char value[4])
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    unsigned long nubmer = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

    nubmer = (unsigned long)value[0];
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
    nubmer <<= 8;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	60fb      	str	r3, [r7, #12]
    nubmer |= (unsigned long)value[1];
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    nubmer <<= 8;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	60fb      	str	r3, [r7, #12]
    nubmer |= (unsigned long)value[2];
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3302      	adds	r3, #2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
    nubmer <<= 8;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	60fb      	str	r3, [r7, #12]
    nubmer |= (unsigned long)value[3];
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	001a      	movs	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
    
    return nubmer;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <mcu_dp_raw_update>:
 * @param[in] {len} 数据长度
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_raw_update(unsigned char dpid,const unsigned char value[],unsigned short len)
{
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6039      	str	r1, [r7, #0]
 8004d38:	0011      	movs	r1, r2
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	1c02      	adds	r2, r0, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	1c0a      	adds	r2, r1, #0
 8004d44:	801a      	strh	r2, [r3, #0]
    unsigned short send_len = 0;
 8004d46:	230e      	movs	r3, #14
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	801a      	strh	r2, [r3, #0]
    
    if(stop_update_flag == ENABLE)
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <mcu_dp_raw_update+0xb8>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <mcu_dp_raw_update+0x2c>
        return SUCCESS;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e041      	b.n	8004de0 <mcu_dp_raw_update+0xb0>
    //
    send_len = set_wifi_uart_byte(send_len,dpid);
 8004d5c:	250e      	movs	r5, #14
 8004d5e:	197c      	adds	r4, r7, r5
 8004d60:	1dfb      	adds	r3, r7, #7
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	0011      	movs	r1, r2
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f000 fd1c 	bl	80057a8 <set_wifi_uart_byte>
 8004d70:	0003      	movs	r3, r0
 8004d72:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_RAW);
 8004d74:	197c      	adds	r4, r7, r5
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 fd13 	bl	80057a8 <set_wifi_uart_byte>
 8004d82:	0003      	movs	r3, r0
 8004d84:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,len / 0x100);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	197c      	adds	r4, r7, r5
 8004d92:	197b      	adds	r3, r7, r5
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fd05 	bl	80057a8 <set_wifi_uart_byte>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,len % 0x100);
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	197c      	adds	r4, r7, r5
 8004daa:	197b      	adds	r3, r7, r5
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fcf9 	bl	80057a8 <set_wifi_uart_byte>
 8004db6:	0003      	movs	r3, r0
 8004db8:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_buffer(send_len,(unsigned char *)value,len);
 8004dba:	197c      	adds	r4, r7, r5
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	197b      	adds	r3, r7, r5
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fd0e 	bl	80057e8 <set_wifi_uart_buffer>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	8023      	strh	r3, [r4, #0]
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
 8004dd0:	197b      	adds	r3, r7, r5
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	2007      	movs	r0, #7
 8004dda:	f000 fd7f 	bl	80058dc <wifi_uart_write_frame>
    
    return SUCCESS;
 8004dde:	2301      	movs	r3, #1
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b004      	add	sp, #16
 8004de6:	bdb0      	pop	{r4, r5, r7, pc}
 8004de8:	20000265 	.word	0x20000265

08004dec <mcu_dp_bool_update>:
 * @param[in] {value} 当前dp值
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
{
 8004dec:	b5b0      	push	{r4, r5, r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	0002      	movs	r2, r0
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	1dbb      	adds	r3, r7, #6
 8004dfa:	1c0a      	adds	r2, r1, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
    unsigned short send_len = 0;
 8004dfe:	230e      	movs	r3, #14
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	801a      	strh	r2, [r3, #0]
    
    if(stop_update_flag == ENABLE)
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <mcu_dp_bool_update+0xc0>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <mcu_dp_bool_update+0x28>
        return SUCCESS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e047      	b.n	8004ea4 <mcu_dp_bool_update+0xb8>
    
    send_len = set_wifi_uart_byte(send_len,dpid);
 8004e14:	250e      	movs	r5, #14
 8004e16:	197c      	adds	r4, r7, r5
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	197b      	adds	r3, r7, r5
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fcc0 	bl	80057a8 <set_wifi_uart_byte>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_BOOL);
 8004e2c:	197c      	adds	r4, r7, r5
 8004e2e:	197b      	adds	r3, r7, r5
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	2101      	movs	r1, #1
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 fcb7 	bl	80057a8 <set_wifi_uart_byte>
 8004e3a:	0003      	movs	r3, r0
 8004e3c:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,0);
 8004e3e:	197c      	adds	r4, r7, r5
 8004e40:	197b      	adds	r3, r7, r5
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	2100      	movs	r1, #0
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 fcae 	bl	80057a8 <set_wifi_uart_byte>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,1);
 8004e50:	197c      	adds	r4, r7, r5
 8004e52:	197b      	adds	r3, r7, r5
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	2101      	movs	r1, #1
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 fca5 	bl	80057a8 <set_wifi_uart_byte>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	8023      	strh	r3, [r4, #0]
    //
    if(value == FALSE) {
 8004e62:	1dbb      	adds	r3, r7, #6
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <mcu_dp_bool_update+0x92>
        send_len = set_wifi_uart_byte(send_len,FALSE);
 8004e6a:	197c      	adds	r4, r7, r5
 8004e6c:	197b      	adds	r3, r7, r5
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	2100      	movs	r1, #0
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fc98 	bl	80057a8 <set_wifi_uart_byte>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	8023      	strh	r3, [r4, #0]
 8004e7c:	e009      	b.n	8004e92 <mcu_dp_bool_update+0xa6>
    }else {
        send_len = set_wifi_uart_byte(send_len,1);
 8004e7e:	230e      	movs	r3, #14
 8004e80:	18fc      	adds	r4, r7, r3
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	2101      	movs	r1, #1
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 fc8d 	bl	80057a8 <set_wifi_uart_byte>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	8023      	strh	r3, [r4, #0]
    }
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD, MCU_TX_VER, send_len);
 8004e92:	230e      	movs	r3, #14
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	2007      	movs	r0, #7
 8004e9e:	f000 fd1d 	bl	80058dc <wifi_uart_write_frame>
    
    return SUCCESS;
 8004ea2:	2301      	movs	r3, #1
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8004eac:	20000265 	.word	0x20000265

08004eb0 <mcu_dp_value_update>:
 * @param[in] {value} 当前dp值
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	1dfb      	adds	r3, r7, #7
 8004ebc:	701a      	strb	r2, [r3, #0]
    unsigned short send_len = 0;
 8004ebe:	230e      	movs	r3, #14
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
    
    if(stop_update_flag == ENABLE)
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <mcu_dp_value_update+0xe8>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <mcu_dp_value_update+0x24>
        return SUCCESS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e05d      	b.n	8004f90 <mcu_dp_value_update+0xe0>
    
    send_len = set_wifi_uart_byte(send_len,dpid);
 8004ed4:	250e      	movs	r5, #14
 8004ed6:	197c      	adds	r4, r7, r5
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	197b      	adds	r3, r7, r5
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	0011      	movs	r1, r2
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 fc60 	bl	80057a8 <set_wifi_uart_byte>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_VALUE);
 8004eec:	197c      	adds	r4, r7, r5
 8004eee:	197b      	adds	r3, r7, r5
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fc57 	bl	80057a8 <set_wifi_uart_byte>
 8004efa:	0003      	movs	r3, r0
 8004efc:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,0);
 8004efe:	197c      	adds	r4, r7, r5
 8004f00:	197b      	adds	r3, r7, r5
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2100      	movs	r1, #0
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fc4e 	bl	80057a8 <set_wifi_uart_byte>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,4);
 8004f10:	197c      	adds	r4, r7, r5
 8004f12:	197b      	adds	r3, r7, r5
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	2104      	movs	r1, #4
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fc45 	bl	80057a8 <set_wifi_uart_byte>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,value >> 24);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	197c      	adds	r4, r7, r5
 8004f2a:	197b      	adds	r3, r7, r5
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	0011      	movs	r1, r2
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 fc39 	bl	80057a8 <set_wifi_uart_byte>
 8004f36:	0003      	movs	r3, r0
 8004f38:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,value >> 16);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	197c      	adds	r4, r7, r5
 8004f42:	197b      	adds	r3, r7, r5
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	0011      	movs	r1, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f000 fc2d 	bl	80057a8 <set_wifi_uart_byte>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,value >> 8);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	197c      	adds	r4, r7, r5
 8004f5a:	197b      	adds	r3, r7, r5
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	0011      	movs	r1, r2
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 fc21 	bl	80057a8 <set_wifi_uart_byte>
 8004f66:	0003      	movs	r3, r0
 8004f68:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,value & 0xff);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	197c      	adds	r4, r7, r5
 8004f70:	197b      	adds	r3, r7, r5
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	0011      	movs	r1, r2
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 fc16 	bl	80057a8 <set_wifi_uart_byte>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	8023      	strh	r3, [r4, #0]
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
 8004f80:	197b      	adds	r3, r7, r5
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	001a      	movs	r2, r3
 8004f86:	2103      	movs	r1, #3
 8004f88:	2007      	movs	r0, #7
 8004f8a:	f000 fca7 	bl	80058dc <wifi_uart_write_frame>
    
    return SUCCESS;
 8004f8e:	2301      	movs	r3, #1
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b004      	add	sp, #16
 8004f96:	bdb0      	pop	{r4, r5, r7, pc}
 8004f98:	20000265 	.word	0x20000265

08004f9c <mcu_dp_enum_update>:
 * @param[in] {value} 当前dp值
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_enum_update(unsigned char dpid,unsigned char value)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	1dbb      	adds	r3, r7, #6
 8004faa:	1c0a      	adds	r2, r1, #0
 8004fac:	701a      	strb	r2, [r3, #0]
    unsigned short send_len = 0;
 8004fae:	230e      	movs	r3, #14
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
    
    if(stop_update_flag == ENABLE)
 8004fb6:	4b22      	ldr	r3, [pc, #136]	; (8005040 <mcu_dp_enum_update+0xa4>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <mcu_dp_enum_update+0x28>
        return SUCCESS;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e039      	b.n	8005038 <mcu_dp_enum_update+0x9c>
    
    send_len = set_wifi_uart_byte(send_len,dpid);
 8004fc4:	250e      	movs	r5, #14
 8004fc6:	197c      	adds	r4, r7, r5
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	197b      	adds	r3, r7, r5
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fbe8 	bl	80057a8 <set_wifi_uart_byte>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_ENUM);
 8004fdc:	197c      	adds	r4, r7, r5
 8004fde:	197b      	adds	r3, r7, r5
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fbdf 	bl	80057a8 <set_wifi_uart_byte>
 8004fea:	0003      	movs	r3, r0
 8004fec:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,0);
 8004fee:	197c      	adds	r4, r7, r5
 8004ff0:	197b      	adds	r3, r7, r5
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 fbd6 	bl	80057a8 <set_wifi_uart_byte>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	8023      	strh	r3, [r4, #0]
    send_len = set_wifi_uart_byte(send_len,1);
 8005000:	197c      	adds	r4, r7, r5
 8005002:	197b      	adds	r3, r7, r5
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	2101      	movs	r1, #1
 8005008:	0018      	movs	r0, r3
 800500a:	f000 fbcd 	bl	80057a8 <set_wifi_uart_byte>
 800500e:	0003      	movs	r3, r0
 8005010:	8023      	strh	r3, [r4, #0]
    //
    send_len = set_wifi_uart_byte(send_len,value);
 8005012:	197c      	adds	r4, r7, r5
 8005014:	1dbb      	adds	r3, r7, #6
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	197b      	adds	r3, r7, r5
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fbc2 	bl	80057a8 <set_wifi_uart_byte>
 8005024:	0003      	movs	r3, r0
 8005026:	8023      	strh	r3, [r4, #0]
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
 8005028:	197b      	adds	r3, r7, r5
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	001a      	movs	r2, r3
 800502e:	2103      	movs	r1, #3
 8005030:	2007      	movs	r0, #7
 8005032:	f000 fc53 	bl	80058dc <wifi_uart_write_frame>
    
    return SUCCESS;
 8005036:	2301      	movs	r3, #1
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bdb0      	pop	{r4, r5, r7, pc}
 8005040:	20000265 	.word	0x20000265

08005044 <mcu_get_dp_download_bool>:
 * @param[in] {len} dp数据长度
 * @return 当前dp值
 * @note   Null
 */
unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	000a      	movs	r2, r1
 800504e:	1cbb      	adds	r3, r7, #2
 8005050:	801a      	strh	r2, [r3, #0]
    return(value[0]);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	781b      	ldrb	r3, [r3, #0]
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b002      	add	sp, #8
 800505c:	bd80      	pop	{r7, pc}

0800505e <mcu_get_dp_download_enum>:
 * @param[in] {len} dp数据长度
 * @return 当前dp值
 * @note   Null
 */
unsigned char mcu_get_dp_download_enum(const unsigned char value[],unsigned short len)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	000a      	movs	r2, r1
 8005068:	1cbb      	adds	r3, r7, #2
 800506a:	801a      	strh	r2, [r3, #0]
    return(value[0]);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	781b      	ldrb	r3, [r3, #0]
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <mcu_get_dp_download_value>:
 * @param[in] {len} dp数据长度
 * @return 当前dp值
 * @note   Null
 */
unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	000a      	movs	r2, r1
 8005082:	1cbb      	adds	r3, r7, #2
 8005084:	801a      	strh	r2, [r3, #0]
    return(byte_to_int(value));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff fe25 	bl	8004cd8 <byte_to_int>
 800508e:	0003      	movs	r3, r0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}

08005098 <uart_receive_input>:
 * @param[in] {value} 串口收到的1字节数据
 * @return Null
 * @note   在MCU串口处理函数中调用该函数,并将接收到的数据作为参数传入
 */
void uart_receive_input(unsigned char value)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	0002      	movs	r2, r0
 80050a0:	1dfb      	adds	r3, r7, #7
 80050a2:	701a      	strb	r2, [r3, #0]
    //#error "请在串口接收中断中调用uart_receive_input(value),串口数据由MCU_SDK处理,用户请勿再另行处理,完成后删除该行"
    
    if(1 == rx_buf_out - rx_buf_in) {
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <uart_receive_input+0x60>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <uart_receive_input+0x64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d01d      	beq.n	80050ee <uart_receive_input+0x56>
        //串口接收缓存已满
    }else if((rx_buf_in > rx_buf_out) && ((rx_buf_in - rx_buf_out) >= sizeof(wifi_uart_rx_buf))) {
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <uart_receive_input+0x64>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <uart_receive_input+0x60>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d906      	bls.n	80050cc <uart_receive_input+0x34>
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <uart_receive_input+0x64>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <uart_receive_input+0x60>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b16      	cmp	r3, #22
 80050ca:	d810      	bhi.n	80050ee <uart_receive_input+0x56>
        //串口接收缓存已满
    }else {
        //串口接收缓存未满
        if(rx_buf_in >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <uart_receive_input+0x64>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <uart_receive_input+0x68>)
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <uart_receive_input+0x44>
            rx_buf_in = (unsigned char *)(wifi_uart_rx_buf);
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <uart_receive_input+0x64>)
 80050d8:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <uart_receive_input+0x6c>)
 80050da:	601a      	str	r2, [r3, #0]
        }
        
        *rx_buf_in ++ = value;
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <uart_receive_input+0x64>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	4a06      	ldr	r2, [pc, #24]	; (80050fc <uart_receive_input+0x64>)
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	1dfa      	adds	r2, r7, #7
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	701a      	strb	r2, [r3, #0]
    }
}
 80050ec:	e7ff      	b.n	80050ee <uart_receive_input+0x56>
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000228 	.word	0x20000228
 80050fc:	2000020c 	.word	0x2000020c
 8005100:	20000227 	.word	0x20000227
 8005104:	20000210 	.word	0x20000210

08005108 <wifi_uart_service>:
 * @param  Null
 * @return Null
 * @note   在MCU主函数while循环中调用该函数
 */
void wifi_uart_service(void)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
    //#error "请直接在main函数的while(1){}中添加wifi_uart_service(),调用该函数不要加任何条件判断,完成后删除该行"
    static unsigned short rx_in = 0;
    unsigned short offset = 0;
 800510e:	1dbb      	adds	r3, r7, #6
 8005110:	2200      	movs	r2, #0
 8005112:	801a      	strh	r2, [r3, #0]
    unsigned short rx_value_len = 0;
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	2200      	movs	r2, #0
 8005118:	801a      	strh	r2, [r3, #0]
    
    while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
 800511a:	e00c      	b.n	8005136 <wifi_uart_service+0x2e>
        wifi_data_process_buf[rx_in ++] = take_byte_rxbuff();
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <wifi_uart_service+0x194>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	b291      	uxth	r1, r2
 8005124:	4a5d      	ldr	r2, [pc, #372]	; (800529c <wifi_uart_service+0x194>)
 8005126:	8011      	strh	r1, [r2, #0]
 8005128:	001c      	movs	r4, r3
 800512a:	f000 fe69 	bl	8005e00 <take_byte_rxbuff>
 800512e:	0003      	movs	r3, r0
 8005130:	001a      	movs	r2, r3
 8005132:	4b5b      	ldr	r3, [pc, #364]	; (80052a0 <wifi_uart_service+0x198>)
 8005134:	551a      	strb	r2, [r3, r4]
    while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
 8005136:	4b59      	ldr	r3, [pc, #356]	; (800529c <wifi_uart_service+0x194>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b1e      	cmp	r3, #30
 800513c:	d803      	bhi.n	8005146 <wifi_uart_service+0x3e>
 800513e:	f000 fe4d 	bl	8005ddc <with_data_rxbuff>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d1ea      	bne.n	800511c <wifi_uart_service+0x14>
    }
    
    if(rx_in < PROTOCOL_HEAD)
 8005146:	4b55      	ldr	r3, [pc, #340]	; (800529c <wifi_uart_service+0x194>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d800      	bhi.n	8005150 <wifi_uart_service+0x48>
 800514e:	e0a1      	b.n	8005294 <wifi_uart_service+0x18c>
        return;
    
    while((rx_in - offset) >= PROTOCOL_HEAD) {
 8005150:	e07e      	b.n	8005250 <wifi_uart_service+0x148>
        if(wifi_data_process_buf[offset + HEAD_FIRST] != FRAME_FIRST) {
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <wifi_uart_service+0x198>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b55      	cmp	r3, #85	; 0x55
 800515e:	d005      	beq.n	800516c <wifi_uart_service+0x64>
            offset ++;
 8005160:	1dbb      	adds	r3, r7, #6
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	3201      	adds	r2, #1
 8005168:	801a      	strh	r2, [r3, #0]
            continue;
 800516a:	e071      	b.n	8005250 <wifi_uart_service+0x148>
        }
        
        if(wifi_data_process_buf[offset + HEAD_SECOND] != FRAME_SECOND) {
 800516c:	1dbb      	adds	r3, r7, #6
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	4a4b      	ldr	r2, [pc, #300]	; (80052a0 <wifi_uart_service+0x198>)
 8005174:	5cd3      	ldrb	r3, [r2, r3]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2baa      	cmp	r3, #170	; 0xaa
 800517a:	d005      	beq.n	8005188 <wifi_uart_service+0x80>
            offset ++;
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	3201      	adds	r2, #1
 8005184:	801a      	strh	r2, [r3, #0]
            continue;
 8005186:	e063      	b.n	8005250 <wifi_uart_service+0x148>
        }  
        
        if(wifi_data_process_buf[offset + PROTOCOL_VERSION] != MCU_RX_VER) {
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	3302      	adds	r3, #2
 800518e:	4a44      	ldr	r2, [pc, #272]	; (80052a0 <wifi_uart_service+0x198>)
 8005190:	5cd3      	ldrb	r3, [r2, r3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <wifi_uart_service+0x9c>
            offset += 2;
 8005198:	1dbb      	adds	r3, r7, #6
 800519a:	1dba      	adds	r2, r7, #6
 800519c:	8812      	ldrh	r2, [r2, #0]
 800519e:	3202      	adds	r2, #2
 80051a0:	801a      	strh	r2, [r3, #0]
            continue;
 80051a2:	e055      	b.n	8005250 <wifi_uart_service+0x148>
        }      
        
        rx_value_len = wifi_data_process_buf[offset + LENGTH_HIGH] * 0x100;
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <wifi_uart_service+0x198>)
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	0212      	lsls	r2, r2, #8
 80051b6:	801a      	strh	r2, [r3, #0]
        rx_value_len += (wifi_data_process_buf[offset + LENGTH_LOW] + PROTOCOL_HEAD);
 80051b8:	1dbb      	adds	r3, r7, #6
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	3305      	adds	r3, #5
 80051be:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <wifi_uart_service+0x198>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3307      	adds	r3, #7
 80051c6:	b299      	uxth	r1, r3
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	1d3a      	adds	r2, r7, #4
 80051cc:	8812      	ldrh	r2, [r2, #0]
 80051ce:	188a      	adds	r2, r1, r2
 80051d0:	801a      	strh	r2, [r3, #0]
        if(rx_value_len > sizeof(wifi_data_process_buf) + PROTOCOL_HEAD) {
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	2b26      	cmp	r3, #38	; 0x26
 80051d8:	d905      	bls.n	80051e6 <wifi_uart_service+0xde>
            offset += 3;
 80051da:	1dbb      	adds	r3, r7, #6
 80051dc:	1dba      	adds	r2, r7, #6
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	3203      	adds	r2, #3
 80051e2:	801a      	strh	r2, [r3, #0]
            continue;
 80051e4:	e034      	b.n	8005250 <wifi_uart_service+0x148>
        }
        
        if((rx_in - offset) < rx_value_len) {
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <wifi_uart_service+0x194>)
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	001a      	movs	r2, r3
 80051ec:	1dbb      	adds	r3, r7, #6
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	1ad2      	subs	r2, r2, r3
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	db34      	blt.n	8005264 <wifi_uart_service+0x15c>
            break;
        }
        
        //数据接收完成
        if(get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1) != wifi_data_process_buf[offset + rx_value_len - 1]) {
 80051fa:	1dbb      	adds	r3, r7, #6
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <wifi_uart_service+0x198>)
 8005200:	18d2      	adds	r2, r2, r3
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	3b01      	subs	r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	0019      	movs	r1, r3
 800520c:	0010      	movs	r0, r2
 800520e:	f000 fb13 	bl	8005838 <get_check_sum>
 8005212:	0003      	movs	r3, r0
 8005214:	0019      	movs	r1, r3
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	18d3      	adds	r3, r2, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <wifi_uart_service+0x198>)
 8005224:	5cd3      	ldrb	r3, [r2, r3]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4299      	cmp	r1, r3
 800522a:	d005      	beq.n	8005238 <wifi_uart_service+0x130>
            //校验出错
            //printf("crc error (crc:0x%X  but data:0x%X)\r\n",get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1),wifi_data_process_buf[offset + rx_value_len - 1]);
            offset += 3;
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	1dba      	adds	r2, r7, #6
 8005230:	8812      	ldrh	r2, [r2, #0]
 8005232:	3203      	adds	r2, #3
 8005234:	801a      	strh	r2, [r3, #0]
            continue;
 8005236:	e00b      	b.n	8005250 <wifi_uart_service+0x148>
        }
        
        data_handle(offset);
 8005238:	1dbb      	adds	r3, r7, #6
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fd0f 	bl	8005c60 <data_handle>
        offset += rx_value_len;
 8005242:	1dbb      	adds	r3, r7, #6
 8005244:	1db9      	adds	r1, r7, #6
 8005246:	1d3a      	adds	r2, r7, #4
 8005248:	8809      	ldrh	r1, [r1, #0]
 800524a:	8812      	ldrh	r2, [r2, #0]
 800524c:	188a      	adds	r2, r1, r2
 800524e:	801a      	strh	r2, [r3, #0]
    while((rx_in - offset) >= PROTOCOL_HEAD) {
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <wifi_uart_service+0x194>)
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	001a      	movs	r2, r3
 8005256:	1dbb      	adds	r3, r7, #6
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b06      	cmp	r3, #6
 800525e:	dd00      	ble.n	8005262 <wifi_uart_service+0x15a>
 8005260:	e777      	b.n	8005152 <wifi_uart_service+0x4a>
 8005262:	e000      	b.n	8005266 <wifi_uart_service+0x15e>
            break;
 8005264:	46c0      	nop			; (mov r8, r8)
    }//end while

    rx_in -= offset;
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <wifi_uart_service+0x194>)
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	1dbb      	adds	r3, r7, #6
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	b29a      	uxth	r2, r3
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <wifi_uart_service+0x194>)
 8005274:	801a      	strh	r2, [r3, #0]
    if(rx_in > 0) {
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <wifi_uart_service+0x194>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <wifi_uart_service+0x18e>
        my_memcpy((char *)wifi_data_process_buf, (const char *)wifi_data_process_buf + offset, rx_in);
 800527e:	1dbb      	adds	r3, r7, #6
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <wifi_uart_service+0x198>)
 8005284:	18d1      	adds	r1, r2, r3
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <wifi_uart_service+0x194>)
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <wifi_uart_service+0x198>)
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff fcc6 	bl	8004c1e <my_memcpy>
 8005292:	e000      	b.n	8005296 <wifi_uart_service+0x18e>
        return;
 8005294:	46c0      	nop			; (mov r8, r8)
    }
}
 8005296:	46bd      	mov	sp, r7
 8005298:	b003      	add	sp, #12
 800529a:	bd90      	pop	{r4, r7, pc}
 800529c:	200000c0 	.word	0x200000c0
 80052a0:	200001ec 	.word	0x200001ec

080052a4 <wifi_protocol_init>:
 * @param  Null
 * @return Null
 * @note   在MCU初始化代码中调用该函数
 */
void wifi_protocol_init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
    //#error " 请在main函数中添加wifi_protocol_init()完成wifi协议初始化,并删除该行"
    rx_buf_in = (unsigned char *)wifi_uart_rx_buf;
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <wifi_protocol_init+0x24>)
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <wifi_protocol_init+0x28>)
 80052ac:	601a      	str	r2, [r3, #0]
    rx_buf_out = (unsigned char *)wifi_uart_rx_buf;
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <wifi_protocol_init+0x2c>)
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <wifi_protocol_init+0x28>)
 80052b2:	601a      	str	r2, [r3, #0]
    
    stop_update_flag = DISABLE;
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <wifi_protocol_init+0x30>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
    
#ifndef WIFI_CONTROL_SELF_MODE
    wifi_work_state = WIFI_SATE_UNKNOW;
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <wifi_protocol_init+0x34>)
 80052bc:	22ff      	movs	r2, #255	; 0xff
 80052be:	701a      	strb	r2, [r3, #0]
#endif
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	2000020c 	.word	0x2000020c
 80052cc:	20000210 	.word	0x20000210
 80052d0:	20000228 	.word	0x20000228
 80052d4:	20000265 	.word	0x20000265
 80052d8:	20000263 	.word	0x20000263

080052dc <uart_transmit_output>:
 * @brief  串口发送数据
 * @param[in] {value} 串口要发送的1字节数据
 * @return Null
 */
void uart_transmit_output(unsigned char value)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	0002      	movs	r2, r0
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	701a      	strb	r2, [r3, #0]
    //#error "请将MCU串口发送函数填入该函数,并删除该行"
	HAL_UART_Transmit(&huart1, &value, 1, 1000);
 80052e8:	23fa      	movs	r3, #250	; 0xfa
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	1df9      	adds	r1, r7, #7
 80052ee:	4804      	ldr	r0, [pc, #16]	; (8005300 <uart_transmit_output+0x24>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	f7fe fea9 	bl	8004048 <HAL_UART_Transmit>
/*
    //Example:
    extern void Uart_PutChar(unsigned char value);
    Uart_PutChar(value);	                                //串口发送函数
*/
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b002      	add	sp, #8
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	20000164 	.word	0x20000164

08005304 <all_data_update>:
 * @param  Null
 * @return Null
 * @note   此函数SDK内部需调用，MCU必须实现该函数内数据上报功能，包括只上报和可上报可下发型数据
 */
void all_data_update(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
    mcu_dp_value_update(DPID_VOICE_TIMES,当前语音播放次数); //VALUE型数据上报;
    
    mcu_dp_bool_update(DPID_SWITCH,当前开关); //BOOL型数据上报;

    */
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <dp_download_meal_plan_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_meal_plan_handle(const unsigned char value[], unsigned short length)
{
 800530e:	b5b0      	push	{r4, r5, r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	000a      	movs	r2, r1
 8005318:	1cbb      	adds	r3, r7, #2
 800531a:	801a      	strh	r2, [r3, #0]
    //RAW类型数据处理
    
    */
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_raw_update(DPID_MEAL_PLAN,value,length);
 800531c:	250f      	movs	r5, #15
 800531e:	197c      	adds	r4, r7, r5
 8005320:	1cbb      	adds	r3, r7, #2
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0019      	movs	r1, r3
 8005328:	2001      	movs	r0, #1
 800532a:	f7ff fd01 	bl	8004d30 <mcu_dp_raw_update>
 800532e:	0003      	movs	r3, r0
 8005330:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 8005332:	197b      	adds	r3, r7, r5
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <dp_download_meal_plan_handle+0x30>
        return SUCCESS;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <dp_download_meal_plan_handle+0x32>
    else
        return ERROR;
 800533e:	2300      	movs	r3, #0
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bdb0      	pop	{r4, r5, r7, pc}

08005348 <dp_download_quick_feed_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_quick_feed_handle(const unsigned char value[], unsigned short length)
{
 8005348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	000a      	movs	r2, r1
 8005352:	1cbb      	adds	r3, r7, #2
 8005354:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char quick_feed;
    
    quick_feed = mcu_get_dp_download_bool(value,length);
 8005356:	250f      	movs	r5, #15
 8005358:	197c      	adds	r4, r7, r5
 800535a:	1cbb      	adds	r3, r7, #2
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0011      	movs	r1, r2
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fe6e 	bl	8005044 <mcu_get_dp_download_bool>
 8005368:	0003      	movs	r3, r0
 800536a:	7023      	strb	r3, [r4, #0]
    }else {
        //开关开
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_QUICK_FEED,quick_feed);
 800536c:	260e      	movs	r6, #14
 800536e:	19bc      	adds	r4, r7, r6
 8005370:	197b      	adds	r3, r7, r5
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	0019      	movs	r1, r3
 8005376:	2002      	movs	r0, #2
 8005378:	f7ff fd38 	bl	8004dec <mcu_dp_bool_update>
 800537c:	0003      	movs	r3, r0
 800537e:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 8005380:	19bb      	adds	r3, r7, r6
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <dp_download_quick_feed_handle+0x44>
        return SUCCESS;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <dp_download_quick_feed_handle+0x46>
    else
        return ERROR;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b005      	add	sp, #20
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005396 <dp_download_manual_feed_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_manual_feed_handle(const unsigned char value[], unsigned short length)
{
 8005396:	b5b0      	push	{r4, r5, r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	000a      	movs	r2, r1
 80053a0:	1cbb      	adds	r3, r7, #2
 80053a2:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为VALUE
    unsigned char ret;
    unsigned long manual_feed;
    
    manual_feed = mcu_get_dp_download_value(value,length);
 80053a4:	1cbb      	adds	r3, r7, #2
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	0011      	movs	r1, r2
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff fe63 	bl	8005078 <mcu_get_dp_download_value>
 80053b2:	0003      	movs	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]
    //VALUE类型数据处理
    
    */
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_value_update(DPID_MANUAL_FEED,manual_feed);
 80053b6:	250b      	movs	r5, #11
 80053b8:	197c      	adds	r4, r7, r5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	0019      	movs	r1, r3
 80053be:	2003      	movs	r0, #3
 80053c0:	f7ff fd76 	bl	8004eb0 <mcu_dp_value_update>
 80053c4:	0003      	movs	r3, r0
 80053c6:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 80053c8:	197b      	adds	r3, r7, r5
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <dp_download_manual_feed_handle+0x3e>
        return SUCCESS;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <dp_download_manual_feed_handle+0x40>
    else
        return ERROR;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b004      	add	sp, #16
 80053dc:	bdb0      	pop	{r4, r5, r7, pc}

080053de <dp_download_unit_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_unit_handle(const unsigned char value[], unsigned short length)
{
 80053de:	b5b0      	push	{r4, r5, r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	000a      	movs	r2, r1
 80053e8:	1cbb      	adds	r3, r7, #2
 80053ea:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为ENUM
    unsigned char ret;
    unsigned char unit;
    
    unit = mcu_get_dp_download_enum(value,length);
 80053ec:	250f      	movs	r5, #15
 80053ee:	197c      	adds	r4, r7, r5
 80053f0:	1cbb      	adds	r3, r7, #2
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	0011      	movs	r1, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7ff fe30 	bl	800505e <mcu_get_dp_download_enum>
 80053fe:	0003      	movs	r3, r0
 8005400:	7023      	strb	r3, [r4, #0]
    switch(unit) {
 8005402:	197b      	adds	r3, r7, r5
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d005      	beq.n	8005416 <dp_download_unit_handle+0x38>
 800540a:	dc06      	bgt.n	800541a <dp_download_unit_handle+0x3c>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <dp_download_unit_handle+0x40>
 8005410:	2b01      	cmp	r3, #1
 8005412:	d006      	beq.n	8005422 <dp_download_unit_handle+0x44>
        case 2:
        break;
        
        default:
    
        break;
 8005414:	e001      	b.n	800541a <dp_download_unit_handle+0x3c>
        break;
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	e004      	b.n	8005424 <dp_download_unit_handle+0x46>
        break;
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	e002      	b.n	8005424 <dp_download_unit_handle+0x46>
        break;
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	e000      	b.n	8005424 <dp_download_unit_handle+0x46>
        break;
 8005422:	46c0      	nop			; (mov r8, r8)
    }
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_enum_update(DPID_UNIT, unit);
 8005424:	250e      	movs	r5, #14
 8005426:	197c      	adds	r4, r7, r5
 8005428:	230f      	movs	r3, #15
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	0019      	movs	r1, r3
 8005430:	2005      	movs	r0, #5
 8005432:	f7ff fdb3 	bl	8004f9c <mcu_dp_enum_update>
 8005436:	0003      	movs	r3, r0
 8005438:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 800543a:	197b      	adds	r3, r7, r5
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <dp_download_unit_handle+0x68>
        return SUCCESS;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <dp_download_unit_handle+0x6a>
    else
        return ERROR;
 8005446:	2300      	movs	r3, #0
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b004      	add	sp, #16
 800544e:	bdb0      	pop	{r4, r5, r7, pc}

08005450 <dp_download_slow_feed_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_slow_feed_handle(const unsigned char value[], unsigned short length)
{
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	000a      	movs	r2, r1
 800545a:	1cbb      	adds	r3, r7, #2
 800545c:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char slow_feed;
    
    slow_feed = mcu_get_dp_download_bool(value,length);
 800545e:	250f      	movs	r5, #15
 8005460:	197c      	adds	r4, r7, r5
 8005462:	1cbb      	adds	r3, r7, #2
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0011      	movs	r1, r2
 800546a:	0018      	movs	r0, r3
 800546c:	f7ff fdea 	bl	8005044 <mcu_get_dp_download_bool>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]
    }else {
        //开关开
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_SLOW_FEED,slow_feed);
 8005474:	260e      	movs	r6, #14
 8005476:	19bc      	adds	r4, r7, r6
 8005478:	197b      	adds	r3, r7, r5
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	0019      	movs	r1, r3
 800547e:	2006      	movs	r0, #6
 8005480:	f7ff fcb4 	bl	8004dec <mcu_dp_bool_update>
 8005484:	0003      	movs	r3, r0
 8005486:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 8005488:	19bb      	adds	r3, r7, r6
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <dp_download_slow_feed_handle+0x44>
        return SUCCESS;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <dp_download_slow_feed_handle+0x46>
    else
        return ERROR;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b005      	add	sp, #20
 800549c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800549e <dp_download_export_calibrate_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_export_calibrate_handle(const unsigned char value[], unsigned short length)
{
 800549e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	000a      	movs	r2, r1
 80054a8:	1cbb      	adds	r3, r7, #2
 80054aa:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char export_calibrate;
    
    export_calibrate = mcu_get_dp_download_bool(value,length);
 80054ac:	250f      	movs	r5, #15
 80054ae:	197c      	adds	r4, r7, r5
 80054b0:	1cbb      	adds	r3, r7, #2
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	0011      	movs	r1, r2
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7ff fdc3 	bl	8005044 <mcu_get_dp_download_bool>
 80054be:	0003      	movs	r3, r0
 80054c0:	7023      	strb	r3, [r4, #0]
    }else {
        //开关开
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_EXPORT_CALIBRATE,export_calibrate);
 80054c2:	260e      	movs	r6, #14
 80054c4:	19bc      	adds	r4, r7, r6
 80054c6:	197b      	adds	r3, r7, r5
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	0019      	movs	r1, r3
 80054cc:	2007      	movs	r0, #7
 80054ce:	f7ff fc8d 	bl	8004dec <mcu_dp_bool_update>
 80054d2:	0003      	movs	r3, r0
 80054d4:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 80054d6:	19bb      	adds	r3, r7, r6
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <dp_download_export_calibrate_handle+0x44>
        return SUCCESS;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <dp_download_export_calibrate_handle+0x46>
    else
        return ERROR;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	0018      	movs	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b005      	add	sp, #20
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054ec <dp_download_weight_calibrate_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_weight_calibrate_handle(const unsigned char value[], unsigned short length)
{
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	000a      	movs	r2, r1
 80054f6:	1cbb      	adds	r3, r7, #2
 80054f8:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char weight_calibrate;
    
    weight_calibrate = mcu_get_dp_download_bool(value,length);
 80054fa:	250f      	movs	r5, #15
 80054fc:	197c      	adds	r4, r7, r5
 80054fe:	1cbb      	adds	r3, r7, #2
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f7ff fd9c 	bl	8005044 <mcu_get_dp_download_bool>
 800550c:	0003      	movs	r3, r0
 800550e:	7023      	strb	r3, [r4, #0]
    }else {
        //开关开
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_WEIGHT_CALIBRATE,weight_calibrate);
 8005510:	260e      	movs	r6, #14
 8005512:	19bc      	adds	r4, r7, r6
 8005514:	197b      	adds	r3, r7, r5
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	0019      	movs	r1, r3
 800551a:	2008      	movs	r0, #8
 800551c:	f7ff fc66 	bl	8004dec <mcu_dp_bool_update>
 8005520:	0003      	movs	r3, r0
 8005522:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 8005524:	19bb      	adds	r3, r7, r6
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <dp_download_weight_calibrate_handle+0x44>
        return SUCCESS;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <dp_download_weight_calibrate_handle+0x46>
    else
        return ERROR;
 8005530:	2300      	movs	r3, #0
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b005      	add	sp, #20
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800553a <dp_download_voice_times_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_voice_times_handle(const unsigned char value[], unsigned short length)
{
 800553a:	b5b0      	push	{r4, r5, r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	000a      	movs	r2, r1
 8005544:	1cbb      	adds	r3, r7, #2
 8005546:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为VALUE
    unsigned char ret;
    unsigned long voice_times;
    
    voice_times = mcu_get_dp_download_value(value,length);
 8005548:	1cbb      	adds	r3, r7, #2
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0011      	movs	r1, r2
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff fd91 	bl	8005078 <mcu_get_dp_download_value>
 8005556:	0003      	movs	r3, r0
 8005558:	60fb      	str	r3, [r7, #12]
    //VALUE类型数据处理
    
    */
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_value_update(DPID_VOICE_TIMES,voice_times);
 800555a:	250b      	movs	r5, #11
 800555c:	197c      	adds	r4, r7, r5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	0019      	movs	r1, r3
 8005562:	2012      	movs	r0, #18
 8005564:	f7ff fca4 	bl	8004eb0 <mcu_dp_value_update>
 8005568:	0003      	movs	r3, r0
 800556a:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 800556c:	197b      	adds	r3, r7, r5
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <dp_download_voice_times_handle+0x3e>
        return SUCCESS;
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <dp_download_voice_times_handle+0x40>
    else
        return ERROR;
 8005578:	2300      	movs	r3, #0
}
 800557a:	0018      	movs	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	b004      	add	sp, #16
 8005580:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005584 <dp_download_light_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_light_handle(const unsigned char value[], unsigned short length)
{
 8005584:	b5b0      	push	{r4, r5, r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	000a      	movs	r2, r1
 800558e:	1cbb      	adds	r3, r7, #2
 8005590:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char light;
    
    light = mcu_get_dp_download_bool(value,length);
 8005592:	250f      	movs	r5, #15
 8005594:	197c      	adds	r4, r7, r5
 8005596:	1cbb      	adds	r3, r7, #2
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	0011      	movs	r1, r2
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff fd50 	bl	8005044 <mcu_get_dp_download_bool>
 80055a4:	0003      	movs	r3, r0
 80055a6:	7023      	strb	r3, [r4, #0]
    if(light == 0) {
 80055a8:	197b      	adds	r3, r7, r5
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <dp_download_light_handle+0x3c>
        //开关关
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	01db      	lsls	r3, r3, #7
 80055b4:	4811      	ldr	r0, [pc, #68]	; (80055fc <dp_download_light_handle+0x78>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	0019      	movs	r1, r3
 80055ba:	f7fc ffb6 	bl	800252a <HAL_GPIO_WritePin>
 80055be:	e006      	b.n	80055ce <dp_download_light_handle+0x4a>
    }else {
        //开关开
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <dp_download_light_handle+0x78>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	0019      	movs	r1, r3
 80055ca:	f7fc ffae 	bl	800252a <HAL_GPIO_WritePin>
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_LIGHT,light);
 80055ce:	250e      	movs	r5, #14
 80055d0:	197c      	adds	r4, r7, r5
 80055d2:	230f      	movs	r3, #15
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	0019      	movs	r1, r3
 80055da:	2013      	movs	r0, #19
 80055dc:	f7ff fc06 	bl	8004dec <mcu_dp_bool_update>
 80055e0:	0003      	movs	r3, r0
 80055e2:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 80055e4:	197b      	adds	r3, r7, r5
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <dp_download_light_handle+0x6c>
        return SUCCESS;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <dp_download_light_handle+0x6e>
    else
        return ERROR;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bdb0      	pop	{r4, r5, r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	48000400 	.word	0x48000400

08005600 <dp_download_switch_handle>:
        : length:数据长度
返回参数 : 成功返回:SUCCESS/失败返回:ERROR
使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
*****************************************************************************/
static unsigned char dp_download_switch_handle(const unsigned char value[], unsigned short length)
{
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	000a      	movs	r2, r1
 800560a:	1cbb      	adds	r3, r7, #2
 800560c:	801a      	strh	r2, [r3, #0]
    //示例:当前DP类型为BOOL
    unsigned char ret;
    //0:关/1:开
    unsigned char switch_1;
    
    switch_1 = mcu_get_dp_download_bool(value,length);
 800560e:	250f      	movs	r5, #15
 8005610:	197c      	adds	r4, r7, r5
 8005612:	1cbb      	adds	r3, r7, #2
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	0011      	movs	r1, r2
 800561a:	0018      	movs	r0, r3
 800561c:	f7ff fd12 	bl	8005044 <mcu_get_dp_download_bool>
 8005620:	0003      	movs	r3, r0
 8005622:	7023      	strb	r3, [r4, #0]
    }else {
        //开关开
    }
  
    //处理完DP数据后应有反馈
    ret = mcu_dp_bool_update(DPID_SWITCH,switch_1);
 8005624:	260e      	movs	r6, #14
 8005626:	19bc      	adds	r4, r7, r6
 8005628:	197b      	adds	r3, r7, r5
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	0019      	movs	r1, r3
 800562e:	2014      	movs	r0, #20
 8005630:	f7ff fbdc 	bl	8004dec <mcu_dp_bool_update>
 8005634:	0003      	movs	r3, r0
 8005636:	7023      	strb	r3, [r4, #0]
    if(ret == SUCCESS)
 8005638:	19bb      	adds	r3, r7, r6
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <dp_download_switch_handle+0x44>
        return SUCCESS;
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <dp_download_switch_handle+0x46>
    else
        return ERROR;
 8005644:	2300      	movs	r3, #0
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b005      	add	sp, #20
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005650 <dp_download_handle>:
 * -           0(ERROR): 失败
 * -           1(SUCCESS): 成功
 * @note   该函数用户不能修改
 */
unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6039      	str	r1, [r7, #0]
 8005658:	0011      	movs	r1, r2
 800565a:	1dfb      	adds	r3, r7, #7
 800565c:	1c02      	adds	r2, r0, #0
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	1c0a      	adds	r2, r1, #0
 8005664:	801a      	strh	r2, [r3, #0]
    当前函数处理可下发/可上报数据调用                    
    具体函数内需要实现下发数据处理
    完成用需要将处理结果反馈至APP端,否则APP会认为下发失败
    ***********************************/
    unsigned char ret;
    switch(dpid) {
 8005666:	1dfb      	adds	r3, r7, #7
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b14      	cmp	r3, #20
 800566c:	d900      	bls.n	8005670 <dp_download_handle+0x20>
 800566e:	e07c      	b.n	800576a <dp_download_handle+0x11a>
 8005670:	009a      	lsls	r2, r3, #2
 8005672:	4b42      	ldr	r3, [pc, #264]	; (800577c <dp_download_handle+0x12c>)
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	469f      	mov	pc, r3
        case DPID_MEAL_PLAN:
            //喂食计划处理函数
            ret = dp_download_meal_plan_handle(value,length);
 800567a:	230f      	movs	r3, #15
 800567c:	18fc      	adds	r4, r7, r3
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	0011      	movs	r1, r2
 8005686:	0018      	movs	r0, r3
 8005688:	f7ff fe41 	bl	800530e <dp_download_meal_plan_handle>
 800568c:	0003      	movs	r3, r0
 800568e:	7023      	strb	r3, [r4, #0]
        break;
 8005690:	e06c      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_QUICK_FEED:
            //快速喂食处理函数
            ret = dp_download_quick_feed_handle(value,length);
 8005692:	230f      	movs	r3, #15
 8005694:	18fc      	adds	r4, r7, r3
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	0011      	movs	r1, r2
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff fe52 	bl	8005348 <dp_download_quick_feed_handle>
 80056a4:	0003      	movs	r3, r0
 80056a6:	7023      	strb	r3, [r4, #0]
        break;
 80056a8:	e060      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_MANUAL_FEED:
            //手动喂食处理函数
            ret = dp_download_manual_feed_handle(value,length);
 80056aa:	230f      	movs	r3, #15
 80056ac:	18fc      	adds	r4, r7, r3
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	0011      	movs	r1, r2
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7ff fe6d 	bl	8005396 <dp_download_manual_feed_handle>
 80056bc:	0003      	movs	r3, r0
 80056be:	7023      	strb	r3, [r4, #0]
        break;
 80056c0:	e054      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_UNIT:
            //单位转换处理函数
            ret = dp_download_unit_handle(value,length);
 80056c2:	230f      	movs	r3, #15
 80056c4:	18fc      	adds	r4, r7, r3
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	0011      	movs	r1, r2
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7ff fe85 	bl	80053de <dp_download_unit_handle>
 80056d4:	0003      	movs	r3, r0
 80056d6:	7023      	strb	r3, [r4, #0]
        break;
 80056d8:	e048      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_SLOW_FEED:
            //慢放喂食处理函数
            ret = dp_download_slow_feed_handle(value,length);
 80056da:	230f      	movs	r3, #15
 80056dc:	18fc      	adds	r4, r7, r3
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	0011      	movs	r1, r2
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7ff feb2 	bl	8005450 <dp_download_slow_feed_handle>
 80056ec:	0003      	movs	r3, r0
 80056ee:	7023      	strb	r3, [r4, #0]
        break;
 80056f0:	e03c      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_EXPORT_CALIBRATE:
            //出粮校准处理函数
            ret = dp_download_export_calibrate_handle(value,length);
 80056f2:	230f      	movs	r3, #15
 80056f4:	18fc      	adds	r4, r7, r3
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	0011      	movs	r1, r2
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff fecd 	bl	800549e <dp_download_export_calibrate_handle>
 8005704:	0003      	movs	r3, r0
 8005706:	7023      	strb	r3, [r4, #0]
        break;
 8005708:	e030      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_WEIGHT_CALIBRATE:
            //余粮校准处理函数
            ret = dp_download_weight_calibrate_handle(value,length);
 800570a:	230f      	movs	r3, #15
 800570c:	18fc      	adds	r4, r7, r3
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	0011      	movs	r1, r2
 8005716:	0018      	movs	r0, r3
 8005718:	f7ff fee8 	bl	80054ec <dp_download_weight_calibrate_handle>
 800571c:	0003      	movs	r3, r0
 800571e:	7023      	strb	r3, [r4, #0]
        break;
 8005720:	e024      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_VOICE_TIMES:
            //语音播放次数处理函数
            ret = dp_download_voice_times_handle(value,length);
 8005722:	230f      	movs	r3, #15
 8005724:	18fc      	adds	r4, r7, r3
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	0011      	movs	r1, r2
 800572e:	0018      	movs	r0, r3
 8005730:	f7ff ff03 	bl	800553a <dp_download_voice_times_handle>
 8005734:	0003      	movs	r3, r0
 8005736:	7023      	strb	r3, [r4, #0]
        break;
 8005738:	e018      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_LIGHT:
            //小夜灯处理函数
            ret = dp_download_light_handle(value,length);
 800573a:	230f      	movs	r3, #15
 800573c:	18fc      	adds	r4, r7, r3
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	0011      	movs	r1, r2
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff ff1c 	bl	8005584 <dp_download_light_handle>
 800574c:	0003      	movs	r3, r0
 800574e:	7023      	strb	r3, [r4, #0]
        break;
 8005750:	e00c      	b.n	800576c <dp_download_handle+0x11c>
        case DPID_SWITCH:
            //开关处理函数
            ret = dp_download_switch_handle(value,length);
 8005752:	230f      	movs	r3, #15
 8005754:	18fc      	adds	r4, r7, r3
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	0011      	movs	r1, r2
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff ff4e 	bl	8005600 <dp_download_switch_handle>
 8005764:	0003      	movs	r3, r0
 8005766:	7023      	strb	r3, [r4, #0]
        break;
 8005768:	e000      	b.n	800576c <dp_download_handle+0x11c>

        default:
        break;
 800576a:	46c0      	nop			; (mov r8, r8)
    }
    return ret;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	781b      	ldrb	r3, [r3, #0]
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b005      	add	sp, #20
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	08007108 	.word	0x08007108

08005780 <get_download_cmd_total>:
 * @param[in] Null
 * @return 下发命令总和
 * @note   该函数用户不能修改
 */
unsigned char get_download_cmd_total(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
    return(sizeof(download_cmd) / sizeof(download_cmd[0]));
 8005784:	2313      	movs	r3, #19
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <wifi_test_result>:
 * @param[in] {rssi} 测试成功表示wifi信号强度/测试失败表示错误类型
 * @return Null
 * @note   MCU需要自行实现该功能
 */
void wifi_test_result(unsigned char result,unsigned char rssi)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	0002      	movs	r2, r0
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	1c0a      	adds	r2, r1, #0
 800579c:	701a      	strb	r2, [r3, #0]
        }
    }else {
        //测试成功
        //rssi为信号强度(0-100, 0信号最差，100信号最强)
    }
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <set_wifi_uart_byte>:
 * @param[in] {dest} 缓存区其实地址
 * @param[in] {byte} 写入字节值
 * @return 写入完成后的总长度
 */
unsigned short set_wifi_uart_byte(unsigned short dest, unsigned char byte)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	0002      	movs	r2, r0
 80057b0:	1dbb      	adds	r3, r7, #6
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	1d7b      	adds	r3, r7, #5
 80057b6:	1c0a      	adds	r2, r1, #0
 80057b8:	701a      	strb	r2, [r3, #0]
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
 80057ba:	1dbb      	adds	r3, r7, #6
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	1d9a      	adds	r2, r3, #6
 80057c0:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <set_wifi_uart_byte+0x3c>)
 80057c2:	18d3      	adds	r3, r2, r3
 80057c4:	60fb      	str	r3, [r7, #12]
    
    *obj = byte;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1d7a      	adds	r2, r7, #5
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
    dest += 1;
 80057ce:	1dbb      	adds	r3, r7, #6
 80057d0:	1dba      	adds	r2, r7, #6
 80057d2:	8812      	ldrh	r2, [r2, #0]
 80057d4:	3201      	adds	r2, #1
 80057d6:	801a      	strh	r2, [r3, #0]
    
    return dest;
 80057d8:	1dbb      	adds	r3, r7, #6
 80057da:	881b      	ldrh	r3, [r3, #0]
}
 80057dc:	0018      	movs	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	b004      	add	sp, #16
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2000022c 	.word	0x2000022c

080057e8 <set_wifi_uart_buffer>:
 * @param[in] {src} 源地址
 * @param[in] {len} 数据长度
 * @return 写入结束的缓存地址
 */
unsigned short set_wifi_uart_buffer(unsigned short dest, const unsigned char *src, unsigned short len)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6039      	str	r1, [r7, #0]
 80057f0:	0011      	movs	r1, r2
 80057f2:	1dbb      	adds	r3, r7, #6
 80057f4:	1c02      	adds	r2, r0, #0
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	1c0a      	adds	r2, r1, #0
 80057fc:	801a      	strh	r2, [r3, #0]
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
 80057fe:	1dbb      	adds	r3, r7, #6
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	1d9a      	adds	r2, r3, #6
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <set_wifi_uart_buffer+0x4c>)
 8005806:	18d3      	adds	r3, r2, r3
 8005808:	60fb      	str	r3, [r7, #12]
    
    my_memcpy(obj,src,len);
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff fa03 	bl	8004c1e <my_memcpy>
    
    dest += len;
 8005818:	1dbb      	adds	r3, r7, #6
 800581a:	1db9      	adds	r1, r7, #6
 800581c:	1d3a      	adds	r2, r7, #4
 800581e:	8809      	ldrh	r1, [r1, #0]
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	188a      	adds	r2, r1, r2
 8005824:	801a      	strh	r2, [r3, #0]
    return dest;
 8005826:	1dbb      	adds	r3, r7, #6
 8005828:	881b      	ldrh	r3, [r3, #0]
}
 800582a:	0018      	movs	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	b004      	add	sp, #16
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	2000022c 	.word	0x2000022c

08005838 <get_check_sum>:
 * @param[in] {pack} 数据源指针
 * @param[in] {pack_len} 计算校验和长度
 * @return 校验和
 */
unsigned char get_check_sum(unsigned char *pack, unsigned short pack_len)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	000a      	movs	r2, r1
 8005842:	1cbb      	adds	r3, r7, #2
 8005844:	801a      	strh	r2, [r3, #0]
    unsigned short i;
    unsigned char check_sum = 0;
 8005846:	230d      	movs	r3, #13
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
    
    for(i = 0; i < pack_len; i ++) {
 800584e:	230e      	movs	r3, #14
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	2200      	movs	r2, #0
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e00f      	b.n	8005878 <get_check_sum+0x40>
        check_sum += *pack ++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	7819      	ldrb	r1, [r3, #0]
 8005860:	220d      	movs	r2, #13
 8005862:	18bb      	adds	r3, r7, r2
 8005864:	18ba      	adds	r2, r7, r2
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	188a      	adds	r2, r1, r2
 800586a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < pack_len; i ++) {
 800586c:	210e      	movs	r1, #14
 800586e:	187b      	adds	r3, r7, r1
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	187b      	adds	r3, r7, r1
 8005874:	3201      	adds	r2, #1
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	230e      	movs	r3, #14
 800587a:	18fa      	adds	r2, r7, r3
 800587c:	1cbb      	adds	r3, r7, #2
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e8      	bcc.n	8005858 <get_check_sum+0x20>
    }
    
    return check_sum;
 8005886:	230d      	movs	r3, #13
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	781b      	ldrb	r3, [r3, #0]
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b004      	add	sp, #16
 8005892:	bd80      	pop	{r7, pc}

08005894 <wifi_uart_write_data>:
 * @param[in] {in} 发送缓存指针
 * @param[in] {len} 数据发送长度
 * @return Null
 */
static void wifi_uart_write_data(unsigned char *in, unsigned short len)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	000a      	movs	r2, r1
 800589e:	1cbb      	adds	r3, r7, #2
 80058a0:	801a      	strh	r2, [r3, #0]
    if((NULL == in) || (0 == len)) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d014      	beq.n	80058d2 <wifi_uart_write_data+0x3e>
 80058a8:	1cbb      	adds	r3, r7, #2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <wifi_uart_write_data+0x3e>
        return;
    }
    
    while(len --) {
 80058b0:	e007      	b.n	80058c2 <wifi_uart_write_data+0x2e>
        uart_transmit_output(*in);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff fd10 	bl	80052dc <uart_transmit_output>
        in ++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
    while(len --) {
 80058c2:	1cbb      	adds	r3, r7, #2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	1cba      	adds	r2, r7, #2
 80058c8:	1e59      	subs	r1, r3, #1
 80058ca:	8011      	strh	r1, [r2, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <wifi_uart_write_data+0x1e>
 80058d0:	e000      	b.n	80058d4 <wifi_uart_write_data+0x40>
        return;
 80058d2:	46c0      	nop			; (mov r8, r8)
    }
}
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b002      	add	sp, #8
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <wifi_uart_write_frame>:
 * @param[in] {fr_ver} 帧版本
 * @param[in] {len} 数据长度
 * @return Null
 */
void wifi_uart_write_frame(unsigned char fr_type, unsigned char fr_ver, unsigned short len)
{
 80058dc:	b5b0      	push	{r4, r5, r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	0004      	movs	r4, r0
 80058e4:	0008      	movs	r0, r1
 80058e6:	0011      	movs	r1, r2
 80058e8:	1dfb      	adds	r3, r7, #7
 80058ea:	1c22      	adds	r2, r4, #0
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	1dbb      	adds	r3, r7, #6
 80058f0:	1c02      	adds	r2, r0, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	1d3b      	adds	r3, r7, #4
 80058f6:	1c0a      	adds	r2, r1, #0
 80058f8:	801a      	strh	r2, [r3, #0]
    unsigned char check_sum = 0;
 80058fa:	210f      	movs	r1, #15
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
    
    wifi_uart_tx_buf[HEAD_FIRST] = 0x55;
 8005902:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <wifi_uart_write_frame+0xa4>)
 8005904:	2255      	movs	r2, #85	; 0x55
 8005906:	701a      	strb	r2, [r3, #0]
    wifi_uart_tx_buf[HEAD_SECOND] = 0xaa;
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <wifi_uart_write_frame+0xa4>)
 800590a:	22aa      	movs	r2, #170	; 0xaa
 800590c:	705a      	strb	r2, [r3, #1]
    wifi_uart_tx_buf[PROTOCOL_VERSION] = fr_ver;
 800590e:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <wifi_uart_write_frame+0xa4>)
 8005910:	1dba      	adds	r2, r7, #6
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	709a      	strb	r2, [r3, #2]
    wifi_uart_tx_buf[FRAME_TYPE] = fr_type;
 8005916:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <wifi_uart_write_frame+0xa4>)
 8005918:	1dfa      	adds	r2, r7, #7
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	70da      	strb	r2, [r3, #3]
    wifi_uart_tx_buf[LENGTH_HIGH] = len >> 8;
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b29b      	uxth	r3, r3
 8005926:	b2da      	uxtb	r2, r3
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <wifi_uart_write_frame+0xa4>)
 800592a:	711a      	strb	r2, [r3, #4]
    wifi_uart_tx_buf[LENGTH_LOW] = len & 0xff;
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <wifi_uart_write_frame+0xa4>)
 8005934:	715a      	strb	r2, [r3, #5]
    
    len += PROTOCOL_HEAD;
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	1d3a      	adds	r2, r7, #4
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	3207      	adds	r2, #7
 800593e:	801a      	strh	r2, [r3, #0]
    check_sum = get_check_sum((unsigned char *)wifi_uart_tx_buf, len - 1);
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	000d      	movs	r5, r1
 800594a:	187c      	adds	r4, r7, r1
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <wifi_uart_write_frame+0xa4>)
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f7ff ff71 	bl	8005838 <get_check_sum>
 8005956:	0003      	movs	r3, r0
 8005958:	7023      	strb	r3, [r4, #0]
    wifi_uart_tx_buf[len - 1] = check_sum;
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a07      	ldr	r2, [pc, #28]	; (8005980 <wifi_uart_write_frame+0xa4>)
 8005962:	1979      	adds	r1, r7, r5
 8005964:	7809      	ldrb	r1, [r1, #0]
 8005966:	54d1      	strb	r1, [r2, r3]
    
    wifi_uart_write_data((unsigned char *)wifi_uart_tx_buf, len);
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <wifi_uart_write_frame+0xa4>)
 800596e:	0011      	movs	r1, r2
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff ff8f 	bl	8005894 <wifi_uart_write_data>
}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	46bd      	mov	sp, r7
 800597a:	b004      	add	sp, #16
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	2000022c 	.word	0x2000022c

08005984 <heat_beat_check>:
 * @brief  心跳包检测
 * @param  Null
 * @return Null
 */
static void heat_beat_check(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
    unsigned char length = 0;
 800598a:	1dfb      	adds	r3, r7, #7
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
    static unsigned char mcu_reset_state = FALSE;
    
    if(FALSE == mcu_reset_state) {
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <heat_beat_check+0x60>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10e      	bne.n	80059b6 <heat_beat_check+0x32>
        length = set_wifi_uart_byte(length, FALSE);
 8005998:	1dfb      	adds	r3, r7, #7
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	2100      	movs	r1, #0
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff ff01 	bl	80057a8 <set_wifi_uart_byte>
 80059a6:	0003      	movs	r3, r0
 80059a8:	001a      	movs	r2, r3
 80059aa:	1dfb      	adds	r3, r7, #7
 80059ac:	701a      	strb	r2, [r3, #0]
        mcu_reset_state = TRUE;
 80059ae:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <heat_beat_check+0x60>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e00a      	b.n	80059cc <heat_beat_check+0x48>
    }else {
        length = set_wifi_uart_byte(length, TRUE);
 80059b6:	1dfb      	adds	r3, r7, #7
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2101      	movs	r1, #1
 80059be:	0018      	movs	r0, r3
 80059c0:	f7ff fef2 	bl	80057a8 <set_wifi_uart_byte>
 80059c4:	0003      	movs	r3, r0
 80059c6:	001a      	movs	r2, r3
 80059c8:	1dfb      	adds	r3, r7, #7
 80059ca:	701a      	strb	r2, [r3, #0]
    }
    
    wifi_uart_write_frame(HEAT_BEAT_CMD, MCU_TX_VER, length);
 80059cc:	1dfb      	adds	r3, r7, #7
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	2103      	movs	r1, #3
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7ff ff80 	bl	80058dc <wifi_uart_write_frame>
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	200000c2 	.word	0x200000c2

080059e8 <product_info_update>:
 * @brief  产品信息上传
 * @param  Null
 * @return Null
 */
static void product_info_update(void)
{
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
    unsigned char length = 0;
 80059ee:	250f      	movs	r5, #15
 80059f0:	197b      	adds	r3, r7, r5
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
    unsigned char str[10] = {0};
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2206      	movs	r2, #6
 8005a00:	2100      	movs	r1, #0
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 fa4e 	bl	8005ea4 <memset>
    
    length = set_wifi_uart_buffer(length, "{\"p\":\"", my_strlen("{\"p\":\""));
 8005a08:	197b      	adds	r3, r7, r5
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b29c      	uxth	r4, r3
 8005a0e:	4b43      	ldr	r3, [pc, #268]	; (8005b1c <product_info_update+0x134>)
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7ff f8e8 	bl	8004be6 <my_strlen>
 8005a16:	0003      	movs	r3, r0
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <product_info_update+0x134>)
 8005a1c:	0019      	movs	r1, r3
 8005a1e:	0020      	movs	r0, r4
 8005a20:	f7ff fee2 	bl	80057e8 <set_wifi_uart_buffer>
 8005a24:	0003      	movs	r3, r0
 8005a26:	001a      	movs	r2, r3
 8005a28:	197b      	adds	r3, r7, r5
 8005a2a:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_buffer(length,(unsigned char *)PRODUCT_KEY,my_strlen((unsigned char *)PRODUCT_KEY));
 8005a2c:	197b      	adds	r3, r7, r5
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b29c      	uxth	r4, r3
 8005a32:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <product_info_update+0x138>)
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff f8d6 	bl	8004be6 <my_strlen>
 8005a3a:	0003      	movs	r3, r0
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <product_info_update+0x138>)
 8005a40:	0019      	movs	r1, r3
 8005a42:	0020      	movs	r0, r4
 8005a44:	f7ff fed0 	bl	80057e8 <set_wifi_uart_buffer>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	197b      	adds	r3, r7, r5
 8005a4e:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_buffer(length, "\",\"v\":\"", my_strlen("\",\"v\":\""));
 8005a50:	197b      	adds	r3, r7, r5
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b29c      	uxth	r4, r3
 8005a56:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <product_info_update+0x13c>)
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7ff f8c4 	bl	8004be6 <my_strlen>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <product_info_update+0x13c>)
 8005a64:	0019      	movs	r1, r3
 8005a66:	0020      	movs	r0, r4
 8005a68:	f7ff febe 	bl	80057e8 <set_wifi_uart_buffer>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	001a      	movs	r2, r3
 8005a70:	197b      	adds	r3, r7, r5
 8005a72:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_buffer(length,(unsigned char *)MCU_VER,my_strlen((unsigned char *)MCU_VER));
 8005a74:	197b      	adds	r3, r7, r5
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <product_info_update+0x140>)
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff f8b2 	bl	8004be6 <my_strlen>
 8005a82:	0003      	movs	r3, r0
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <product_info_update+0x140>)
 8005a88:	0019      	movs	r1, r3
 8005a8a:	0020      	movs	r0, r4
 8005a8c:	f7ff feac 	bl	80057e8 <set_wifi_uart_buffer>
 8005a90:	0003      	movs	r3, r0
 8005a92:	001a      	movs	r2, r3
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_buffer(length, "\",\"m\":", my_strlen("\",\"m\":"));
 8005a98:	197b      	adds	r3, r7, r5
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b29c      	uxth	r4, r3
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <product_info_update+0x144>)
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff f8a0 	bl	8004be6 <my_strlen>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <product_info_update+0x144>)
 8005aac:	0019      	movs	r1, r3
 8005aae:	0020      	movs	r0, r4
 8005ab0:	f7ff fe9a 	bl	80057e8 <set_wifi_uart_buffer>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	197b      	adds	r3, r7, r5
 8005aba:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_buffer(length, (unsigned char *)CONFIG_MODE, my_strlen((unsigned char *)CONFIG_MODE));
 8005abc:	197b      	adds	r3, r7, r5
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b29c      	uxth	r4, r3
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <product_info_update+0x148>)
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff f88e 	bl	8004be6 <my_strlen>
 8005aca:	0003      	movs	r3, r0
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <product_info_update+0x148>)
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	0020      	movs	r0, r4
 8005ad4:	f7ff fe88 	bl	80057e8 <set_wifi_uart_buffer>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	001a      	movs	r2, r3
 8005adc:	197b      	adds	r3, r7, r5
 8005ade:	701a      	strb	r2, [r3, #0]
#ifdef LONG_CONN_LOWPOWER
    sprintf((char *)str,",\"low\":%d",LONG_CONN_LOWPOWER);
    length = set_wifi_uart_buffer(length, str, my_strlen(str));
#endif
  
    length = set_wifi_uart_buffer(length, "}", my_strlen("}"));
 8005ae0:	197b      	adds	r3, r7, r5
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b29c      	uxth	r4, r3
 8005ae6:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <product_info_update+0x14c>)
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff f87c 	bl	8004be6 <my_strlen>
 8005aee:	0003      	movs	r3, r0
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <product_info_update+0x14c>)
 8005af4:	0019      	movs	r1, r3
 8005af6:	0020      	movs	r0, r4
 8005af8:	f7ff fe76 	bl	80057e8 <set_wifi_uart_buffer>
 8005afc:	0003      	movs	r3, r0
 8005afe:	001a      	movs	r2, r3
 8005b00:	197b      	adds	r3, r7, r5
 8005b02:	701a      	strb	r2, [r3, #0]
    
    wifi_uart_write_frame(PRODUCT_INFO_CMD, MCU_TX_VER, length);
 8005b04:	197b      	adds	r3, r7, r5
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	001a      	movs	r2, r3
 8005b0c:	2103      	movs	r1, #3
 8005b0e:	2001      	movs	r0, #1
 8005b10:	f7ff fee4 	bl	80058dc <wifi_uart_write_frame>
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b1c:	080067b4 	.word	0x080067b4
 8005b20:	080067bc 	.word	0x080067bc
 8005b24:	080067d0 	.word	0x080067d0
 8005b28:	080067d8 	.word	0x080067d8
 8005b2c:	080067e0 	.word	0x080067e0
 8005b30:	080067e8 	.word	0x080067e8
 8005b34:	080067ec 	.word	0x080067ec

08005b38 <get_mcu_wifi_mode>:
 * @brief  mcu查询mcu和wifi的工作模式
 * @param  Null
 * @return Null
 */
static void get_mcu_wifi_mode(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
    unsigned char length = 0;
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
    length = set_wifi_uart_byte(length, WF_RESERT_KEY);
#else                                                           
    //No need to process data
#endif
    
    wifi_uart_write_frame(WORK_MODE_CMD, MCU_TX_VER, length);
 8005b44:	1dfb      	adds	r3, r7, #7
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	2103      	movs	r1, #3
 8005b4e:	2002      	movs	r0, #2
 8005b50:	f7ff fec4 	bl	80058dc <wifi_uart_write_frame>
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b002      	add	sp, #8
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <get_dowmload_dpid_index>:
 * @brief  获取制定DPID在数组中的序号
 * @param[in] {dpid} dpid
 * @return dp序号
 */
static unsigned char get_dowmload_dpid_index(unsigned char dpid)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	0002      	movs	r2, r0
 8005b64:	1dfb      	adds	r3, r7, #7
 8005b66:	701a      	strb	r2, [r3, #0]
    unsigned char index;
    unsigned char total = get_download_cmd_total();
 8005b68:	230e      	movs	r3, #14
 8005b6a:	18fc      	adds	r4, r7, r3
 8005b6c:	f7ff fe08 	bl	8005780 <get_download_cmd_total>
 8005b70:	0003      	movs	r3, r0
 8005b72:	7023      	strb	r3, [r4, #0]
    
    for(index = 0; index < total; index ++) {
 8005b74:	230f      	movs	r3, #15
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	e00e      	b.n	8005b9c <get_dowmload_dpid_index+0x40>
        if(download_cmd[index].dp_id == dpid) {
 8005b7e:	210f      	movs	r1, #15
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <get_dowmload_dpid_index+0x64>)
 8005b86:	0052      	lsls	r2, r2, #1
 8005b88:	5cd3      	ldrb	r3, [r2, r3]
 8005b8a:	1dfa      	adds	r2, r7, #7
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d00d      	beq.n	8005bae <get_dowmload_dpid_index+0x52>
    for(index = 0; index < total; index ++) {
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	187b      	adds	r3, r7, r1
 8005b98:	3201      	adds	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	230f      	movs	r3, #15
 8005b9e:	18fa      	adds	r2, r7, r3
 8005ba0:	230e      	movs	r3, #14
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d3e8      	bcc.n	8005b7e <get_dowmload_dpid_index+0x22>
 8005bac:	e000      	b.n	8005bb0 <get_dowmload_dpid_index+0x54>
            break;
 8005bae:	46c0      	nop			; (mov r8, r8)
        }
    }
    
    return index;
 8005bb0:	230f      	movs	r3, #15
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	781b      	ldrb	r3, [r3, #0]
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b005      	add	sp, #20
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	080070e0 	.word	0x080070e0

08005bc4 <data_point_handle>:
 * @brief  下发数据处理
 * @param[in] {value} 下发数据源指针
 * @return 返回数据处理结果
 */
static unsigned char data_point_handle(const unsigned char value[])
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    unsigned char dp_id,index;
    unsigned char dp_type;
    unsigned char ret;
    unsigned short dp_len;
    
    dp_id = value[0];
 8005bcc:	250f      	movs	r5, #15
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	701a      	strb	r2, [r3, #0]
    dp_type = value[1];
 8005bd6:	260e      	movs	r6, #14
 8005bd8:	19bb      	adds	r3, r7, r6
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	7852      	ldrb	r2, [r2, #1]
 8005bde:	701a      	strb	r2, [r3, #0]
    dp_len = value[2] * 0x100;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3302      	adds	r3, #2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	200c      	movs	r0, #12
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	0212      	lsls	r2, r2, #8
 8005bee:	801a      	strh	r2, [r3, #0]
    dp_len += value[3];
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3303      	adds	r3, #3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b299      	uxth	r1, r3
 8005bf8:	183b      	adds	r3, r7, r0
 8005bfa:	183a      	adds	r2, r7, r0
 8005bfc:	8812      	ldrh	r2, [r2, #0]
 8005bfe:	188a      	adds	r2, r1, r2
 8005c00:	801a      	strh	r2, [r3, #0]
    
    index = get_dowmload_dpid_index(dp_id);
 8005c02:	230b      	movs	r3, #11
 8005c04:	18fc      	adds	r4, r7, r3
 8005c06:	197b      	adds	r3, r7, r5
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f7ff ffa6 	bl	8005b5c <get_dowmload_dpid_index>
 8005c10:	0003      	movs	r3, r0
 8005c12:	7023      	strb	r3, [r4, #0]

    if(dp_type != download_cmd[index].dp_type) {
 8005c14:	230b      	movs	r3, #11
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <data_point_handle+0x98>)
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	3301      	adds	r3, #1
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	19ba      	adds	r2, r7, r6
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <data_point_handle+0x6c>
        //错误提示
        return FALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e010      	b.n	8005c52 <data_point_handle+0x8e>
    }else {
        ret = dp_download_handle(dp_id,value + 4,dp_len);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1d19      	adds	r1, r3, #4
 8005c34:	250a      	movs	r5, #10
 8005c36:	197c      	adds	r4, r7, r5
 8005c38:	230c      	movs	r3, #12
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	230f      	movs	r3, #15
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff fd03 	bl	8005650 <dp_download_handle>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	7023      	strb	r3, [r4, #0]
    }
    
    return ret;
 8005c4e:	197b      	adds	r3, r7, r5
 8005c50:	781b      	ldrb	r3, [r3, #0]
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b005      	add	sp, #20
 8005c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	080070e0 	.word	0x080070e0

08005c60 <data_handle>:
 * @brief  数据帧处理
 * @param[in] {offset} 数据起始位
 * @return Null
 */
void data_handle(unsigned short offset)
{
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	0002      	movs	r2, r0
 8005c68:	1dbb      	adds	r3, r7, #6
 8005c6a:	801a      	strh	r2, [r3, #0]
    unsigned short dp_len;
#endif
  
    unsigned char ret;
    unsigned short i,total_len;
    unsigned char cmd_type = wifi_data_process_buf[offset + FRAME_TYPE];
 8005c6c:	1dbb      	adds	r3, r7, #6
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	1cda      	adds	r2, r3, #3
 8005c72:	2015      	movs	r0, #21
 8005c74:	183b      	adds	r3, r7, r0
 8005c76:	4954      	ldr	r1, [pc, #336]	; (8005dc8 <data_handle+0x168>)
 8005c78:	5c8a      	ldrb	r2, [r1, r2]
 8005c7a:	701a      	strb	r2, [r3, #0]
    static unsigned short file_package_size = 0;                                //文件数据包一包的大小
    static unsigned char file_download_flag = 0;                                //文件下载标志
    unsigned int file_download_size = 0;
#endif

    switch(cmd_type)
 8005c7c:	183b      	adds	r3, r7, r0
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b0e      	cmp	r3, #14
 8005c82:	d900      	bls.n	8005c86 <data_handle+0x26>
 8005c84:	e09a      	b.n	8005dbc <data_handle+0x15c>
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <data_handle+0x16c>)
 8005c8a:	18d3      	adds	r3, r2, r3
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	469f      	mov	pc, r3
    {
        case HEAT_BEAT_CMD:                                     //心跳包
            heat_beat_check();
 8005c90:	f7ff fe78 	bl	8005984 <heat_beat_check>
        break;
 8005c94:	e093      	b.n	8005dbe <data_handle+0x15e>
    
        case PRODUCT_INFO_CMD:                                  //产品信息
            product_info_update();
 8005c96:	f7ff fea7 	bl	80059e8 <product_info_update>
        break;
 8005c9a:	e090      	b.n	8005dbe <data_handle+0x15e>
    
        case WORK_MODE_CMD:                                     //查询MCU设定的模块工作模式
            get_mcu_wifi_mode();
 8005c9c:	f7ff ff4c 	bl	8005b38 <get_mcu_wifi_mode>
        break;
 8005ca0:	e08d      	b.n	8005dbe <data_handle+0x15e>
    
#ifndef WIFI_CONTROL_SELF_MODE
        case WIFI_STATE_CMD:                                    //wifi工作状态	
            wifi_work_state = wifi_data_process_buf[offset + DATA_START];
 8005ca2:	1dbb      	adds	r3, r7, #6
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	3306      	adds	r3, #6
 8005ca8:	4a47      	ldr	r2, [pc, #284]	; (8005dc8 <data_handle+0x168>)
 8005caa:	5cd3      	ldrb	r3, [r2, r3]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <data_handle+0x170>)
 8005cb0:	701a      	strb	r2, [r3, #0]
            wifi_uart_write_frame(WIFI_STATE_CMD, MCU_TX_VER, 0);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2103      	movs	r1, #3
 8005cb6:	2003      	movs	r0, #3
 8005cb8:	f7ff fe10 	bl	80058dc <wifi_uart_write_frame>
            if(wifi_work_state == WIFI_CONNECTED && isWoSend == 0) { //当WIFI连接成功，打开天气数据且仅一次
                mcu_open_weather();
                isWoSend = 1;
            }
#endif
        break;
 8005cbc:	e07f      	b.n	8005dbe <data_handle+0x15e>

        case WIFI_RESET_CMD:                                    //重置wifi(wifi返回成功)
            reset_wifi_flag = RESET_WIFI_SUCCESS;
 8005cbe:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <data_handle+0x174>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	701a      	strb	r2, [r3, #0]
        break;
 8005cc4:	e07b      	b.n	8005dbe <data_handle+0x15e>
    
        case WIFI_MODE_CMD:                                     //选择smartconfig/AP模式(wifi返回成功)	
            set_wifimode_flag = SET_WIFICONFIG_SUCCESS;
 8005cc6:	4b44      	ldr	r3, [pc, #272]	; (8005dd8 <data_handle+0x178>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
        break;
 8005ccc:	e077      	b.n	8005dbe <data_handle+0x15e>
#endif
    
        case DATA_QUERT_CMD:                                    //命令下发
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
 8005cce:	1dbb      	adds	r3, r7, #6
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <data_handle+0x168>)
 8005cd6:	5cd3      	ldrb	r3, [r2, r3]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	b21a      	sxth	r2, r3
 8005cde:	1dbb      	adds	r3, r7, #6
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	3305      	adds	r3, #5
 8005ce4:	4938      	ldr	r1, [pc, #224]	; (8005dc8 <data_handle+0x168>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b21a      	sxth	r2, r3
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	801a      	strh	r2, [r3, #0]
    
            for(i = 0;i < total_len; ) {
 8005cf6:	2316      	movs	r3, #22
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e038      	b.n	8005d72 <data_handle+0x112>
                dp_len = wifi_data_process_buf[offset + DATA_START + i + 2] * 0x100;
 8005d00:	1dbb      	adds	r3, r7, #6
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	1d9a      	adds	r2, r3, #6
 8005d06:	2016      	movs	r0, #22
 8005d08:	183b      	adds	r3, r7, r0
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	18d3      	adds	r3, r2, r3
 8005d0e:	3302      	adds	r3, #2
 8005d10:	4a2d      	ldr	r2, [pc, #180]	; (8005dc8 <data_handle+0x168>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	260e      	movs	r6, #14
 8005d1a:	19bb      	adds	r3, r7, r6
 8005d1c:	0212      	lsls	r2, r2, #8
 8005d1e:	801a      	strh	r2, [r3, #0]
                dp_len += wifi_data_process_buf[offset + DATA_START + i + 3];
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	1d9a      	adds	r2, r3, #6
 8005d26:	183b      	adds	r3, r7, r0
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <data_handle+0x168>)
 8005d30:	5cd3      	ldrb	r3, [r2, r3]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	b299      	uxth	r1, r3
 8005d36:	19bb      	adds	r3, r7, r6
 8005d38:	19ba      	adds	r2, r7, r6
 8005d3a:	8812      	ldrh	r2, [r2, #0]
 8005d3c:	188a      	adds	r2, r1, r2
 8005d3e:	801a      	strh	r2, [r3, #0]
                //
                ret = data_point_handle((unsigned char *)wifi_data_process_buf + offset + DATA_START + i);
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	881a      	ldrh	r2, [r3, #0]
 8005d44:	0005      	movs	r5, r0
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	18d3      	adds	r3, r2, r3
 8005d4c:	1d9a      	adds	r2, r3, #6
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <data_handle+0x168>)
 8005d50:	18d3      	adds	r3, r2, r3
 8005d52:	220d      	movs	r2, #13
 8005d54:	18bc      	adds	r4, r7, r2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff ff34 	bl	8005bc4 <data_point_handle>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	7023      	strb	r3, [r4, #0]
                    //成功提示
                }else {
                    //错误提示
                }
      
                i += (dp_len + 4);
 8005d60:	19ba      	adds	r2, r7, r6
 8005d62:	197b      	adds	r3, r7, r5
 8005d64:	8812      	ldrh	r2, [r2, #0]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	197b      	adds	r3, r7, r5
 8005d6e:	3204      	adds	r2, #4
 8005d70:	801a      	strh	r2, [r3, #0]
            for(i = 0;i < total_len; ) {
 8005d72:	2316      	movs	r3, #22
 8005d74:	18fa      	adds	r2, r7, r3
 8005d76:	2310      	movs	r3, #16
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d3be      	bcc.n	8005d00 <data_handle+0xa0>
            }
        break;
 8005d82:	e01c      	b.n	8005dbe <data_handle+0x15e>
    
        case STATE_QUERY_CMD:                                   //状态查询
            all_data_update();                               
 8005d84:	f7ff fabe 	bl	8005304 <all_data_update>
        break;
 8005d88:	e019      	b.n	8005dbe <data_handle+0x15e>
        break;
#endif
 
#ifdef WIFI_TEST_ENABLE
        case WIFI_TEST_CMD:                                     //wifi功能测试（扫描指定路由）
            result = wifi_data_process_buf[offset + DATA_START];
 8005d8a:	1dbb      	adds	r3, r7, #6
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	1d9a      	adds	r2, r3, #6
 8005d90:	2014      	movs	r0, #20
 8005d92:	183b      	adds	r3, r7, r0
 8005d94:	490c      	ldr	r1, [pc, #48]	; (8005dc8 <data_handle+0x168>)
 8005d96:	5c8a      	ldrb	r2, [r1, r2]
 8005d98:	701a      	strb	r2, [r3, #0]
            rssi = wifi_data_process_buf[offset + DATA_START + 1];
 8005d9a:	1dbb      	adds	r3, r7, #6
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	1dda      	adds	r2, r3, #7
 8005da0:	2413      	movs	r4, #19
 8005da2:	193b      	adds	r3, r7, r4
 8005da4:	4908      	ldr	r1, [pc, #32]	; (8005dc8 <data_handle+0x168>)
 8005da6:	5c8a      	ldrb	r2, [r1, r2]
 8005da8:	701a      	strb	r2, [r3, #0]
            wifi_test_result(result, rssi);
 8005daa:	193b      	adds	r3, r7, r4
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	183b      	adds	r3, r7, r0
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff fce9 	bl	800578c <wifi_test_result>
        break;
 8005dba:	e000      	b.n	8005dbe <data_handle+0x15e>
            voice_module_extend_fun((unsigned char *)(wifi_data_process_buf + offset + DATA_START), total_len);
        break;
#endif
        

        default:break;
 8005dbc:	46c0      	nop			; (mov r8, r8)
    }
}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b007      	add	sp, #28
 8005dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	200001ec 	.word	0x200001ec
 8005dcc:	0800715c 	.word	0x0800715c
 8005dd0:	20000263 	.word	0x20000263
 8005dd4:	20000264 	.word	0x20000264
 8005dd8:	2000020b 	.word	0x2000020b

08005ddc <with_data_rxbuff>:
 * @brief  判断串口接收缓存中是否有数据
 * @param  Null
 * @return 是否有数据
 */
unsigned char with_data_rxbuff(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
    if(rx_buf_in != rx_buf_out)
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <with_data_rxbuff+0x1c>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <with_data_rxbuff+0x20>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <with_data_rxbuff+0x14>
        return 1;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <with_data_rxbuff+0x16>
    else
        return 0;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	2000020c 	.word	0x2000020c
 8005dfc:	20000228 	.word	0x20000228

08005e00 <take_byte_rxbuff>:
 * @brief  读取队列1字节数据
 * @param  Null
 * @return Read the data
 */
unsigned char take_byte_rxbuff(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
    unsigned char value;
    
    if(rx_buf_out != rx_buf_in) {
 8005e06:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <take_byte_rxbuff+0x40>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <take_byte_rxbuff+0x44>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d00f      	beq.n	8005e32 <take_byte_rxbuff+0x32>
        //有数据
        if(rx_buf_out >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <take_byte_rxbuff+0x40>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <take_byte_rxbuff+0x48>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <take_byte_rxbuff+0x22>
            //数据已经到末尾
            rx_buf_out = (unsigned char *)(wifi_uart_rx_buf);
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <take_byte_rxbuff+0x40>)
 8005e1e:	4a0b      	ldr	r2, [pc, #44]	; (8005e4c <take_byte_rxbuff+0x4c>)
 8005e20:	601a      	str	r2, [r3, #0]
        }
        
        value = *rx_buf_out ++;   
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <take_byte_rxbuff+0x40>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	4a05      	ldr	r2, [pc, #20]	; (8005e40 <take_byte_rxbuff+0x40>)
 8005e2a:	6011      	str	r1, [r2, #0]
 8005e2c:	1dfa      	adds	r2, r7, #7
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	7013      	strb	r3, [r2, #0]
    }
    
    return value;
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	781b      	ldrb	r3, [r3, #0]
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b002      	add	sp, #8
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	20000228 	.word	0x20000228
 8005e44:	2000020c 	.word	0x2000020c
 8005e48:	20000227 	.word	0x20000227
 8005e4c:	20000210 	.word	0x20000210

08005e50 <__errno>:
 8005e50:	4b01      	ldr	r3, [pc, #4]	; (8005e58 <__errno+0x8>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	4770      	bx	lr
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	20000028 	.word	0x20000028

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	2600      	movs	r6, #0
 8005e60:	4d0c      	ldr	r5, [pc, #48]	; (8005e94 <__libc_init_array+0x38>)
 8005e62:	4c0d      	ldr	r4, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	f000 fc47 	bl	8006700 <_init>
 8005e72:	4d0a      	ldr	r5, [pc, #40]	; (8005e9c <__libc_init_array+0x40>)
 8005e74:	4c0a      	ldr	r4, [pc, #40]	; (8005ea0 <__libc_init_array+0x44>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	00b3      	lsls	r3, r6, #2
 8005e82:	58eb      	ldr	r3, [r5, r3]
 8005e84:	4798      	blx	r3
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	00b3      	lsls	r3, r6, #2
 8005e8c:	58eb      	ldr	r3, [r5, r3]
 8005e8e:	4798      	blx	r3
 8005e90:	3601      	adds	r6, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	080071cc 	.word	0x080071cc
 8005e98:	080071cc 	.word	0x080071cc
 8005e9c:	080071cc 	.word	0x080071cc
 8005ea0:	080071d0 	.word	0x080071d0

08005ea4 <memset>:
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	1882      	adds	r2, r0, r2
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <memset+0xa>
 8005eac:	4770      	bx	lr
 8005eae:	7019      	strb	r1, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	e7f9      	b.n	8005ea8 <memset+0x4>

08005eb4 <siprintf>:
 8005eb4:	b40e      	push	{r1, r2, r3}
 8005eb6:	b500      	push	{lr}
 8005eb8:	490b      	ldr	r1, [pc, #44]	; (8005ee8 <siprintf+0x34>)
 8005eba:	b09c      	sub	sp, #112	; 0x70
 8005ebc:	ab1d      	add	r3, sp, #116	; 0x74
 8005ebe:	9002      	str	r0, [sp, #8]
 8005ec0:	9006      	str	r0, [sp, #24]
 8005ec2:	9107      	str	r1, [sp, #28]
 8005ec4:	9104      	str	r1, [sp, #16]
 8005ec6:	4809      	ldr	r0, [pc, #36]	; (8005eec <siprintf+0x38>)
 8005ec8:	4909      	ldr	r1, [pc, #36]	; (8005ef0 <siprintf+0x3c>)
 8005eca:	cb04      	ldmia	r3!, {r2}
 8005ecc:	9105      	str	r1, [sp, #20]
 8005ece:	6800      	ldr	r0, [r0, #0]
 8005ed0:	a902      	add	r1, sp, #8
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	f000 f870 	bl	8005fb8 <_svfiprintf_r>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9a02      	ldr	r2, [sp, #8]
 8005edc:	7013      	strb	r3, [r2, #0]
 8005ede:	b01c      	add	sp, #112	; 0x70
 8005ee0:	bc08      	pop	{r3}
 8005ee2:	b003      	add	sp, #12
 8005ee4:	4718      	bx	r3
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	7fffffff 	.word	0x7fffffff
 8005eec:	20000028 	.word	0x20000028
 8005ef0:	ffff0208 	.word	0xffff0208

08005ef4 <__ssputs_r>:
 8005ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef6:	688e      	ldr	r6, [r1, #8]
 8005ef8:	b085      	sub	sp, #20
 8005efa:	0007      	movs	r7, r0
 8005efc:	000c      	movs	r4, r1
 8005efe:	9203      	str	r2, [sp, #12]
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	429e      	cmp	r6, r3
 8005f04:	d83c      	bhi.n	8005f80 <__ssputs_r+0x8c>
 8005f06:	2390      	movs	r3, #144	; 0x90
 8005f08:	898a      	ldrh	r2, [r1, #12]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	421a      	tst	r2, r3
 8005f0e:	d034      	beq.n	8005f7a <__ssputs_r+0x86>
 8005f10:	2503      	movs	r5, #3
 8005f12:	6909      	ldr	r1, [r1, #16]
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	1a5b      	subs	r3, r3, r1
 8005f18:	9302      	str	r3, [sp, #8]
 8005f1a:	6963      	ldr	r3, [r4, #20]
 8005f1c:	9802      	ldr	r0, [sp, #8]
 8005f1e:	435d      	muls	r5, r3
 8005f20:	0feb      	lsrs	r3, r5, #31
 8005f22:	195d      	adds	r5, r3, r5
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	106d      	asrs	r5, r5, #1
 8005f28:	3301      	adds	r3, #1
 8005f2a:	181b      	adds	r3, r3, r0
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	d900      	bls.n	8005f32 <__ssputs_r+0x3e>
 8005f30:	001d      	movs	r5, r3
 8005f32:	0553      	lsls	r3, r2, #21
 8005f34:	d532      	bpl.n	8005f9c <__ssputs_r+0xa8>
 8005f36:	0029      	movs	r1, r5
 8005f38:	0038      	movs	r0, r7
 8005f3a:	f000 fb31 	bl	80065a0 <_malloc_r>
 8005f3e:	1e06      	subs	r6, r0, #0
 8005f40:	d109      	bne.n	8005f56 <__ssputs_r+0x62>
 8005f42:	230c      	movs	r3, #12
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	2001      	movs	r0, #1
 8005f4a:	89a2      	ldrh	r2, [r4, #12]
 8005f4c:	4240      	negs	r0, r0
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	b005      	add	sp, #20
 8005f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f56:	9a02      	ldr	r2, [sp, #8]
 8005f58:	6921      	ldr	r1, [r4, #16]
 8005f5a:	f000 faba 	bl	80064d2 <memcpy>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <__ssputs_r+0xc0>)
 8005f62:	401a      	ands	r2, r3
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	4313      	orrs	r3, r2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	6126      	str	r6, [r4, #16]
 8005f6e:	18f6      	adds	r6, r6, r3
 8005f70:	6026      	str	r6, [r4, #0]
 8005f72:	6165      	str	r5, [r4, #20]
 8005f74:	9e01      	ldr	r6, [sp, #4]
 8005f76:	1aed      	subs	r5, r5, r3
 8005f78:	60a5      	str	r5, [r4, #8]
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	429e      	cmp	r6, r3
 8005f7e:	d900      	bls.n	8005f82 <__ssputs_r+0x8e>
 8005f80:	9e01      	ldr	r6, [sp, #4]
 8005f82:	0032      	movs	r2, r6
 8005f84:	9903      	ldr	r1, [sp, #12]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	f000 faac 	bl	80064e4 <memmove>
 8005f8c:	68a3      	ldr	r3, [r4, #8]
 8005f8e:	2000      	movs	r0, #0
 8005f90:	1b9b      	subs	r3, r3, r6
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	199e      	adds	r6, r3, r6
 8005f98:	6026      	str	r6, [r4, #0]
 8005f9a:	e7da      	b.n	8005f52 <__ssputs_r+0x5e>
 8005f9c:	002a      	movs	r2, r5
 8005f9e:	0038      	movs	r0, r7
 8005fa0:	f000 fb5c 	bl	800665c <_realloc_r>
 8005fa4:	1e06      	subs	r6, r0, #0
 8005fa6:	d1e0      	bne.n	8005f6a <__ssputs_r+0x76>
 8005fa8:	0038      	movs	r0, r7
 8005faa:	6921      	ldr	r1, [r4, #16]
 8005fac:	f000 faae 	bl	800650c <_free_r>
 8005fb0:	e7c7      	b.n	8005f42 <__ssputs_r+0x4e>
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	fffffb7f 	.word	0xfffffb7f

08005fb8 <_svfiprintf_r>:
 8005fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fba:	b0a1      	sub	sp, #132	; 0x84
 8005fbc:	9003      	str	r0, [sp, #12]
 8005fbe:	001d      	movs	r5, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	000f      	movs	r7, r1
 8005fc4:	0016      	movs	r6, r2
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	d511      	bpl.n	8005fee <_svfiprintf_r+0x36>
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10e      	bne.n	8005fee <_svfiprintf_r+0x36>
 8005fd0:	2140      	movs	r1, #64	; 0x40
 8005fd2:	f000 fae5 	bl	80065a0 <_malloc_r>
 8005fd6:	6038      	str	r0, [r7, #0]
 8005fd8:	6138      	str	r0, [r7, #16]
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d105      	bne.n	8005fea <_svfiprintf_r+0x32>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	9a03      	ldr	r2, [sp, #12]
 8005fe2:	3801      	subs	r0, #1
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	b021      	add	sp, #132	; 0x84
 8005fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	ac08      	add	r4, sp, #32
 8005ff2:	6163      	str	r3, [r4, #20]
 8005ff4:	3320      	adds	r3, #32
 8005ff6:	7663      	strb	r3, [r4, #25]
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	76a3      	strb	r3, [r4, #26]
 8005ffc:	9507      	str	r5, [sp, #28]
 8005ffe:	0035      	movs	r5, r6
 8006000:	782b      	ldrb	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <_svfiprintf_r+0x52>
 8006006:	2b25      	cmp	r3, #37	; 0x25
 8006008:	d147      	bne.n	800609a <_svfiprintf_r+0xe2>
 800600a:	1bab      	subs	r3, r5, r6
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	42b5      	cmp	r5, r6
 8006010:	d00c      	beq.n	800602c <_svfiprintf_r+0x74>
 8006012:	0032      	movs	r2, r6
 8006014:	0039      	movs	r1, r7
 8006016:	9803      	ldr	r0, [sp, #12]
 8006018:	f7ff ff6c 	bl	8005ef4 <__ssputs_r>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d100      	bne.n	8006022 <_svfiprintf_r+0x6a>
 8006020:	e0ae      	b.n	8006180 <_svfiprintf_r+0x1c8>
 8006022:	6962      	ldr	r2, [r4, #20]
 8006024:	9b05      	ldr	r3, [sp, #20]
 8006026:	4694      	mov	ip, r2
 8006028:	4463      	add	r3, ip
 800602a:	6163      	str	r3, [r4, #20]
 800602c:	782b      	ldrb	r3, [r5, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d100      	bne.n	8006034 <_svfiprintf_r+0x7c>
 8006032:	e0a5      	b.n	8006180 <_svfiprintf_r+0x1c8>
 8006034:	2201      	movs	r2, #1
 8006036:	2300      	movs	r3, #0
 8006038:	4252      	negs	r2, r2
 800603a:	6062      	str	r2, [r4, #4]
 800603c:	a904      	add	r1, sp, #16
 800603e:	3254      	adds	r2, #84	; 0x54
 8006040:	1852      	adds	r2, r2, r1
 8006042:	1c6e      	adds	r6, r5, #1
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	60e3      	str	r3, [r4, #12]
 8006048:	60a3      	str	r3, [r4, #8]
 800604a:	7013      	strb	r3, [r2, #0]
 800604c:	65a3      	str	r3, [r4, #88]	; 0x58
 800604e:	2205      	movs	r2, #5
 8006050:	7831      	ldrb	r1, [r6, #0]
 8006052:	4854      	ldr	r0, [pc, #336]	; (80061a4 <_svfiprintf_r+0x1ec>)
 8006054:	f000 fa32 	bl	80064bc <memchr>
 8006058:	1c75      	adds	r5, r6, #1
 800605a:	2800      	cmp	r0, #0
 800605c:	d11f      	bne.n	800609e <_svfiprintf_r+0xe6>
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	06d3      	lsls	r3, r2, #27
 8006062:	d504      	bpl.n	800606e <_svfiprintf_r+0xb6>
 8006064:	2353      	movs	r3, #83	; 0x53
 8006066:	a904      	add	r1, sp, #16
 8006068:	185b      	adds	r3, r3, r1
 800606a:	2120      	movs	r1, #32
 800606c:	7019      	strb	r1, [r3, #0]
 800606e:	0713      	lsls	r3, r2, #28
 8006070:	d504      	bpl.n	800607c <_svfiprintf_r+0xc4>
 8006072:	2353      	movs	r3, #83	; 0x53
 8006074:	a904      	add	r1, sp, #16
 8006076:	185b      	adds	r3, r3, r1
 8006078:	212b      	movs	r1, #43	; 0x2b
 800607a:	7019      	strb	r1, [r3, #0]
 800607c:	7833      	ldrb	r3, [r6, #0]
 800607e:	2b2a      	cmp	r3, #42	; 0x2a
 8006080:	d016      	beq.n	80060b0 <_svfiprintf_r+0xf8>
 8006082:	0035      	movs	r5, r6
 8006084:	2100      	movs	r1, #0
 8006086:	200a      	movs	r0, #10
 8006088:	68e3      	ldr	r3, [r4, #12]
 800608a:	782a      	ldrb	r2, [r5, #0]
 800608c:	1c6e      	adds	r6, r5, #1
 800608e:	3a30      	subs	r2, #48	; 0x30
 8006090:	2a09      	cmp	r2, #9
 8006092:	d94e      	bls.n	8006132 <_svfiprintf_r+0x17a>
 8006094:	2900      	cmp	r1, #0
 8006096:	d111      	bne.n	80060bc <_svfiprintf_r+0x104>
 8006098:	e017      	b.n	80060ca <_svfiprintf_r+0x112>
 800609a:	3501      	adds	r5, #1
 800609c:	e7b0      	b.n	8006000 <_svfiprintf_r+0x48>
 800609e:	4b41      	ldr	r3, [pc, #260]	; (80061a4 <_svfiprintf_r+0x1ec>)
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	1ac0      	subs	r0, r0, r3
 80060a4:	2301      	movs	r3, #1
 80060a6:	4083      	lsls	r3, r0
 80060a8:	4313      	orrs	r3, r2
 80060aa:	002e      	movs	r6, r5
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	e7ce      	b.n	800604e <_svfiprintf_r+0x96>
 80060b0:	9b07      	ldr	r3, [sp, #28]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9107      	str	r1, [sp, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db01      	blt.n	80060c0 <_svfiprintf_r+0x108>
 80060bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80060be:	e004      	b.n	80060ca <_svfiprintf_r+0x112>
 80060c0:	425b      	negs	r3, r3
 80060c2:	60e3      	str	r3, [r4, #12]
 80060c4:	2302      	movs	r3, #2
 80060c6:	4313      	orrs	r3, r2
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	782b      	ldrb	r3, [r5, #0]
 80060cc:	2b2e      	cmp	r3, #46	; 0x2e
 80060ce:	d10a      	bne.n	80060e6 <_svfiprintf_r+0x12e>
 80060d0:	786b      	ldrb	r3, [r5, #1]
 80060d2:	2b2a      	cmp	r3, #42	; 0x2a
 80060d4:	d135      	bne.n	8006142 <_svfiprintf_r+0x18a>
 80060d6:	9b07      	ldr	r3, [sp, #28]
 80060d8:	3502      	adds	r5, #2
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	9207      	str	r2, [sp, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db2b      	blt.n	800613c <_svfiprintf_r+0x184>
 80060e4:	9309      	str	r3, [sp, #36]	; 0x24
 80060e6:	4e30      	ldr	r6, [pc, #192]	; (80061a8 <_svfiprintf_r+0x1f0>)
 80060e8:	2203      	movs	r2, #3
 80060ea:	0030      	movs	r0, r6
 80060ec:	7829      	ldrb	r1, [r5, #0]
 80060ee:	f000 f9e5 	bl	80064bc <memchr>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d006      	beq.n	8006104 <_svfiprintf_r+0x14c>
 80060f6:	2340      	movs	r3, #64	; 0x40
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	4083      	lsls	r3, r0
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	3501      	adds	r5, #1
 8006100:	4313      	orrs	r3, r2
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	7829      	ldrb	r1, [r5, #0]
 8006106:	2206      	movs	r2, #6
 8006108:	4828      	ldr	r0, [pc, #160]	; (80061ac <_svfiprintf_r+0x1f4>)
 800610a:	1c6e      	adds	r6, r5, #1
 800610c:	7621      	strb	r1, [r4, #24]
 800610e:	f000 f9d5 	bl	80064bc <memchr>
 8006112:	2800      	cmp	r0, #0
 8006114:	d03c      	beq.n	8006190 <_svfiprintf_r+0x1d8>
 8006116:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <_svfiprintf_r+0x1f8>)
 8006118:	2b00      	cmp	r3, #0
 800611a:	d125      	bne.n	8006168 <_svfiprintf_r+0x1b0>
 800611c:	2207      	movs	r2, #7
 800611e:	9b07      	ldr	r3, [sp, #28]
 8006120:	3307      	adds	r3, #7
 8006122:	4393      	bics	r3, r2
 8006124:	3308      	adds	r3, #8
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	6963      	ldr	r3, [r4, #20]
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	189b      	adds	r3, r3, r2
 800612e:	6163      	str	r3, [r4, #20]
 8006130:	e765      	b.n	8005ffe <_svfiprintf_r+0x46>
 8006132:	4343      	muls	r3, r0
 8006134:	0035      	movs	r5, r6
 8006136:	2101      	movs	r1, #1
 8006138:	189b      	adds	r3, r3, r2
 800613a:	e7a6      	b.n	800608a <_svfiprintf_r+0xd2>
 800613c:	2301      	movs	r3, #1
 800613e:	425b      	negs	r3, r3
 8006140:	e7d0      	b.n	80060e4 <_svfiprintf_r+0x12c>
 8006142:	2300      	movs	r3, #0
 8006144:	200a      	movs	r0, #10
 8006146:	001a      	movs	r2, r3
 8006148:	3501      	adds	r5, #1
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	7829      	ldrb	r1, [r5, #0]
 800614e:	1c6e      	adds	r6, r5, #1
 8006150:	3930      	subs	r1, #48	; 0x30
 8006152:	2909      	cmp	r1, #9
 8006154:	d903      	bls.n	800615e <_svfiprintf_r+0x1a6>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0c5      	beq.n	80060e6 <_svfiprintf_r+0x12e>
 800615a:	9209      	str	r2, [sp, #36]	; 0x24
 800615c:	e7c3      	b.n	80060e6 <_svfiprintf_r+0x12e>
 800615e:	4342      	muls	r2, r0
 8006160:	0035      	movs	r5, r6
 8006162:	2301      	movs	r3, #1
 8006164:	1852      	adds	r2, r2, r1
 8006166:	e7f1      	b.n	800614c <_svfiprintf_r+0x194>
 8006168:	ab07      	add	r3, sp, #28
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	003a      	movs	r2, r7
 800616e:	0021      	movs	r1, r4
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <_svfiprintf_r+0x1fc>)
 8006172:	9803      	ldr	r0, [sp, #12]
 8006174:	e000      	b.n	8006178 <_svfiprintf_r+0x1c0>
 8006176:	bf00      	nop
 8006178:	9004      	str	r0, [sp, #16]
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	3301      	adds	r3, #1
 800617e:	d1d3      	bne.n	8006128 <_svfiprintf_r+0x170>
 8006180:	89bb      	ldrh	r3, [r7, #12]
 8006182:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006184:	065b      	lsls	r3, r3, #25
 8006186:	d400      	bmi.n	800618a <_svfiprintf_r+0x1d2>
 8006188:	e72d      	b.n	8005fe6 <_svfiprintf_r+0x2e>
 800618a:	2001      	movs	r0, #1
 800618c:	4240      	negs	r0, r0
 800618e:	e72a      	b.n	8005fe6 <_svfiprintf_r+0x2e>
 8006190:	ab07      	add	r3, sp, #28
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	003a      	movs	r2, r7
 8006196:	0021      	movs	r1, r4
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <_svfiprintf_r+0x1fc>)
 800619a:	9803      	ldr	r0, [sp, #12]
 800619c:	f000 f87c 	bl	8006298 <_printf_i>
 80061a0:	e7ea      	b.n	8006178 <_svfiprintf_r+0x1c0>
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	08007198 	.word	0x08007198
 80061a8:	0800719e 	.word	0x0800719e
 80061ac:	080071a2 	.word	0x080071a2
 80061b0:	00000000 	.word	0x00000000
 80061b4:	08005ef5 	.word	0x08005ef5

080061b8 <_printf_common>:
 80061b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ba:	0015      	movs	r5, r2
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	688a      	ldr	r2, [r1, #8]
 80061c0:	690b      	ldr	r3, [r1, #16]
 80061c2:	000c      	movs	r4, r1
 80061c4:	9000      	str	r0, [sp, #0]
 80061c6:	4293      	cmp	r3, r2
 80061c8:	da00      	bge.n	80061cc <_printf_common+0x14>
 80061ca:	0013      	movs	r3, r2
 80061cc:	0022      	movs	r2, r4
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	3243      	adds	r2, #67	; 0x43
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d001      	beq.n	80061dc <_printf_common+0x24>
 80061d8:	3301      	adds	r3, #1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	069b      	lsls	r3, r3, #26
 80061e0:	d502      	bpl.n	80061e8 <_printf_common+0x30>
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	3302      	adds	r3, #2
 80061e6:	602b      	str	r3, [r5, #0]
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	2306      	movs	r3, #6
 80061ec:	0017      	movs	r7, r2
 80061ee:	401f      	ands	r7, r3
 80061f0:	421a      	tst	r2, r3
 80061f2:	d027      	beq.n	8006244 <_printf_common+0x8c>
 80061f4:	0023      	movs	r3, r4
 80061f6:	3343      	adds	r3, #67	; 0x43
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	4193      	sbcs	r3, r2
 80061fe:	6822      	ldr	r2, [r4, #0]
 8006200:	0692      	lsls	r2, r2, #26
 8006202:	d430      	bmi.n	8006266 <_printf_common+0xae>
 8006204:	0022      	movs	r2, r4
 8006206:	9901      	ldr	r1, [sp, #4]
 8006208:	9800      	ldr	r0, [sp, #0]
 800620a:	9e08      	ldr	r6, [sp, #32]
 800620c:	3243      	adds	r2, #67	; 0x43
 800620e:	47b0      	blx	r6
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d025      	beq.n	8006260 <_printf_common+0xa8>
 8006214:	2306      	movs	r3, #6
 8006216:	6820      	ldr	r0, [r4, #0]
 8006218:	682a      	ldr	r2, [r5, #0]
 800621a:	68e1      	ldr	r1, [r4, #12]
 800621c:	2500      	movs	r5, #0
 800621e:	4003      	ands	r3, r0
 8006220:	2b04      	cmp	r3, #4
 8006222:	d103      	bne.n	800622c <_printf_common+0x74>
 8006224:	1a8d      	subs	r5, r1, r2
 8006226:	43eb      	mvns	r3, r5
 8006228:	17db      	asrs	r3, r3, #31
 800622a:	401d      	ands	r5, r3
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	6922      	ldr	r2, [r4, #16]
 8006230:	4293      	cmp	r3, r2
 8006232:	dd01      	ble.n	8006238 <_printf_common+0x80>
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	18ed      	adds	r5, r5, r3
 8006238:	2700      	movs	r7, #0
 800623a:	42bd      	cmp	r5, r7
 800623c:	d120      	bne.n	8006280 <_printf_common+0xc8>
 800623e:	2000      	movs	r0, #0
 8006240:	e010      	b.n	8006264 <_printf_common+0xac>
 8006242:	3701      	adds	r7, #1
 8006244:	68e3      	ldr	r3, [r4, #12]
 8006246:	682a      	ldr	r2, [r5, #0]
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	42bb      	cmp	r3, r7
 800624c:	ddd2      	ble.n	80061f4 <_printf_common+0x3c>
 800624e:	0022      	movs	r2, r4
 8006250:	2301      	movs	r3, #1
 8006252:	9901      	ldr	r1, [sp, #4]
 8006254:	9800      	ldr	r0, [sp, #0]
 8006256:	9e08      	ldr	r6, [sp, #32]
 8006258:	3219      	adds	r2, #25
 800625a:	47b0      	blx	r6
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d1f0      	bne.n	8006242 <_printf_common+0x8a>
 8006260:	2001      	movs	r0, #1
 8006262:	4240      	negs	r0, r0
 8006264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006266:	2030      	movs	r0, #48	; 0x30
 8006268:	18e1      	adds	r1, r4, r3
 800626a:	3143      	adds	r1, #67	; 0x43
 800626c:	7008      	strb	r0, [r1, #0]
 800626e:	0021      	movs	r1, r4
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	3145      	adds	r1, #69	; 0x45
 8006274:	7809      	ldrb	r1, [r1, #0]
 8006276:	18a2      	adds	r2, r4, r2
 8006278:	3243      	adds	r2, #67	; 0x43
 800627a:	3302      	adds	r3, #2
 800627c:	7011      	strb	r1, [r2, #0]
 800627e:	e7c1      	b.n	8006204 <_printf_common+0x4c>
 8006280:	0022      	movs	r2, r4
 8006282:	2301      	movs	r3, #1
 8006284:	9901      	ldr	r1, [sp, #4]
 8006286:	9800      	ldr	r0, [sp, #0]
 8006288:	9e08      	ldr	r6, [sp, #32]
 800628a:	321a      	adds	r2, #26
 800628c:	47b0      	blx	r6
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d0e6      	beq.n	8006260 <_printf_common+0xa8>
 8006292:	3701      	adds	r7, #1
 8006294:	e7d1      	b.n	800623a <_printf_common+0x82>
	...

08006298 <_printf_i>:
 8006298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629a:	b08b      	sub	sp, #44	; 0x2c
 800629c:	9206      	str	r2, [sp, #24]
 800629e:	000a      	movs	r2, r1
 80062a0:	3243      	adds	r2, #67	; 0x43
 80062a2:	9307      	str	r3, [sp, #28]
 80062a4:	9005      	str	r0, [sp, #20]
 80062a6:	9204      	str	r2, [sp, #16]
 80062a8:	7e0a      	ldrb	r2, [r1, #24]
 80062aa:	000c      	movs	r4, r1
 80062ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062ae:	2a78      	cmp	r2, #120	; 0x78
 80062b0:	d806      	bhi.n	80062c0 <_printf_i+0x28>
 80062b2:	2a62      	cmp	r2, #98	; 0x62
 80062b4:	d808      	bhi.n	80062c8 <_printf_i+0x30>
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d100      	bne.n	80062bc <_printf_i+0x24>
 80062ba:	e0c0      	b.n	800643e <_printf_i+0x1a6>
 80062bc:	2a58      	cmp	r2, #88	; 0x58
 80062be:	d052      	beq.n	8006366 <_printf_i+0xce>
 80062c0:	0026      	movs	r6, r4
 80062c2:	3642      	adds	r6, #66	; 0x42
 80062c4:	7032      	strb	r2, [r6, #0]
 80062c6:	e022      	b.n	800630e <_printf_i+0x76>
 80062c8:	0010      	movs	r0, r2
 80062ca:	3863      	subs	r0, #99	; 0x63
 80062cc:	2815      	cmp	r0, #21
 80062ce:	d8f7      	bhi.n	80062c0 <_printf_i+0x28>
 80062d0:	f7f9 ff22 	bl	8000118 <__gnu_thumb1_case_shi>
 80062d4:	001f0016 	.word	0x001f0016
 80062d8:	fff6fff6 	.word	0xfff6fff6
 80062dc:	fff6fff6 	.word	0xfff6fff6
 80062e0:	fff6001f 	.word	0xfff6001f
 80062e4:	fff6fff6 	.word	0xfff6fff6
 80062e8:	00a8fff6 	.word	0x00a8fff6
 80062ec:	009a0036 	.word	0x009a0036
 80062f0:	fff6fff6 	.word	0xfff6fff6
 80062f4:	fff600b9 	.word	0xfff600b9
 80062f8:	fff60036 	.word	0xfff60036
 80062fc:	009efff6 	.word	0x009efff6
 8006300:	0026      	movs	r6, r4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	3642      	adds	r6, #66	; 0x42
 8006306:	1d11      	adds	r1, r2, #4
 8006308:	6019      	str	r1, [r3, #0]
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	7033      	strb	r3, [r6, #0]
 800630e:	2301      	movs	r3, #1
 8006310:	e0a7      	b.n	8006462 <_printf_i+0x1ca>
 8006312:	6808      	ldr	r0, [r1, #0]
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	1d0a      	adds	r2, r1, #4
 8006318:	0605      	lsls	r5, r0, #24
 800631a:	d50b      	bpl.n	8006334 <_printf_i+0x9c>
 800631c:	680d      	ldr	r5, [r1, #0]
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	2d00      	cmp	r5, #0
 8006322:	da03      	bge.n	800632c <_printf_i+0x94>
 8006324:	232d      	movs	r3, #45	; 0x2d
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	426d      	negs	r5, r5
 800632a:	7013      	strb	r3, [r2, #0]
 800632c:	4b61      	ldr	r3, [pc, #388]	; (80064b4 <_printf_i+0x21c>)
 800632e:	270a      	movs	r7, #10
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	e032      	b.n	800639a <_printf_i+0x102>
 8006334:	680d      	ldr	r5, [r1, #0]
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	0641      	lsls	r1, r0, #25
 800633a:	d5f1      	bpl.n	8006320 <_printf_i+0x88>
 800633c:	b22d      	sxth	r5, r5
 800633e:	e7ef      	b.n	8006320 <_printf_i+0x88>
 8006340:	680d      	ldr	r5, [r1, #0]
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	1d08      	adds	r0, r1, #4
 8006346:	6018      	str	r0, [r3, #0]
 8006348:	062e      	lsls	r6, r5, #24
 800634a:	d501      	bpl.n	8006350 <_printf_i+0xb8>
 800634c:	680d      	ldr	r5, [r1, #0]
 800634e:	e003      	b.n	8006358 <_printf_i+0xc0>
 8006350:	066d      	lsls	r5, r5, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0xb4>
 8006354:	680d      	ldr	r5, [r1, #0]
 8006356:	b2ad      	uxth	r5, r5
 8006358:	4b56      	ldr	r3, [pc, #344]	; (80064b4 <_printf_i+0x21c>)
 800635a:	270a      	movs	r7, #10
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	2a6f      	cmp	r2, #111	; 0x6f
 8006360:	d117      	bne.n	8006392 <_printf_i+0xfa>
 8006362:	2708      	movs	r7, #8
 8006364:	e015      	b.n	8006392 <_printf_i+0xfa>
 8006366:	3145      	adds	r1, #69	; 0x45
 8006368:	700a      	strb	r2, [r1, #0]
 800636a:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <_printf_i+0x21c>)
 800636c:	9203      	str	r2, [sp, #12]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	ca20      	ldmia	r2!, {r5}
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	0608      	lsls	r0, r1, #24
 8006378:	d550      	bpl.n	800641c <_printf_i+0x184>
 800637a:	07cb      	lsls	r3, r1, #31
 800637c:	d502      	bpl.n	8006384 <_printf_i+0xec>
 800637e:	2320      	movs	r3, #32
 8006380:	4319      	orrs	r1, r3
 8006382:	6021      	str	r1, [r4, #0]
 8006384:	2710      	movs	r7, #16
 8006386:	2d00      	cmp	r5, #0
 8006388:	d103      	bne.n	8006392 <_printf_i+0xfa>
 800638a:	2320      	movs	r3, #32
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	439a      	bics	r2, r3
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	0023      	movs	r3, r4
 8006394:	2200      	movs	r2, #0
 8006396:	3343      	adds	r3, #67	; 0x43
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	60a3      	str	r3, [r4, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db03      	blt.n	80063aa <_printf_i+0x112>
 80063a2:	2204      	movs	r2, #4
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	4391      	bics	r1, r2
 80063a8:	6021      	str	r1, [r4, #0]
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	d102      	bne.n	80063b4 <_printf_i+0x11c>
 80063ae:	9e04      	ldr	r6, [sp, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <_printf_i+0x136>
 80063b4:	9e04      	ldr	r6, [sp, #16]
 80063b6:	0028      	movs	r0, r5
 80063b8:	0039      	movs	r1, r7
 80063ba:	f7f9 ff3d 	bl	8000238 <__aeabi_uidivmod>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	3e01      	subs	r6, #1
 80063c2:	5c5b      	ldrb	r3, [r3, r1]
 80063c4:	7033      	strb	r3, [r6, #0]
 80063c6:	002b      	movs	r3, r5
 80063c8:	0005      	movs	r5, r0
 80063ca:	429f      	cmp	r7, r3
 80063cc:	d9f3      	bls.n	80063b6 <_printf_i+0x11e>
 80063ce:	2f08      	cmp	r7, #8
 80063d0:	d109      	bne.n	80063e6 <_printf_i+0x14e>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	07db      	lsls	r3, r3, #31
 80063d6:	d506      	bpl.n	80063e6 <_printf_i+0x14e>
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6922      	ldr	r2, [r4, #16]
 80063dc:	4293      	cmp	r3, r2
 80063de:	dc02      	bgt.n	80063e6 <_printf_i+0x14e>
 80063e0:	2330      	movs	r3, #48	; 0x30
 80063e2:	3e01      	subs	r6, #1
 80063e4:	7033      	strb	r3, [r6, #0]
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	1b9b      	subs	r3, r3, r6
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	0021      	movs	r1, r4
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	9805      	ldr	r0, [sp, #20]
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	aa09      	add	r2, sp, #36	; 0x24
 80063f8:	f7ff fede 	bl	80061b8 <_printf_common>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d135      	bne.n	800646c <_printf_i+0x1d4>
 8006400:	2001      	movs	r0, #1
 8006402:	4240      	negs	r0, r0
 8006404:	b00b      	add	sp, #44	; 0x2c
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	2220      	movs	r2, #32
 800640a:	6809      	ldr	r1, [r1, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	6022      	str	r2, [r4, #0]
 8006410:	0022      	movs	r2, r4
 8006412:	2178      	movs	r1, #120	; 0x78
 8006414:	3245      	adds	r2, #69	; 0x45
 8006416:	7011      	strb	r1, [r2, #0]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <_printf_i+0x220>)
 800641a:	e7a7      	b.n	800636c <_printf_i+0xd4>
 800641c:	0648      	lsls	r0, r1, #25
 800641e:	d5ac      	bpl.n	800637a <_printf_i+0xe2>
 8006420:	b2ad      	uxth	r5, r5
 8006422:	e7aa      	b.n	800637a <_printf_i+0xe2>
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	680d      	ldr	r5, [r1, #0]
 8006428:	1d10      	adds	r0, r2, #4
 800642a:	6949      	ldr	r1, [r1, #20]
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	062e      	lsls	r6, r5, #24
 8006432:	d501      	bpl.n	8006438 <_printf_i+0x1a0>
 8006434:	6019      	str	r1, [r3, #0]
 8006436:	e002      	b.n	800643e <_printf_i+0x1a6>
 8006438:	066d      	lsls	r5, r5, #25
 800643a:	d5fb      	bpl.n	8006434 <_printf_i+0x19c>
 800643c:	8019      	strh	r1, [r3, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	9e04      	ldr	r6, [sp, #16]
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	e7d2      	b.n	80063ec <_printf_i+0x154>
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	1d11      	adds	r1, r2, #4
 800644a:	6019      	str	r1, [r3, #0]
 800644c:	6816      	ldr	r6, [r2, #0]
 800644e:	2100      	movs	r1, #0
 8006450:	0030      	movs	r0, r6
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	f000 f832 	bl	80064bc <memchr>
 8006458:	2800      	cmp	r0, #0
 800645a:	d001      	beq.n	8006460 <_printf_i+0x1c8>
 800645c:	1b80      	subs	r0, r0, r6
 800645e:	6060      	str	r0, [r4, #4]
 8006460:	6863      	ldr	r3, [r4, #4]
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	2300      	movs	r3, #0
 8006466:	9a04      	ldr	r2, [sp, #16]
 8006468:	7013      	strb	r3, [r2, #0]
 800646a:	e7bf      	b.n	80063ec <_printf_i+0x154>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	0032      	movs	r2, r6
 8006470:	9906      	ldr	r1, [sp, #24]
 8006472:	9805      	ldr	r0, [sp, #20]
 8006474:	9d07      	ldr	r5, [sp, #28]
 8006476:	47a8      	blx	r5
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d0c1      	beq.n	8006400 <_printf_i+0x168>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	079b      	lsls	r3, r3, #30
 8006480:	d415      	bmi.n	80064ae <_printf_i+0x216>
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	68e0      	ldr	r0, [r4, #12]
 8006486:	4298      	cmp	r0, r3
 8006488:	dabc      	bge.n	8006404 <_printf_i+0x16c>
 800648a:	0018      	movs	r0, r3
 800648c:	e7ba      	b.n	8006404 <_printf_i+0x16c>
 800648e:	0022      	movs	r2, r4
 8006490:	2301      	movs	r3, #1
 8006492:	9906      	ldr	r1, [sp, #24]
 8006494:	9805      	ldr	r0, [sp, #20]
 8006496:	9e07      	ldr	r6, [sp, #28]
 8006498:	3219      	adds	r2, #25
 800649a:	47b0      	blx	r6
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d0af      	beq.n	8006400 <_printf_i+0x168>
 80064a0:	3501      	adds	r5, #1
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	42ab      	cmp	r3, r5
 80064aa:	dcf0      	bgt.n	800648e <_printf_i+0x1f6>
 80064ac:	e7e9      	b.n	8006482 <_printf_i+0x1ea>
 80064ae:	2500      	movs	r5, #0
 80064b0:	e7f7      	b.n	80064a2 <_printf_i+0x20a>
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	080071a9 	.word	0x080071a9
 80064b8:	080071ba 	.word	0x080071ba

080064bc <memchr>:
 80064bc:	b2c9      	uxtb	r1, r1
 80064be:	1882      	adds	r2, r0, r2
 80064c0:	4290      	cmp	r0, r2
 80064c2:	d101      	bne.n	80064c8 <memchr+0xc>
 80064c4:	2000      	movs	r0, #0
 80064c6:	4770      	bx	lr
 80064c8:	7803      	ldrb	r3, [r0, #0]
 80064ca:	428b      	cmp	r3, r1
 80064cc:	d0fb      	beq.n	80064c6 <memchr+0xa>
 80064ce:	3001      	adds	r0, #1
 80064d0:	e7f6      	b.n	80064c0 <memchr+0x4>

080064d2 <memcpy>:
 80064d2:	2300      	movs	r3, #0
 80064d4:	b510      	push	{r4, lr}
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d100      	bne.n	80064dc <memcpy+0xa>
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	5ccc      	ldrb	r4, [r1, r3]
 80064de:	54c4      	strb	r4, [r0, r3]
 80064e0:	3301      	adds	r3, #1
 80064e2:	e7f8      	b.n	80064d6 <memcpy+0x4>

080064e4 <memmove>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4288      	cmp	r0, r1
 80064e8:	d902      	bls.n	80064f0 <memmove+0xc>
 80064ea:	188b      	adds	r3, r1, r2
 80064ec:	4298      	cmp	r0, r3
 80064ee:	d303      	bcc.n	80064f8 <memmove+0x14>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e007      	b.n	8006504 <memmove+0x20>
 80064f4:	5c8b      	ldrb	r3, [r1, r2]
 80064f6:	5483      	strb	r3, [r0, r2]
 80064f8:	3a01      	subs	r2, #1
 80064fa:	d2fb      	bcs.n	80064f4 <memmove+0x10>
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	5ccc      	ldrb	r4, [r1, r3]
 8006500:	54c4      	strb	r4, [r0, r3]
 8006502:	3301      	adds	r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d1fa      	bne.n	80064fe <memmove+0x1a>
 8006508:	e7f8      	b.n	80064fc <memmove+0x18>
	...

0800650c <_free_r>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	0005      	movs	r5, r0
 8006510:	2900      	cmp	r1, #0
 8006512:	d010      	beq.n	8006536 <_free_r+0x2a>
 8006514:	1f0c      	subs	r4, r1, #4
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da00      	bge.n	800651e <_free_r+0x12>
 800651c:	18e4      	adds	r4, r4, r3
 800651e:	0028      	movs	r0, r5
 8006520:	f000 f8d4 	bl	80066cc <__malloc_lock>
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <_free_r+0x90>)
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <_free_r+0x2c>
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	6014      	str	r4, [r2, #0]
 8006530:	0028      	movs	r0, r5
 8006532:	f000 f8d3 	bl	80066dc <__malloc_unlock>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	42a3      	cmp	r3, r4
 800653a:	d908      	bls.n	800654e <_free_r+0x42>
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	1860      	adds	r0, r4, r1
 8006540:	4283      	cmp	r3, r0
 8006542:	d1f3      	bne.n	800652c <_free_r+0x20>
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	1841      	adds	r1, r0, r1
 800654a:	6021      	str	r1, [r4, #0]
 800654c:	e7ee      	b.n	800652c <_free_r+0x20>
 800654e:	001a      	movs	r2, r3
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <_free_r+0x4e>
 8006556:	42a3      	cmp	r3, r4
 8006558:	d9f9      	bls.n	800654e <_free_r+0x42>
 800655a:	6811      	ldr	r1, [r2, #0]
 800655c:	1850      	adds	r0, r2, r1
 800655e:	42a0      	cmp	r0, r4
 8006560:	d10b      	bne.n	800657a <_free_r+0x6e>
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	1809      	adds	r1, r1, r0
 8006566:	1850      	adds	r0, r2, r1
 8006568:	6011      	str	r1, [r2, #0]
 800656a:	4283      	cmp	r3, r0
 800656c:	d1e0      	bne.n	8006530 <_free_r+0x24>
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	1841      	adds	r1, r0, r1
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	6053      	str	r3, [r2, #4]
 8006578:	e7da      	b.n	8006530 <_free_r+0x24>
 800657a:	42a0      	cmp	r0, r4
 800657c:	d902      	bls.n	8006584 <_free_r+0x78>
 800657e:	230c      	movs	r3, #12
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	e7d5      	b.n	8006530 <_free_r+0x24>
 8006584:	6821      	ldr	r1, [r4, #0]
 8006586:	1860      	adds	r0, r4, r1
 8006588:	4283      	cmp	r3, r0
 800658a:	d103      	bne.n	8006594 <_free_r+0x88>
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	1841      	adds	r1, r0, r1
 8006592:	6021      	str	r1, [r4, #0]
 8006594:	6063      	str	r3, [r4, #4]
 8006596:	6054      	str	r4, [r2, #4]
 8006598:	e7ca      	b.n	8006530 <_free_r+0x24>
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	200000c4 	.word	0x200000c4

080065a0 <_malloc_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	2303      	movs	r3, #3
 80065a4:	1ccd      	adds	r5, r1, #3
 80065a6:	439d      	bics	r5, r3
 80065a8:	3508      	adds	r5, #8
 80065aa:	0006      	movs	r6, r0
 80065ac:	2d0c      	cmp	r5, #12
 80065ae:	d21f      	bcs.n	80065f0 <_malloc_r+0x50>
 80065b0:	250c      	movs	r5, #12
 80065b2:	42a9      	cmp	r1, r5
 80065b4:	d81e      	bhi.n	80065f4 <_malloc_r+0x54>
 80065b6:	0030      	movs	r0, r6
 80065b8:	f000 f888 	bl	80066cc <__malloc_lock>
 80065bc:	4925      	ldr	r1, [pc, #148]	; (8006654 <_malloc_r+0xb4>)
 80065be:	680a      	ldr	r2, [r1, #0]
 80065c0:	0014      	movs	r4, r2
 80065c2:	2c00      	cmp	r4, #0
 80065c4:	d11a      	bne.n	80065fc <_malloc_r+0x5c>
 80065c6:	4f24      	ldr	r7, [pc, #144]	; (8006658 <_malloc_r+0xb8>)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <_malloc_r+0x38>
 80065ce:	0021      	movs	r1, r4
 80065d0:	0030      	movs	r0, r6
 80065d2:	f000 f869 	bl	80066a8 <_sbrk_r>
 80065d6:	6038      	str	r0, [r7, #0]
 80065d8:	0029      	movs	r1, r5
 80065da:	0030      	movs	r0, r6
 80065dc:	f000 f864 	bl	80066a8 <_sbrk_r>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d12b      	bne.n	800663c <_malloc_r+0x9c>
 80065e4:	230c      	movs	r3, #12
 80065e6:	0030      	movs	r0, r6
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	f000 f877 	bl	80066dc <__malloc_unlock>
 80065ee:	e003      	b.n	80065f8 <_malloc_r+0x58>
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	dade      	bge.n	80065b2 <_malloc_r+0x12>
 80065f4:	230c      	movs	r3, #12
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	1b5b      	subs	r3, r3, r5
 8006600:	d419      	bmi.n	8006636 <_malloc_r+0x96>
 8006602:	2b0b      	cmp	r3, #11
 8006604:	d903      	bls.n	800660e <_malloc_r+0x6e>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	18e4      	adds	r4, r4, r3
 800660a:	6025      	str	r5, [r4, #0]
 800660c:	e003      	b.n	8006616 <_malloc_r+0x76>
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	42a2      	cmp	r2, r4
 8006612:	d10e      	bne.n	8006632 <_malloc_r+0x92>
 8006614:	600b      	str	r3, [r1, #0]
 8006616:	0030      	movs	r0, r6
 8006618:	f000 f860 	bl	80066dc <__malloc_unlock>
 800661c:	0020      	movs	r0, r4
 800661e:	2207      	movs	r2, #7
 8006620:	300b      	adds	r0, #11
 8006622:	1d23      	adds	r3, r4, #4
 8006624:	4390      	bics	r0, r2
 8006626:	1ac2      	subs	r2, r0, r3
 8006628:	4298      	cmp	r0, r3
 800662a:	d0e6      	beq.n	80065fa <_malloc_r+0x5a>
 800662c:	1a1b      	subs	r3, r3, r0
 800662e:	50a3      	str	r3, [r4, r2]
 8006630:	e7e3      	b.n	80065fa <_malloc_r+0x5a>
 8006632:	6053      	str	r3, [r2, #4]
 8006634:	e7ef      	b.n	8006616 <_malloc_r+0x76>
 8006636:	0022      	movs	r2, r4
 8006638:	6864      	ldr	r4, [r4, #4]
 800663a:	e7c2      	b.n	80065c2 <_malloc_r+0x22>
 800663c:	2303      	movs	r3, #3
 800663e:	1cc4      	adds	r4, r0, #3
 8006640:	439c      	bics	r4, r3
 8006642:	42a0      	cmp	r0, r4
 8006644:	d0e1      	beq.n	800660a <_malloc_r+0x6a>
 8006646:	1a21      	subs	r1, r4, r0
 8006648:	0030      	movs	r0, r6
 800664a:	f000 f82d 	bl	80066a8 <_sbrk_r>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d1db      	bne.n	800660a <_malloc_r+0x6a>
 8006652:	e7c7      	b.n	80065e4 <_malloc_r+0x44>
 8006654:	200000c4 	.word	0x200000c4
 8006658:	200000c8 	.word	0x200000c8

0800665c <_realloc_r>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	0007      	movs	r7, r0
 8006660:	000d      	movs	r5, r1
 8006662:	0016      	movs	r6, r2
 8006664:	2900      	cmp	r1, #0
 8006666:	d105      	bne.n	8006674 <_realloc_r+0x18>
 8006668:	0011      	movs	r1, r2
 800666a:	f7ff ff99 	bl	80065a0 <_malloc_r>
 800666e:	0004      	movs	r4, r0
 8006670:	0020      	movs	r0, r4
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006674:	2a00      	cmp	r2, #0
 8006676:	d103      	bne.n	8006680 <_realloc_r+0x24>
 8006678:	f7ff ff48 	bl	800650c <_free_r>
 800667c:	0034      	movs	r4, r6
 800667e:	e7f7      	b.n	8006670 <_realloc_r+0x14>
 8006680:	f000 f834 	bl	80066ec <_malloc_usable_size_r>
 8006684:	002c      	movs	r4, r5
 8006686:	42b0      	cmp	r0, r6
 8006688:	d2f2      	bcs.n	8006670 <_realloc_r+0x14>
 800668a:	0031      	movs	r1, r6
 800668c:	0038      	movs	r0, r7
 800668e:	f7ff ff87 	bl	80065a0 <_malloc_r>
 8006692:	1e04      	subs	r4, r0, #0
 8006694:	d0ec      	beq.n	8006670 <_realloc_r+0x14>
 8006696:	0029      	movs	r1, r5
 8006698:	0032      	movs	r2, r6
 800669a:	f7ff ff1a 	bl	80064d2 <memcpy>
 800669e:	0029      	movs	r1, r5
 80066a0:	0038      	movs	r0, r7
 80066a2:	f7ff ff33 	bl	800650c <_free_r>
 80066a6:	e7e3      	b.n	8006670 <_realloc_r+0x14>

080066a8 <_sbrk_r>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b570      	push	{r4, r5, r6, lr}
 80066ac:	4d06      	ldr	r5, [pc, #24]	; (80066c8 <_sbrk_r+0x20>)
 80066ae:	0004      	movs	r4, r0
 80066b0:	0008      	movs	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb fa70 	bl	8001b98 <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d103      	bne.n	80066c4 <_sbrk_r+0x1c>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d000      	beq.n	80066c4 <_sbrk_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	20000268 	.word	0x20000268

080066cc <__malloc_lock>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4802      	ldr	r0, [pc, #8]	; (80066d8 <__malloc_lock+0xc>)
 80066d0:	f000 f814 	bl	80066fc <__retarget_lock_acquire_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	20000270 	.word	0x20000270

080066dc <__malloc_unlock>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4802      	ldr	r0, [pc, #8]	; (80066e8 <__malloc_unlock+0xc>)
 80066e0:	f000 f80d 	bl	80066fe <__retarget_lock_release_recursive>
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000270 	.word	0x20000270

080066ec <_malloc_usable_size_r>:
 80066ec:	1f0b      	subs	r3, r1, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1f18      	subs	r0, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da01      	bge.n	80066fa <_malloc_usable_size_r+0xe>
 80066f6:	580b      	ldr	r3, [r1, r0]
 80066f8:	18c0      	adds	r0, r0, r3
 80066fa:	4770      	bx	lr

080066fc <__retarget_lock_acquire_recursive>:
 80066fc:	4770      	bx	lr

080066fe <__retarget_lock_release_recursive>:
 80066fe:	4770      	bx	lr

08006700 <_init>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr

0800670c <_fini>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr
